<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Watchmen1992&#39;s Blog</title>
  
  <subtitle>锦瑟年华当与书香为度，是为不负天地人生。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-25T08:35:33.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>XiaoHua WANG</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NFS网络存储</title>
    <link href="http://yoursite.com/2019/03/25/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E5%8F%8A%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1/%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1/NFS/NFS%E7%BD%91%E7%BB%9C%E5%AD%98%E5%82%A8/"/>
    <id>http://yoursite.com/2019/03/25/IT科学技术知识体系结构-Linux运维方向/网络知识及网络服务/网络服务/NFS/NFS网络存储/</id>
    <published>2019-03-25T08:35:33.000Z</published>
    <updated>2019-03-25T08:35:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>NFS（Network File System）即<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/9719420" target="_blank" rel="noopener">网络文件系统</a>，是FreeBSD支持的文件系统中的一种，它允许网络中的计算机之间通过TCP/IP网络共享资源。在NFS的应用中，本地NFS的客户端应用可以透明地读写位于远端NFS服务器上的文件，就像访问本地文件一样。</p><p><code>NFS</code>与<code>Samba</code>服务类似，但一般<code>Samba</code>服务常用于办公局域网共享，而<code>NFS</code>常用于互联网中小型网站集群架构后端的数据共享。</p><p><code>NFS</code>客户端将<code>NFS</code>服务端设置好的共享目录挂载到本地某个挂载点，对于客户端来说，共享的资源就相当于在本地的目录下。</p><h2 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h2><p><code>NFS</code>在传输数据时使用的端口是随机选择的，依赖<code>RPC</code>服务来与外部通信，要想正常使用<code>NFS</code>,就必须保证<code>RPC</code>正常。</p><h2 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h2><p><code>RPC</code>（<em>Remote Procedure Call Protocol</em>）远程过程调用协议。它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。<br> 在<code>NFS</code>服务端和<code>NFS</code>客户端之间，<code>RPC</code>服务扮演一个中介角色，<code>NFS</code>客户端通过<code>RPC</code>服务得知<code>NFS</code>服务端使用的端口，从而双方可以进行数据通信。</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>当<code>NFS</code>服务端启动服务时会随机取用若干端口，并主动向<code>RPC</code>服务注册取用相关端口及功能信息，这样，<code>RPC</code>服务就知道<code>NFS</code>每个端口对应的的<code>NFS</code>功能了，然后<code>RPC</code>服务使用固定的111端口来监听<code>NFS</code>客户端提交的请求，并将正确的<code>NFS</code>端口信息回复给请求的<code>NFS</code>客户端。这样，<code>NFS</code>客户就可以与<code>NFS</code>服务端进行数据传输了。</p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="服务端部署"><a href="#服务端部署" class="headerlink" title="服务端部署"></a>服务端部署</h2><h3 id="安装nfs-与-rpc-相关软件包"><a href="#安装nfs-与-rpc-相关软件包" class="headerlink" title="安装nfs 与 rpc 相关软件包"></a>安装nfs 与 rpc 相关软件包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum -y install nfs-utils rpcbind</span><br></pre></td></tr></table></figure><p>注意：在centos7下其实只需要安装nfs-utils即可，因为rpcbind 属于它的依赖，yum会自动安装上。</p><p>根据官网说明 <a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/storage_administration_guide/ch-nfs" target="_blank" rel="noopener">Chapter 8. Network File System (NFS) - Red Hat Customer Portal</a>，CentOS 7.4 以后，支持 NFS v4.2 不需要 rpcbind 了，但是如果客户端只支持 NFC v3 则需要 rpcbind 这个服务。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h4><p>NFS默认的配置文件是 ：/etc/exports </p><p><strong>配置格式为：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NFS共享目录绝对路径    NFS客户端1地址范围（参数）NFS客户端2地址范围（参数）.....</span><br><span class="line"></span><br><span class="line">注意：客户端IP范围配置中，* 代表所有，即没有限制。</span><br></pre></td></tr></table></figure><p><strong>常用参数：</strong></p><ul><li>rw             read-write   读写</li><li>ro             read-only    只读</li><li>sync           请求或写入数据时，数据同步写入到NFS server的硬盘后才返回。数据安全，但性能降低了</li><li>async          优先将数据保存到内存，硬盘有空档时再写入硬盘，效率更高，但可能造成数据丢失。</li><li>root_squash    当NFS 客户端使用root 用户访问时，映射为NFS 服务端的匿名用户。NFS为了安全考虑，默认会将root账户降权为普通匿名账户。所以，如果不进行配置的话，这个将会是默认值</li><li>no_root_squash 当NFS 客户端使用root 用户访问时，映射为NFS 服务端的root 用户</li><li>all_squash     不论NFS 客户端使用任何帐户，均映射为NFS 服务端的匿名用户</li></ul><h4 id="配置案例"><a href="#配置案例" class="headerlink" title="配置案例"></a>配置案例</h4><p>修改配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># vim  /etc/exports</span><br><span class="line">/sharedir 192.168.0.0/16(rw,sync,root_squash)</span><br></pre></td></tr></table></figure><p>创建共享目录以及测试文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /sharedir</span><br><span class="line">touch /sharedir/Welcom.file</span><br><span class="line">echo &quot;Welcome to onlylink.top&quot; &gt;/sharedir/Welcom.file</span><br></pre></td></tr></table></figure><p>给共享目录添加权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R nfsnobody.nfsnobody /sharedir/</span><br></pre></td></tr></table></figure><p>把NFS共享目录赋予 NFS默认用户nfsnobody用户和用户组权限，如不设置，会导致NFS客户端无法在挂载好的共享目录中写入数据</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>启动 rpc服务并设置成开机自启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/rpcbind start</span><br><span class="line">chkconfig rpcbind on</span><br></pre></td></tr></table></figure><p>启动 nfs服务并设置成开机自启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/nfs start</span><br><span class="line">chkconfig nfs on</span><br></pre></td></tr></table></figure><p>在centos 7下的操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#  systemctl enable rpcbind</span><br><span class="line"># sudo systemctl enable nfs</span><br><span class="line"></span><br><span class="line"># sudo systemctl start rpcbind</span><br><span class="line"># sudo systemctl start nfs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果开启了防火墙，还需要进行设置</span><br><span class="line"># firewall-cmd --zone=public --permanent --add-service=rpc-bind</span><br><span class="line">success</span><br><span class="line"># firewall-cmd --zone=public --permanent --add-service=mountd</span><br><span class="line">success</span><br><span class="line"># firewall-cmd --zone=public --permanent --add-service=nfs</span><br><span class="line">success</span><br><span class="line"># firewall-cmd --reload</span><br><span class="line">success</span><br></pre></td></tr></table></figure><h2 id="客户端部署"><a href="#客户端部署" class="headerlink" title="客户端部署"></a>客户端部署</h2><h3 id="安装nfs-与-rpc-相关软件包-1"><a href="#安装nfs-与-rpc-相关软件包-1" class="headerlink" title="安装nfs 与 rpc 相关软件包"></a>安装nfs 与 rpc 相关软件包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum -y install nfs-utils rpcbind</span><br></pre></td></tr></table></figure><p>注意：在centos7下其实只需要安装nfs-utils即可，因为rpcbind 属于它的依赖，yum会自动安装上。</p><h3 id="配置启动"><a href="#配置启动" class="headerlink" title="配置启动"></a>配置启动</h3><p>设置 rpcbind 服务的开机启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl enable rpcbind</span><br></pre></td></tr></table></figure><p>启动 NFS 服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start rpcbind</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>客户端不需要打开防火墙，因为客户端时发出请求方，网络能连接到服务端即可。 </li><li>客户端也不需要开启 NFS 服务，因为不共享目录。</li></ul><h2 id="客户端挂载服务端"><a href="#客户端挂载服务端" class="headerlink" title="客户端挂载服务端"></a>客户端挂载服务端</h2><p>客户端连接服务端其实就是正常的挂载操作，只不过对象从本地变成了远端</p><p>先查服务端的共享目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ showmount -e 192.168.0.101</span><br><span class="line">Export list for 192.168.0.101:</span><br><span class="line">/data 192.168.0.0/24</span><br></pre></td></tr></table></figure><p>在客户端创建目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkdir /data</span><br></pre></td></tr></table></figure><p>挂载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mount -t nfs 192.168.0.101:/data /data</span><br></pre></td></tr></table></figure><p>当然，可以写到fstab中，设置为开机自启动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/fstab</span><br><span class="line">在文件末尾添加一下内容</span><br><span class="line"></span><br><span class="line">192.168.0.101:/data /data nfs defaults 0 0</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li>showmount -e 服务器的IP地址        #查看服务端的的共享配置</li><li><p>mount  -t nfs IP地址:/目录   /目录             # 挂载</p><p>例如：mount 192.168.4.5:/common  /common</p></li><li><p>exportfs -rv</p></li></ul><h1 id="其他配置案例"><a href="#其他配置案例" class="headerlink" title="其他配置案例"></a>其他配置案例</h1><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><p>共享/common目录，192.168.0.0网络的主机均可以只读访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#vim  /etc/exports</span><br><span class="line"></span><br><span class="line">/common 192.168.0.0/24(ro)</span><br></pre></td></tr></table></figure><h2 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h2><p>192.168.0.1可以读写的方式访问/abc,<br>192.168.0.2可以只读的方式访问/abc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/abc    192.168.0.1(rw) 192.168.0.2(ro)</span><br></pre></td></tr></table></figure><h2 id="案例3"><a href="#案例3" class="headerlink" title="案例3"></a>案例3</h2><p>任何人均可以只读的形式访问/dvd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/dvd    *(ro)</span><br></pre></td></tr></table></figure><h2 id="案例4-root权限管理"><a href="#案例4-root权限管理" class="headerlink" title="案例4-root权限管理"></a>案例4-root权限管理</h2><p>客户端使用root登录系统，访问服务器的NFS，则会以root身份访问NFS共享，<br>如果客户端系统使用tom登录，访问服务器的NFS，则会以tom身份访问NFS共享。</p><p>实现客户端可读写的方式：</p><ol><li>修改目录本身的权限（exports已经设置好了rw）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod  777  目录名称 </span><br><span class="line">或者其他值，但是需要读写</span><br></pre></td></tr></table></figure><ol><li>仅让root可以写，则需要修改exports,让NFS不对root进行降权</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#vim  /etc/exports</span><br><span class="line">/abc*(rw,no_root_squash)</span><br><span class="line"></span><br><span class="line">#service nfs  restart</span><br></pre></td></tr></table></figure><p>客户端使用root登录系统后，cd到NFS共享目录，则可以获得root权限</p><h2 id="案例5-触发挂载"><a href="#案例5-触发挂载" class="headerlink" title="案例5-触发挂载"></a>案例5-触发挂载</h2><p>在客户端实现触发挂载NFS服务器共享的/usr/src目录到本地/data/nfsdir</p><ol><li><p>安装软件包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># rpm -q autofs</span><br><span class="line"># yum -y install autofs</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>修改主配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># grep mnt /etc/auto.master </span><br><span class="line">/data/etc/auto.data</span><br><span class="line"></span><br><span class="line"># cat /etc/auto.data</span><br><span class="line">nfsdir2-fstype=nfs,rw192.168.10.10:/usr/src</span><br></pre></td></tr></table></figure></li><li><p>启动服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># service autofs restart</span><br><span class="line"># chkconfig autofs on</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@test02 ~]# ls /data/nfsdir2</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      NFS网络存储
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="网络知识及网络服务" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E5%8F%8A%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="网络服务" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E5%8F%8A%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1/%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="NFS" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E5%8F%8A%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1/%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1/NFS/"/>
    
    
      <category term="NFS网络存储" scheme="http://yoursite.com/tags/NFS%E7%BD%91%E7%BB%9C%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>python多线程</title>
    <link href="http://yoursite.com/2019/03/25/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/Python/python%E5%A4%9A%E7%BA%BF%E7%A8%8B/python%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/03/25/IT科学技术知识体系结构-Linux运维方向/编程开发/Python/python多线程/python多线程/</id>
    <published>2019-03-25T03:10:25.000Z</published>
    <updated>2019-03-25T03:10:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考文献：</p><ul><li><a href="http://www.runoob.com/python/python-multithreading.html" target="_blank" rel="noopener">python多线程</a></li></ul><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>多线程类似于同时执行多个不同程序，多线程运行有如下优点：</p><ul><li>使用线程可以把占据长时间的程序中的任务放到后台去处理。</li><li>用户界面可以更加吸引人，这样比如用户点击了一个按钮去触发某些事件的处理，可以弹出一个进度条来显示处理的进度</li><li>程序的运行速度可能加快</li><li>在一些等待的任务实现上如用户输入、文件读写和网络收发数据等，线程就比较有用了。在这种情况下我们可以释放一些珍贵的资源如内存占用等等。</li></ul><p>线程在执行过程中与进程还是有区别的。每个独立的进程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。</p><p>每个线程都有他自己的一组CPU寄存器，称为线程的上下文，该上下文反映了线程上次运行该线程的CPU寄存器的状态。</p><p>指令指针和堆栈指针寄存器是线程上下文中两个最重要的寄存器，线程总是在进程得到上下文中运行的，这些地址都用于标志拥有线程的进程地址空间中的内存。</p><ul><li>线程可以被抢占（中断）。</li><li>在其他线程正在运行时，线程可以暂时搁置（也称为睡眠） – 这就是线程的退让。</li></ul>]]></content>
    
    <summary type="html">
    
      python多线程
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="编程开发" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
      <category term="Python" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/Python/"/>
    
      <category term="python多线程" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/Python/python%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="python多线程" scheme="http://yoursite.com/tags/python%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Centos7的firewalld配置</title>
    <link href="http://yoursite.com/2019/03/15/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E8%BF%90%E7%BB%B4%E5%AE%89%E5%85%A8/%E9%98%B2%E7%81%AB%E5%A2%99/Centos7%E7%9A%84firewalld%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2019/03/15/IT科学技术知识体系结构-Linux运维方向/运维安全/防火墙/Centos7的firewalld配置/</id>
    <published>2019-03-15T03:11:00.000Z</published>
    <updated>2019-03-15T03:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考文献：</p><ul><li><a href="https://linux.cn/article-8098-1.html" target="_blank" rel="noopener">CentOS 上的 FirewallD 简明指南</a></li></ul><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p><a href="http://www.firewalld.org/" target="_blank" rel="noopener">FirewallD</a> 是 iptables 的前端控制器，用于实现持久的网络流量规则。它提供命令行和图形界面，在大多数 Linux 发行版的仓库中都有。与直接控制 iptables 相比，使用 FirewallD 有两个主要区别：</p><ol><li>FirewallD 使用区域和服务而不是链式规则。</li><li>它动态管理规则集，允许更新规则而不破坏现有会话和连接。</li></ol><p>注意：FirewallD 是 iptables 的一个封装，可以让你更容易地管理 iptables 规则 - 它并<em>不是</em> iptables 的替代品。虽然 iptables 命令仍可用于 FirewallD，但建议使用 FirewallD 时仅使用 FirewallD 命令。</p><h1 id="启停查看相关命令"><a href="#启停查看相关命令" class="headerlink" title="启停查看相关命令"></a>启停查看相关命令</h1><p>1、 启动服务，并在系统引导时启动该服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start firewalld</span><br><span class="line">sudo systemctl enable firewalld</span><br></pre></td></tr></table></figure><p>要停止并禁用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop firewalld</span><br><span class="line">sudo systemctl disable firewalld</span><br></pre></td></tr></table></figure><p>2、 检查防火墙状态。输出应该是 <code>running</code> 或者 <code>not running</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --state</span><br></pre></td></tr></table></figure><p>3、 要查看 FirewallD 守护进程的状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status firewalld</span><br></pre></td></tr></table></figure><p>示例输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewalld.service - firewalld - dynamic firewall daemon   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled)   Active: active (running) since Wed 2015-09-02 18:03:22 UTC; 1min 12s ago Main PID: 11954 (firewalld)   CGroup: /system.slice/firewalld.service   └─11954 /usr/bin/python -Es /usr/sbin/firewalld --nofork --nopid</span><br></pre></td></tr></table></figure><p>4、 重新加载 FirewallD 配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><h1 id="配置firewalld"><a href="#配置firewalld" class="headerlink" title="配置firewalld"></a>配置firewalld</h1><p>FirewallD 使用 XML 进行配置。除非是非常特殊的配置，你不必处理它们，而应该使用 <code>firewall-cmd</code>。</p><p>配置文件位于两个目录中：</p><ul><li><code>/usr/lib/FirewallD</code> 下保存默认配置，如默认区域和公用服务。 避免修改它们，因为每次 firewall 软件包更新时都会覆盖这些文件。</li><li><code>/etc/firewalld</code> 下保存系统配置文件。 这些文件将覆盖默认配置。</li></ul><h2 id="配置集"><a href="#配置集" class="headerlink" title="配置集"></a>配置集</h2><p>FirewallD 使用两个<em>配置集</em>：“运行时”和“持久”。 在系统重新启动或重新启动 FirewallD 时，不会保留运行时的配置更改，而对持久配置集的更改不会应用于正在运行的系统。</p><p><strong>小总结：</strong>2种配置方式，当前的实时生效和永久生效，实时是直接写入到内存中，永久是写入到配置文件当中</p><p>默认情况下，<code>firewall-cmd</code> 命令适用于运行时配置，但使用 <code>--permanent</code> 标志将保存到持久配置中。要添加和激活持久性规则，你可以使用两种方法之一。</p><p>1、 将规则同时添加到持久规则集和运行时规则集中。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --zone=public --add-service=http --permanentsudo firewall-cmd --zone=public --add-service=http</span><br></pre></td></tr></table></figure><p>2、 将规则添加到持久规则集中并重新加载 FirewallD。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --zone=public --add-service=http --permanentsudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><p><strong>特别注意</strong>：<code>reload</code> 命令会删除所有运行时配置并应用永久配置。因为 firewalld 动态管理规则集，所以它不会破坏现有的连接和会话。</p><h2 id="防火墙的区域"><a href="#防火墙的区域" class="headerlink" title="防火墙的区域"></a>防火墙的区域</h2><p>“区域”是针对给定位置或场景（例如家庭、公共、受信任等）可能具有的各种信任级别的预构建规则集。不同的区域允许不同的网络服务和入站流量类型，而拒绝其他任何流量。 首次启用 FirewallD 后，<code>public</code> 将是默认区域。</p><p>区域也可以用于不同的网络接口。例如，要分离内部网络和互联网的接口，你可以在 <code>internal</code> 区域上允许 DHCP，但在<code>external</code> 区域仅允许 HTTP 和 SSH。未明确设置为特定区域的任何接口将添加到默认区域。</p><p>要找到默认区域： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --get-default-zone</span><br></pre></td></tr></table></figure><p>要修改默认区域：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --set-default-zone=internal</span><br></pre></td></tr></table></figure><p>要查看你网络接口使用的区域：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --get-active-zones</span><br></pre></td></tr></table></figure><p>示例输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public  interfaces: eth0</span><br></pre></td></tr></table></figure><p>要得到特定区域的所有配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --zone=public --list-all</span><br></pre></td></tr></table></figure><p>示例输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public (default, active)  interfaces: ens160  sources:  services: dhcpv6-client http ssh  ports: 12345/tcp  masquerade: no  forward-ports:  icmp-blocks:  rich rules:</span><br></pre></td></tr></table></figure><p>要得到所有区域的配置： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --list-all-zones</span><br></pre></td></tr></table></figure><p>示例输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">block  interfaces:  sources:  services:  ports:  masquerade: no  forward-ports:  icmp-blocks:  rich rules:  ...work  interfaces:  sources:  services: dhcpv6-client ipp-client ssh  ports:  masquerade: no  forward-ports:  icmp-blocks:  rich rules:</span><br></pre></td></tr></table></figure><h2 id="与服务一起使用"><a href="#与服务一起使用" class="headerlink" title="与服务一起使用"></a>与服务一起使用</h2><p>FirewallD 可以根据特定网络服务的预定义规则来允许相关流量。你可以创建自己的自定义系统规则，并将它们添加到任何区域。 默认支持的服务的配置文件位于 <code>/usr/lib /firewalld/services</code>，用户创建的服务文件在 <code>/etc/firewalld/services</code> 中。</p><p>要查看默认的可用服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --get-services</span><br></pre></td></tr></table></figure><p>比如，要启用或禁用 HTTP 服务： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --zone=public --add-service=http --permanent</span><br><span class="line">sudo firewall-cmd --zone=public --remove-service=http --permanent</span><br></pre></td></tr></table></figure><h2 id="与端口一起使用"><a href="#与端口一起使用" class="headerlink" title="与端口一起使用"></a>与端口一起使用</h2><p>比如：允许或者禁用 12345 端口的 TCP 流量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --zone=public --add-port=12345/tcp --permanent</span><br><span class="line">sudo firewall-cmd --zone=public --remove-port=12345/tcp --permanent</span><br></pre></td></tr></table></figure><h2 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h2><p>下面是在同一台服务器上将 80 端口的流量转发到 12345 端口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --zone=&quot;public&quot; --add-forward-port=port=80:proto=tcp:toport=12345</span><br></pre></td></tr></table></figure><p>要将端口转发到另外一台服务器上：</p><p>1、 在需要的区域中激活 masquerade。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --zone=public --add-masquerade</span><br></pre></td></tr></table></figure><p>2、 添加转发规则。例子中是将本地的 80 端口的流量转发到 IP 地址为 ：123.456.78.9 的<em>远程服务器上的</em>  8080 端口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --zone=&quot;public&quot; --add-forward-port=port=80:proto=tcp:toport=8080:toaddr=123.456.78.9</span><br></pre></td></tr></table></figure><p>要删除规则，用 <code>--remove</code> 替换 <code>--add</code>。比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --zone=public --remove-masquerade</span><br></pre></td></tr></table></figure><h2 id="用-FirewallD-构建规则集"><a href="#用-FirewallD-构建规则集" class="headerlink" title="用 FirewallD 构建规则集"></a>用 FirewallD 构建规则集</h2><p>例如，以下是如何使用 FirewallD 为你的服务器配置基本规则（如果您正在运行 web 服务器）。</p><ol><li>将 <code>eth0</code> 的默认区域设置为 <code>dmz</code>。 在所提供的默认区域中，dmz（非军事区）是最适合于这个程序的，因为它只允许 SSH 和 ICMP。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --set-default-zone=dmzsudo firewall-cmd --zone=dmz --add-interface=eth0</span><br></pre></td></tr></table></figure><p>2、 把 HTTP 和 HTTPS 添加永久的服务规则到 dmz 区域中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --zone=dmz --add-service=http --permanentsudo firewall-cmd --zone=dmz --add-service=https --permanent</span><br></pre></td></tr></table></figure><p> 3、 重新加载 FirewallD 让规则立即生效：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><p> 如果你运行 <code>firewall-cmd --zone=dmz --list-all</code>， 会有下面的输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dmz (default)  interfaces: eth0  sources:  services: http https ssh  ports:  masquerade: no  forward-ports:  icmp-blocks:  rich rules:</span><br></pre></td></tr></table></figure><p> 这告诉我们，<code>dmz</code> 区域是我们的默认区域，它被用于 <code>eth0</code> 接口中所有网络的源地址和端口。 允许传入 HTTP（端口 80）、HTTPS（端口 443）和 SSH（端口 22）的流量，并且由于没有 IP 版本控制的限制，这些适用于 IPv4 和 IPv6。 不允许IP 伪装以及端口转发。 我们没有 ICMP 块，所以 ICMP 流量是完全允许的。没有丰富Rich规则，允许所有出站流量。</p><h1 id="高级配置"><a href="#高级配置" class="headerlink" title="高级配置"></a>高级配置</h1><p>服务和端口适用于基本配置，但对于高级情景可能会限制较多。 Rich规则和Direct接口允许你为任何端口、协议、地址和操作向任何区域 添加完全自定义的防火墙规则。</p><h2 id="rich规则"><a href="#rich规则" class="headerlink" title="rich规则"></a>rich规则</h2><p>rich规则的语法有很多，但都完整地记录在 <a href="https://jpopelka.fedorapeople.org/firewalld/doc/firewalld.richlanguage.html" target="_blank" rel="noopener">firewalld.richlanguage(5)</a> 的手册页中（或在终端中 <code>man firewalld.richlanguage</code>）。 使用 <code>--add-rich-rule</code>、<code>--list-rich-rules</code> 、 <code>--remove-rich-rule</code> 和 firewall-cmd 命令来管理它们。</p><p>这里有一些常见的例子：</p><p>允许来自主机 192.168.0.14 的所有 IPv4 流量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --zone=public --add-rich-rule &apos;rule family=&quot;ipv4&quot; source address=192.168.0.14 accept&apos;</span><br></pre></td></tr></table></figure><p>拒绝来自主机 192.168.1.10 到 22 端口的 IPv4 的 TCP 流量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --zone=public --add-rich-rule &apos;rule family=&quot;ipv4&quot; source address=&quot;192.168.1.10&quot; port port=22 protocol=tcp reject&apos;</span><br></pre></td></tr></table></figure><p>允许来自主机 10.1.0.3 到 80 端口的 IPv4 的 TCP 流量，并将流量转发到 6532 端口上。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --zone=public --add-rich-rule &apos;rule family=ipv4 source address=10.1.0.3 forward-port port=80 protocol=tcp to-port=6532&apos;</span><br></pre></td></tr></table></figure><p>将主机 172.31.4.2 上 80 端口的 IPv4 流量转发到 8080 端口（需要在区域上激活 masquerade）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --zone=public --add-rich-rule &apos;rule family=ipv4 forward-port port=80 protocol=tcp to-port=8080 to-addr=172.31.4.2&apos;</span><br></pre></td></tr></table></figure><p>列出你目前的丰富规则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --list-rich-rules</span><br></pre></td></tr></table></figure><h1 id="实例案例"><a href="#实例案例" class="headerlink" title="实例案例"></a>实例案例</h1><p>IDC机房机器，有以下需求：</p><ul><li>ssh只允许内网网段访问，拒绝所有其他网段</li><li>开放指定的端口（8080、9000）给所有网段</li></ul><p>注意，因为使用的是public这个zone，所有在配置都配置完成之后，需要将默认的ssh服务remove掉</p><p>具体的命令如下：</p><ul><li>添加内网网段</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">即时生效</span><br><span class="line"></span><br><span class="line"># firewall-cmd   --zone=public --add-rich-rule &apos;rule family=&quot;ipv4&quot; source address=172.24.0.0/16 accept&apos;</span><br><span class="line"></span><br><span class="line">#firewall-cmd   --zone=public --add-rich-rule &apos;rule family=&quot;ipv4&quot; source address=10.11.0.0/16 accept&apos;</span><br><span class="line"></span><br><span class="line">#firewall-cmd   --zone=public --add-rich-rule &apos;rule family=&quot;ipv4&quot; source address=10.11.10.0/24 accept&apos;</span><br><span class="line"></span><br><span class="line">永久生效</span><br><span class="line"></span><br><span class="line"># firewall-cmd --permanent --zone=public --add-rich-rule &apos;rule family=&quot;ipv4&quot; source address=172.24.0.0/16 accept&apos;</span><br><span class="line"></span><br><span class="line">#firewall-cmd --permanent --zone=public --add-rich-rule &apos;rule family=&quot;ipv4&quot; source address=10.11.0.0/16 accept&apos;</span><br><span class="line"></span><br><span class="line">#firewall-cmd --permanent --zone=public --add-rich-rule &apos;rule family=&quot;ipv4&quot; source address=10.10.10.0/24 accept&apos;</span><br></pre></td></tr></table></figure><ul><li>开放指定端口</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">即时生效</span><br><span class="line"># firewall-cmd --zone=public --add-rich-rule &apos;rule family=&quot;ipv4&quot; source address=60.191.68.43 port port=8080 protocol=tcp accept&apos;</span><br><span class="line"></span><br><span class="line"># firewall-cmd --zone=public --add-rich-rule &apos;rule family=&quot;ipv4&quot; source address=60.191.68.43 port port=9000 protocol=tcp accept&apos;</span><br><span class="line"></span><br><span class="line"># firewall-cmd --zone=public --add-rich-rule &apos;rule family=&quot;ipv4&quot; source address=101.68.94.0/29 port port=8080 protocol=tcp accept&apos;</span><br><span class="line"></span><br><span class="line"># firewall-cmd --zone=public --add-rich-rule &apos;rule family=&quot;ipv4&quot; source address=101.68.94.0/29 port port=9000 protocol=tcp accept&apos;</span><br><span class="line"></span><br><span class="line"># firewall-cmd --zone=public --add-rich-rule &apos;rule family=&quot;ipv4&quot; source address=183.129.221.128/29 port port=8080 protocol=tcp accept&apos;</span><br><span class="line"></span><br><span class="line"># firewall-cmd --zone=public --add-rich-rule &apos;rule family=&quot;ipv4&quot; source address=183.129.221.128/29 port port=9000 protocol=tcp accept&apos;</span><br><span class="line"></span><br><span class="line"># firewall-cmd --zone=public --add-rich-rule &apos;rule family=&quot;ipv4&quot; source address=122.224.251.144/29 port port=8080 protocol=tcp accept&apos;</span><br><span class="line"></span><br><span class="line"># firewall-cmd --zone=public --add-rich-rule &apos;rule family=&quot;ipv4&quot; source address=122.224.251.144/29 port port=9000 protocol=tcp accept&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">永久生效</span><br><span class="line"></span><br><span class="line"># firewall-cmd --permanent --zone=public --add-rich-rule &apos;rule family=&quot;ipv4&quot; source address=60.191.68.43 port port=8080 protocol=tcp accept&apos;</span><br><span class="line"></span><br><span class="line"># firewall-cmd --permanent --zone=public --add-rich-rule &apos;rule family=&quot;ipv4&quot; source address=60.191.68.43 port port=9000 protocol=tcp accept&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># firewall-cmd --permanent --zone=public --add-rich-rule &apos;rule family=&quot;ipv4&quot; source address=101.68.94.0/29 port port=8080 protocol=tcp accept&apos;</span><br><span class="line"></span><br><span class="line"># firewall-cmd --permanent --zone=public --add-rich-rule &apos;rule family=&quot;ipv4&quot; source address=101.68.94.0/29 port port=9000 protocol=tcp accept&apos;</span><br><span class="line"></span><br><span class="line"># firewall-cmd --permanent --zone=public --add-rich-rule &apos;rule family=&quot;ipv4&quot; source address=183.129.221.128/29 port port=8080 protocol=tcp accept&apos;</span><br><span class="line"></span><br><span class="line"># firewall-cmd --permanent --zone=public --add-rich-rule &apos;rule family=&quot;ipv4&quot; source address=183.129.221.128/29 port port=9000 protocol=tcp accept&apos;</span><br><span class="line"></span><br><span class="line"># firewall-cmd --permanent --zone=public --add-rich-rule &apos;rule family=&quot;ipv4&quot; source address=122.224.251.144/29 port port=8080 protocol=tcp accept&apos;</span><br><span class="line"></span><br><span class="line"># firewall-cmd --permanent --zone=public --add-rich-rule &apos;rule family=&quot;ipv4&quot; source address=122.224.251.144/29 port port=9000 protocol=tcp accept&apos;</span><br></pre></td></tr></table></figure><ul><li>删除ssh服务</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># firewall-cmd --zone=public --remove-service=ssh </span><br><span class="line"></span><br><span class="line"># firewall-cmd --zone=public --remove-service=ssh --permanent</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># firewall-cmd --zone=public --add-rich-rule &apos;rule family=&quot;ipv4&quot; source address=101.68.94.0/29 port port=443 protocol=tcp accept&apos;</span><br><span class="line"></span><br><span class="line"># firewall-cmd --permanent --zone=public --add-rich-rule &apos;rule family=&quot;ipv4&quot; source address=101.68.94.0/29 port port=443 protocol=tcp accept&apos;</span><br></pre></td></tr></table></figure><p>运维部门将于18点开始停止公司开发环境服务器，涉及所有应用、所有中间件（包括jumpserver（跳板机）、redis、mq、zk、disconf、zabbix、consul、git、nexus、大数据相关组件等等），各位请及时做好相关准备，请知悉！</p>]]></content>
    
    <summary type="html">
    
      Centos7的firewalld配置
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="运维安全" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E8%BF%90%E7%BB%B4%E5%AE%89%E5%85%A8/"/>
    
      <category term="防火墙" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E8%BF%90%E7%BB%B4%E5%AE%89%E5%85%A8/%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    
    
      <category term="firewalld" scheme="http://yoursite.com/tags/firewalld/"/>
    
  </entry>
  
  <entry>
    <title>centos升级openssh</title>
    <link href="http://yoursite.com/2019/02/19/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/Linux%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/centos%E5%8D%87%E7%BA%A7openssh/"/>
    <id>http://yoursite.com/2019/02/19/IT科学技术知识体系结构-Linux运维方向/Linux系统管理/centos升级openssh/</id>
    <published>2019-02-19T02:04:55.000Z</published>
    <updated>2019-02-19T02:04:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>主要对象分为2个版本，一个是centos6.8，一个是centos7.3和7.4.</p><h1 id="升级原因"><a href="#升级原因" class="headerlink" title="升级原因"></a>升级原因</h1><p>7.4以下openssh版本存在严重漏洞：</p><p>1.OpenSSH 远程权限提升漏洞(CVE-2016-10010)<br>2.OpenSSH J-PAKE授权问题漏洞(CVE-2010-4478)<br>3.Openssh MaxAuthTries限制绕过漏洞(CVE-2015-5600)<br>OpenSSL&gt;=1.0.1可以不用升级OpenSSL</p><h1 id="当前版本"><a href="#当前版本" class="headerlink" title="当前版本"></a>当前版本</h1><p><strong>6.8</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@app018-dev.novalocal ~]# cat /etc/redhat-release</span><br><span class="line">CentOS release 6.8 (Final)</span><br><span class="line">[root@app018-dev.novalocal ~]# rpm -qa | grep openssh</span><br><span class="line">openssh-clients-5.3p1-118.1.el6_8.x86_64</span><br><span class="line">openssh-5.3p1-118.1.el6_8.x86_64</span><br><span class="line">openssh-server-5.3p1-118.1.el6_8.x86_64</span><br></pre></td></tr></table></figure><p><strong>7</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">de</span><br></pre></td></tr></table></figure><p>可以看到，当前的版本是：</p><ul><li>centos6.8：5.3p1</li><li>centos7：7.4p1</li></ul><h1 id="目标版本"><a href="#目标版本" class="headerlink" title="目标版本"></a>目标版本</h1><p>要求的目标版本是7.5及以上</p><p>在当前时间节点（2019年02月19日10:09:56），最高版本为：<a href="https://www.openssh.com/txt/release-7.9" target="_blank" rel="noopener">OpenSSH 7.9</a>/<a href="https://www.openssh.com/txt/release-7.9" target="_blank" rel="noopener">7.9p1</a> (2018-10-19)</p><p>在这里，我们选择升级到最新版本</p><p>整个的升级操作是server和client都要升级</p><h1 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h1><h2 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum -y install gcc pam-devel zlib-devel openssl openssl-devel wget telnet-server* telnet</span><br></pre></td></tr></table></figure><h2 id="安装及配置telnet"><a href="#安装及配置telnet" class="headerlink" title="安装及配置telnet"></a>安装及配置telnet</h2><p><strong>安装</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum -y install telnet-server* telnet</span><br></pre></td></tr></table></figure><p><strong>配置</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># vi /etc/xinetd.d/telnet </span><br><span class="line">将其中disable字段的yes改为no以启用telnet服务 </span><br><span class="line"></span><br><span class="line"># mv /etc/securetty /etc/securetty.old    #允许root用户通过telnet登录 </span><br><span class="line"></span><br><span class="line"># service xinetd start                    #启动telnet服务 </span><br><span class="line"></span><br><span class="line"># chkconfig xinetd on                    #使telnet服务开机启动，避免升级过程中服务器意外重启后无法远程登录系统</span><br></pre></td></tr></table></figure><p>在centos7下的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># mv /etc/securetty /etc/securetty.old </span><br><span class="line"></span><br><span class="line"># systemctl start telnet.socket</span><br><span class="line"></span><br><span class="line"># systemctl enable telnet.socket</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><p>测试telnet能否正常登入系统</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@common001-dev.novalocal ~]# telnet 192.168.11.27</span><br></pre></td></tr></table></figure><h2 id="安装ssh"><a href="#安装ssh" class="headerlink" title="安装ssh"></a>安装ssh</h2><p><strong>下载软件包</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># wget https://cdn.openbsd.org/pub/OpenBSD/OpenSSH/portable/openssh-7.9p1.tar.gz</span><br></pre></td></tr></table></figure><p><strong>解压安装</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># tar zxvf openssh-7.4p1.tar.gz</span><br><span class="line"># cd openssh-7.4p1</span><br><span class="line"># ./configure</span><br><span class="line"># make</span><br><span class="line"># make install</span><br></pre></td></tr></table></figure><p>我们使用默认的安装，不加指定路径，在安装完毕之后sshd将会安装到/usr/local/sbin/下。而ssh、ssh-keygen等都会安装到/usr/local/bin目录下。</p><p>而操作系统的PATH路径是优先选择/usr/local/的，所以普通命令都可以使用到最新的，但是server端的sshd我们还需要做额外的配置</p><p><strong>修改sshd启动脚本</strong></p><p>将sshd启动脚本中的sshd命令路径修改为指定版本的路径：</p><p>centos6下就一个启动脚本文件的内容需要替换</p><ul><li>/etc/init.d/sshd</li></ul><p>#  vim /etc/init.d/sshd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">将</span><br><span class="line">KEYGEN=/usr/bin/ssh-keygen</span><br><span class="line">SSHD=/usr/sbin/sshd</span><br><span class="line"></span><br><span class="line">修改成为：</span><br><span class="line">KEYGEN=/usr/local/bin/ssh-keygen</span><br><span class="line">SSHD=/usr/local/sbin/sshd</span><br></pre></td></tr></table></figure><p>centos7下有一下几个文件的内容需要替换</p><ul><li>/usr/lib/systemd/system/sshd-keygen.service</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">将</span><br><span class="line">ExecStart=/usr/sbin/sshd-keygen</span><br><span class="line"></span><br><span class="line">替换为：</span><br><span class="line">ExecStart=/usr/local/bin/sshd-keygen</span><br></pre></td></tr></table></figure><ul><li>/usr/lib/systemd/system/sshd.service</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">将</span><br><span class="line">ExecStart=/usr/sbin/sshd $OPTIONS</span><br><span class="line"></span><br><span class="line">替换为：</span><br><span class="line">ExecStart=/usr/local/sbin/sshd $OPTIONS</span><br></pre></td></tr></table></figure><ul><li>/usr/lib/systemd/system/sshd@.service</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">将</span><br><span class="line">ExecStart=-/usr/sbin/sshd -i $OPTIONS</span><br><span class="line"></span><br><span class="line">替换为：</span><br><span class="line">ExecStart=-/usr/local/sbin/sshd -i $OPTIONS</span><br></pre></td></tr></table></figure><h2 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h2><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><h2 id="防火墙问题"><a href="#防火墙问题" class="headerlink" title="防火墙问题"></a>防火墙问题</h2><p>有防火墙的要添加一条23端口的记录</p>]]></content>
    
    <summary type="html">
    
      centos升级openssh
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="Linux系统管理" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/Linux%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="centos升级openssh" scheme="http://yoursite.com/tags/centos%E5%8D%87%E7%BA%A7openssh/"/>
    
  </entry>
  
  <entry>
    <title>redis集群</title>
    <link href="http://yoursite.com/2019/02/16/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/Redis%E9%9B%86%E7%BE%A4/redis%E9%9B%86%E7%BE%A4/"/>
    <id>http://yoursite.com/2019/02/16/IT科学技术知识体系结构-Linux运维方向/数据库/Redis/Redis集群/redis集群/</id>
    <published>2019-02-16T03:20:59.000Z</published>
    <updated>2019-02-16T03:20:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="数据分布"><a href="#数据分布" class="headerlink" title="数据分布"></a>数据分布</h2><p>常见的数据分布方式有：哈希分区和顺序分区。Redis集群使用的是哈希分析，因此这里主要关注哈希分区。</p><p>Hash（哈希）也叫散列，指的是一类特征，也就是把任意长度的<a href="https://baike.baidu.com/item/%E8%BE%93%E5%85%A5/5481954" target="_blank" rel="noopener">输入</a>（又叫做预映射pre-image）通过散列算法变换成固定长度的<a href="https://baike.baidu.com/item/%E8%BE%93%E5%87%BA/11056752" target="_blank" rel="noopener">输出</a>，该输出就是散列值或者叫hash值。</p><p>因此只要是符合这个特征的方式（因为会存在很多不同的算法实现）都可以叫做哈希方式。</p><p>常见的哈希分区主要有以下几种（Redis集群使用的是第三种）：</p><ul><li><p>节点取余。使用特定的值，例如Redis的key名称或者指定id，然后根据节点数量计算出哈希值（hash(key)%N）。但是这种方式在节点数量变化时，映射关系会变化，会涉及到数据牵引。</p></li><li><p>一致性哈希。可以参考这篇文章：<a href="https://www.jianshu.com/p/e8fb89bb3a61" target="_blank" rel="noopener">https://www.jianshu.com/p/e8fb89bb3a61</a></p></li><li>虚拟槽分区（优化后的一致性哈希）。在一个哈希环之后，定义出16364个节点，然后将这些物理的节点动态的分配给集群节点，让每一个节点负责一定数量的slot。在数据写入的时候，hash（key）–&gt;[0,16383]，实际的计算公式为：slot=CRC16(key)&amp;16383。<ul><li>一个slot实际上一个物理的存储节点，由于这些slot是不会发生变化的（在默认的一致性哈希中数量会发生变化，由此会对数据产生影响），所有也就保证了集群数据的可靠性和平衡性。</li></ul></li></ul><p>Redis集群使用虚拟槽分区的特点：</p><ul><li>解耦数据和节点之间的关系，简化了扩容和缩容的难度。因此实际存储的slot数量是不变的，变化的只是分配关系。</li><li>每一个集群节点本身去维护节点和slot的映射关系，不需要客户端或者代理服务去维护这个映射关系。</li><li>支持集群节点、slot、key等之间的映射关系查询，通过获取这些信息，可以用于数据路由、在线伸缩等场景。</li></ul><p>Redis集群中的每一个节点会分配若干个slot。</p><p>作为分布式解决方案，需要为每一个集群节点定义一个固定的id，也就是上面说的哈希值，外层哈希计算之后然后进行分布式的存储。</p><h2 id="集群功能的限制"><a href="#集群功能的限制" class="headerlink" title="集群功能的限制"></a>集群功能的限制</h2><p>Redis集群相对于单实例模式，在功能上会有一些限制</p><ul><li>不支持链式复制。也就是从节点只能复制主节点，不能复制从节点。</li><li>key的批量操作，只支持在同一个slot中的key。</li><li>key的事务操作，只支持在同一个slot中，当多个key分布在不同槽时无法使用事务功能。</li><li>只支持db0</li></ul><h1 id="集群创建"><a href="#集群创建" class="headerlink" title="集群创建"></a>集群创建</h1><p>集群的创建过程也比较简单，只需要3个步骤：</p><ol><li>准备节点</li><li>节点握手，组成集群</li><li>为每个节点分配slot槽</li><li>创建主从关系</li></ol><h2 id="集群节点创建"><a href="#集群节点创建" class="headerlink" title="集群节点创建"></a>集群节点创建</h2><p>在配置文件中开启：cluster-enabled yes即可让节点运行在集群模式之下。</p><p>建议为所有的集群节点规划统一的配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@common007-dev.novalocal conf]# cat redis-cluster-6379.conf # 以下只显示部分核心的配置</span><br><span class="line">daemonize yes</span><br><span class="line">dir &quot;/home/cachecloud/data&quot;</span><br><span class="line">port 6379</span><br><span class="line">protected-mode no</span><br><span class="line">bind 0.0.0.0</span><br><span class="line"></span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-node-timeout 15000</span><br><span class="line">cluster-config-file &quot;nodes-6379.conf&quot;</span><br></pre></td></tr></table></figure><h3 id="关于集群配置文件"><a href="#关于集群配置文件" class="headerlink" title="关于集群配置文件"></a>关于集群配置文件</h3><p>集群模式的Redis除了原有的配置文件之外，又加了一份集群配置文件。当集群内节点信息发生变化，例如添加节点、节点下线、故障转移等时，节点会自动保存这些信息到集群配置文件。</p><p>需要注意的是：</p><ul><li><p>Redis实例会自动维护集群配置文件，不要手动修改。防止节点重启时产生集群信息错乱。</p></li><li><p>集群配置文件会存储在指定的dir路径下。也就是说和aof、rdb等数据文件再同一个路径下。</p></li></ul><h2 id="集群节点握手"><a href="#集群节点握手" class="headerlink" title="集群节点握手"></a>集群节点握手</h2><p>节点握手是指一批运行在集群模式下的节点通过gossip协议彼此通信，感知对方的过程。</p><p>使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; cluster meet 127.0.0.1 6380</span><br></pre></td></tr></table></figure><p>注意：我们只需要在其中一个节点执行cluster meet命令即可，握手状态会通过消息在集群内进行传播，最终所有的节点都会发现其他节点并发起握手流程。最后我们执行cluster nodes命令去查看验证效果即可。</p><p>所有集群节点都握手建立连接之后，此时集群处于下线状态。</p><h2 id="为集群节点分配slot"><a href="#为集群节点分配slot" class="headerlink" title="为集群节点分配slot"></a>为集群节点分配slot</h2><p>Redis集群把所有数据都映射到16384个slot当中，每个key都会映射到一个固定的slot当中，只有当节点分配了slot，才能响应和这些slot关联的key命令。</p><p>因为在交互模式下，不能批量的输入slot的范围，因此使用这种非交互的方式进行添加slot </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[cachecloud@common007-dev.novalocal logs]$ redis-cli  -p 7000 CLUSTER ADDSLOTS &#123;0..16383&#125;</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h2 id="集群的从节点"><a href="#集群的从节点" class="headerlink" title="集群的从节点"></a>集群的从节点</h2><p>可以看到，和sentinel等方式不一样，节点的主从关系我们没有在配置文件当中使用slaveof进行指定，在当前状态下，每一个集群的节点都是master。</p><p>一般情况下我们会对半，一半为master，一半为slave，因此在上面分配slot时，如果节点总数为6，那么将16384个slot进行三等分，分配之后，还剩下3个节点时为空，这个时候，我们执行以下命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6380&gt; cluster replicate 集群node的id</span><br></pre></td></tr></table></figure><h2 id="redis-trib-rb方式创建"><a href="#redis-trib-rb方式创建" class="headerlink" title="redis-trib.rb方式创建"></a>redis-trib.rb方式创建</h2><p>使用这种方式首先需要解决ruby的相关问题，默认使用yum安装的版本太低，无法正确安装Redis</p><p>ruby的官方网站为：<a href="http://www.rvm.io/" target="_blank" rel="noopener">http://www.rvm.io/</a></p><p>整个的操作过程为：</p><p>第1步：解决ruby问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># gpg2 --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB</span><br><span class="line"></span><br><span class="line">下载rvm</span><br><span class="line"># curl -sSL https://get.rvm.io | bash -s stable</span><br><span class="line"></span><br><span class="line">查找配置文件</span><br><span class="line"># find / -name rvm.sh</span><br><span class="line"></span><br><span class="line">配置文件生效</span><br><span class="line"># source /etc/profile.d/rvm.sh </span><br><span class="line"></span><br><span class="line">下载rvm依赖</span><br><span class="line"># rvm requirements </span><br><span class="line"></span><br><span class="line">查看rvm库ruby版本</span><br><span class="line"># rvm list known</span><br><span class="line"></span><br><span class="line">安装ruby指定版本</span><br><span class="line"># rvm install ruby-2.4.1</span><br><span class="line"></span><br><span class="line">使用ruby版本默认</span><br><span class="line"># rvm use 2.4.1 default</span><br><span class="line"></span><br><span class="line">安装Redis</span><br><span class="line"># gem install redis</span><br></pre></td></tr></table></figure><p>可能还需要：yum install -y rubygems</p><p>第2步：启动集群节点</p><p>第3步：创建Redis集群</p><p>接下来我们创建Redis集群</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用 --replicas 1 创建 每个master带一个 slave 指令</span><br><span class="line"># ./redis-trib.rb create --replicas 1   192.168.11.84:7000 192.168.11.84:7001 192.168.11.84:7002 192.168.11.11:7000 192.168.11.11:7001 192.168.11.11:7002</span><br></pre></td></tr></table></figure><p>如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">[cachecloud@common007-dev.novalocal src]$ ./redis-trib.rb create --replicas 1   192.168.11.84:7000 192.168.11.84:7001 192.168.11.84:7002 192.168.11.11:7000 192.168.11.11:7001 192.168.11.11:7002</span><br><span class="line">&gt;&gt;&gt; Creating cluster</span><br><span class="line">&gt;&gt;&gt; Performing hash slots allocation on 6 nodes...</span><br><span class="line">Using 3 masters:</span><br><span class="line">192.168.11.84:7000</span><br><span class="line">192.168.11.11:7000</span><br><span class="line">192.168.11.84:7001</span><br><span class="line">Adding replica 192.168.11.11:7001 to 192.168.11.84:7000</span><br><span class="line">Adding replica 192.168.11.84:7002 to 192.168.11.11:7000</span><br><span class="line">Adding replica 192.168.11.11:7002 to 192.168.11.84:7001</span><br><span class="line">M: 2fcb0a92c0b055e9e0c0ec7a279a1c33e400b92c 192.168.11.84:7000</span><br><span class="line">   slots:0-5460 (5461 slots) master</span><br><span class="line">M: 94d79d6303e6de4745ec4f1dd61d51d61f73919e 192.168.11.84:7001</span><br><span class="line">   slots:10923-16383 (5461 slots) master</span><br><span class="line">S: 1c6db7f5c2998db943cb26bf9716d13a367034b9 192.168.11.84:7002</span><br><span class="line">   replicates 1073c42cefa1e192ff219e554c843cbdc1eabd80</span><br><span class="line">M: 1073c42cefa1e192ff219e554c843cbdc1eabd80 192.168.11.11:7000</span><br><span class="line">   slots:5461-10922 (5462 slots) master</span><br><span class="line">S: 8c911465ef9118912ab848f6a9e5790027b0d4fa 192.168.11.11:7001</span><br><span class="line">   replicates 2fcb0a92c0b055e9e0c0ec7a279a1c33e400b92c</span><br><span class="line">S: 39f885d55462cd7fc4e975317da9db19abcc1835 192.168.11.11:7002</span><br><span class="line">   replicates 94d79d6303e6de4745ec4f1dd61d51d61f73919e</span><br><span class="line">Can I set the above configuration? (type &apos;yes&apos; to accept): yes</span><br><span class="line">&gt;&gt;&gt; Nodes configuration updated</span><br><span class="line">&gt;&gt;&gt; Assign a different config epoch to each node</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER MEET messages to join the cluster</span><br><span class="line">Waiting for the cluster to join....</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.11.84:7000)</span><br><span class="line">M: 2fcb0a92c0b055e9e0c0ec7a279a1c33e400b92c 192.168.11.84:7000</span><br><span class="line">   slots:0-5460 (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 8c911465ef9118912ab848f6a9e5790027b0d4fa 192.168.11.11:7001</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 2fcb0a92c0b055e9e0c0ec7a279a1c33e400b92c</span><br><span class="line">M: 94d79d6303e6de4745ec4f1dd61d51d61f73919e 192.168.11.84:7001</span><br><span class="line">   slots:10923-16383 (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 1073c42cefa1e192ff219e554c843cbdc1eabd80 192.168.11.11:7000</span><br><span class="line">   slots:5461-10922 (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 1c6db7f5c2998db943cb26bf9716d13a367034b9 192.168.11.84:7002</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 1073c42cefa1e192ff219e554c843cbdc1eabd80</span><br><span class="line">S: 39f885d55462cd7fc4e975317da9db19abcc1835 192.168.11.11:7002</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 94d79d6303e6de4745ec4f1dd61d51d61f73919e</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check for open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure><p>192.168.11.84:7000:2048<br>192.168.11.11:7001:2048<br>192.168.11.11:7000:2048<br>192.168.11.84:7002:2048<br>192.168.11.84:7001:2048<br>192.168.11.11:7002:2048</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">./redis-trib.rb create --replicas 1  10.11.4.1:6526 10.11.4.2:6526 10.11.4.3:6526 10.11.4.4:6526 10.11.4.5:6526 10.11.4.6:6526</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ./redis-trib.rb create --replicas 1  10.11.4.1:6527 10.11.4.2:6527 10.11.4.3:6527 10.11.4.4:6527 10.11.4.5:6527 10.11.4.6:6527</span><br><span class="line"> </span><br><span class="line">  ./redis-trib.rb create --replicas 1  10.11.4.1:6528 10.11.4.2:6528 10.11.4.3:6528 10.11.4.4:6528 10.11.4.5:6528 10.11.4.6:6528</span><br><span class="line">  </span><br><span class="line">   ./redis-trib.rb create --replicas 1  10.11.4.1:6529 10.11.4.2:6529 10.11.4.3:6529 10.11.4.4:6529 10.11.4.5:6529 10.11.4.6:6529</span><br></pre></td></tr></table></figure><p>10.11.4.1:6526:8192</p><p>10.11.4.4:6526:8192</p><p>10.11.4.2:6526:8192</p><p>10.11.4.5:6526:8192</p><p>10.11.4.3:6526:8192</p><p>10.11.4.6:6526:8192</p><p>10.11.4.1:6529:8192<br>10.11.4.4:6529:8192<br>10.11.4.2:6529:8192<br>10.11.4.5:6529:8192<br>10.11.4.3:6529:8192<br>10.11.4.6:6529:8192</p><h1 id="集群运维"><a href="#集群运维" class="headerlink" title="集群运维"></a>集群运维</h1><h2 id="集群伸缩"><a href="#集群伸缩" class="headerlink" title="集群伸缩"></a>集群伸缩</h2><p>Redis集群可以实现对节点的灵活上下线控制，其中的原理可以抽象为槽和对应数据在不同节点之间的灵活移动。</p><p>也就是：<font color="red"><strong>集群伸缩=slot槽和数据在节点之间的移动</strong></font></p><h2 id="集群扩容"><a href="#集群扩容" class="headerlink" title="集群扩容"></a>集群扩容</h2><p>整个集群的扩容操作可以分为以下步骤：</p><ol><li>启动新节点</li><li>加入现有集群</li><li>迁移slot和数据</li></ol><h3 id="新集群节点创建"><a href="#新集群节点创建" class="headerlink" title="新集群节点创建"></a>新集群节点创建</h3><p>和之前的配置一样，在配置文件中设置cluster-enabled为yes，然后启动即可。</p><h3 id="加入现有集群"><a href="#加入现有集群" class="headerlink" title="加入现有集群"></a>加入现有集群</h3><p>其实也就是一个meet操作</p><p>在随便一个集群节点当中执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; cluster meet ip port</span><br></pre></td></tr></table></figure><p>即可将该节点加入现有集群当中，注意，这里应该是加入了2个节点（另一个后续会作为从节点）</p><p>1. 152</p><p>multi-message-gw-service</p><p>rider-station-base-service</p><p>221</p><p>red-packet-unit-service</p><p>105</p><p>rider-elastic-probe</p><p>153</p><p>rich-unit-service</p><p>220 </p><p>order-rule-unit-service</p><p>candidate-select-service</p><p>dispatch-alg-config</p><p>dispatch-bywaydegree-provider</p><p>dispatch-config-dispatch-mode</p><p>dispatch-consistent-service</p><p>dispatch-fairy-provider</p><p>dispatch-pathplan-rider</p><p>dispatch-pathplan-service</p><p>dispatch-revise-params</p><p>dispatch-timer-task</p><p>grab-order-service</p><p>lbs-provider</p><p>lbs-rider-position-service</p><p>lbs-rider-space-service</p><p>order-diagnose-service</p><p>package-order-service</p><p>parameter-service</p><p>recommend-config-provider</p><p>rider-gateway-current-limit</p><p>rider-invert-select</p><p>system-dispatch</p><p>/usr/bin/nohup /usr/local/jdk/bin/java -Dproject.name=${name} -Dlogging.file.path=”/home/${start_user}/deploy/logs/${name}” -Dmonitor.file.path=”/home/${start_user}/deploy/logs/monitor” -Daction.file.path=”/home/${start_user}/deploy/logs/action/“ -Dbigdata.file.path=”/home/${start_user}/deploy/logs/bigdata/“ -Ddisconf.env=${disconf_env} -Ddisconf.enable.remote.conf=true -Ddisconf.conf_server_host=${disconf_url} &lt;#if zone??  &amp;&amp; zone != “”&gt; -Dspring.cloud.config.label=${region}.${zone} -Dspring.cloud.config.index=${region}.${zone} -Dzone=${zone} &lt;/#if&gt; &lt;#if region??  &amp;&amp; region != “”&gt; -Dregion=${region} &lt;/#if&gt; &lt;#if service_chain??&gt; -javaagent:/home/${start_user}/deploy/tools/service-chain-1.0-RELEASE.jar -Xbootclasspath/a:/home/${start_user}/deploy/tools/transmittable-thread-local-2.5.1.jar -javaagent:/home/${start_user}/deploy/tools/transmittable-thread-local-2.5.1.jar -Dservice-chain=${service_chain} &lt;/#if&gt; -Dlogging.console.level=off -server &lt;#if config_prefix == “production”&gt; -Xmx4g -Xms4g &lt;#else&gt; -Xms${xms}m -Xmx${xmx}m &lt;/#if&gt;  -XX:NewRatio=1 -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=512m -XX:+UseConcMarkSweepGC -XX:+CMSParallelRemarkEnabled -XX:+CMSScavengeBeforeRemark -XX:+ParallelRefProcEnabled -XX:+CMSParallelInitialMarkEnabled -XX:CMSInitiatingOccupancyFraction=75 -XX:+UseCMSInitiatingOccupancyOnly -XX:+ExplicitGCInvokesConcurrent -XX:+AlwaysPreTouch -server -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=”/home/${start_user}/deploy/logs/${name}/“ -XX:-UseBiasedLocking -XX:AutoBoxCacheMax=20000 -XX:+UseCondCardMark -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintHeapAtGC -XX:+PrintJNIGCStalls -XX:+PrintTenuringDistribution -XX:+PrintGCApplicationStoppedTime -XX:+PrintPromotionFailure -XX:+PrintCommandLineFlags -XX:-OmitStackTraceInFastThrow -Xloggc:/dev/shm/${name}-gc.log -XX:ErrorFile=/home/${start_user}/deploy/logs/${name}/hs<em>err</em>%p.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=2 -XX:GCLogFileSize=20M -Djava.security.egd=file:/dev/./urandom -Dlog4j.shutdownHookEnabled=false -jar ${name}.jar –spring.profiles.active=${config_prefix} &gt; &lt;#if config_prefix == “production” || config_prefix == “dwd-pre”&gt; /dev/null &lt;#else&gt; /home/${start_user}/deploy/logs/${name}/${name}-start.log &lt;/#if&gt; 2&gt;&amp;1 &amp;</p><p>-server -Xmx4g -Xms4g -XX:NewRatio=1 -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=512m -XX:+UseConcMarkSweepGC -XX:+CMSParallelRemarkEnabled -XX:+CMSScavengeBeforeRemark -XX:+ParallelRefProcEnabled -XX:+CMSParallelInitialMarkEnabled -XX:CMSInitiatingOccupancyFraction=75 -XX:+UseCMSInitiatingOccupancyOnly -XX:+ExplicitGCInvokesConcurrent -XX:+AlwaysPreTouch -server -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=”/home/appdeploy/deploy/logs/scan-order-service/“ -XX:-UseBiasedLocking -XX:AutoBoxCacheMax=20000 -XX:+UseCondCardMark -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintHeapAtGC -XX:+PrintJNIGCStalls -XX:+PrintTenuringDistribution -XX:+PrintGCApplicationStoppedTime -XX:+PrintPromotionFailure -XX:+PrintCommandLineFlags -XX:-OmitStackTraceInFastThrow -Xloggc:/dev/shm/scan-order-service-gc.log -XX:ErrorFile=/home/appdeploy/deploy/logs/scan-order-service/hs<em>err</em>%p.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=2 -XX:GCLogFileSize=20M -Djava.security.egd=file:/dev/./urandom -Dlog4j.shutdownHookEnabled=false -jar scan-order-service.jar –spring.profiles.active=production &gt; /dev/null 2&gt;&amp;1 &amp;</p><p>上海的多活环境，jvm内存1.5G。<br>没问题的话，下面这个模板就作为你们所有应用部署上海机房的默认启动脚本了，有问题跟我说下。</p><p>#!/bin/bash<br>mkdir -p /home/${start_user}/deploy/logs/${name}<br>cd /home/${start_user}/deploy/apps/${name}<br>/usr/bin/nohup /usr/local/jdk/bin/java -Dproject.name=${name} -verbose:gc -Xloggc:/home/${start_user}/deploy/logs/${name}/gc.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/home/${start_user}/deploy/logs/${name}/java.hprof -XX:ErrorFile=/home/${start_user}/deploy/logs/${name}/java_error.log -Dlogging.file.path=”/home/${start_user}/deploy/logs/${name}” &lt;#if zone??  &amp;&amp; zone != “”&gt; -Dspring.cloud.config.label=${region}.${zone} -Dspring.application.index=${region}.${zone} -Dlogging.console.level=off -Dzone=${zone} &lt;/#if&gt; &lt;#if region??  &amp;&amp; region != “”&gt; -Dregion=${region} &lt;/#if&gt; &lt;#if service_chain??&gt; -javaagent:/home/${start_user}/deploy/tools/service-chain-1.0-RELEASE.jar -Xbootclasspath/a:/home/${start_user}/deploy/tools/transmittable-thread-local-2.5.1.jar -javaagent:/home/${start_user}/deploy/tools/transmittable-thread-local-2.5.1.jar -Dservice-chain=${service_chain} &lt;/#if&gt; -Dmonitor.file.path=/home/${start_user}/deploy/logs/monitor -Daction.file.path=/home/${start_user}/deploy/logs/action/ -Dbigdata.file.path=/home/${start_user}/deploy/logs/bigdata/ -Ddisconf.env=${disconf_env} -Ddisconf.enable.remote.conf=true -Ddisconf.conf_server_host=${disconf_url} -server -Xms${xms}m -Xmx${xmx}m -XX:MaxNewSize=${max_new_size}m  -XX:ThreadStackSize=${thread_stack_size} -jar ${name}.jar –spring.profiles.active=${config_prefix} &gt;/home/${start_user}/deploy/logs/${name}/${name}-start.log 2&gt;&amp;1 &amp;</p><p>#!/bin/bash<br>mkdir -p /home/${start_user}/deploy/logs/${name}<br>cd /home/${start_user}/deploy/apps/${name}<br>/usr/bin/nohup /usr/local/jdk/bin/java -Dproject.name=${name} -Dlogging.file.path=”/home/${start_user}/deploy/logs/${name}” &lt;#if zone??  &amp;&amp; zone != “”&gt; -Dspring.cloud.config.label=${region}.${zone} -Dspring.application.index=${region}.${zone} -Dspring.application.name=fortune-unit-service-primary -Dlogging.console.level=off -Dzone=${zone} &lt;/#if&gt; &lt;#if region??  &amp;&amp; region != “”&gt; -Dregion=${region} &lt;/#if&gt; &lt;#if service_chain??&gt; -javaagent:/home/${start_user}/deploy/tools/service-chain-1.0-RELEASE.jar -Xbootclasspath/a:/home/${start_user}/deploy/tools/transmittable-thread-local-2.5.1.jar -javaagent:/home/${start_user}/deploy/tools/transmittable-thread-local-2.5.1.jar -Dservice-chain=${service_chain} &lt;/#if&gt; -server -Xms3000m -Xmx3000m -XX:MaxNewSize=${max_new_size}m  -XX:ThreadStackSize=${thread_stack_size} -jar ${name}.jar –spring.profiles.active=${config_prefix} &gt; &lt;#if config_prefix == “production” || config_prefix == “dwd-pre” || config_prefix == “production-sh”&gt; /dev/null &lt;#else&gt; /home/${start_user}/deploy/logs/${name}/${name}-start.log &lt;/#if&gt; 2&gt;&amp;1 &amp;</p><p>grant all on zentaopro.* to ‘dev’@’192.168.%’ identified by ‘zentao123’;</p>]]></content>
    
    <summary type="html">
    
      Redis集群相关知识
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="数据库" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="Redis" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/"/>
    
      <category term="Redis集群" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/Redis%E9%9B%86%E7%BE%A4/"/>
    
    
      <category term="redis集群" scheme="http://yoursite.com/tags/redis%E9%9B%86%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>语言学基础</title>
    <link href="http://yoursite.com/2019/01/26/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E5%8F%8A%E8%B7%AF%E7%BA%BF/%E8%AF%AD%E8%A8%80%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2019/01/26/个人知识体系/英语学习/英语学习方法及路线/语言学基础/</id>
    <published>2019-01-26T10:18:49.000Z</published>
    <updated>2019-01-26T10:18:49.000Z</updated>
    
    <summary type="html">
    
      语言学基础
    
    </summary>
    
      <category term="个人知识体系" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    
      <category term="英语学习" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="英语学习方法及路线" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E5%8F%8A%E8%B7%AF%E7%BA%BF/"/>
    
    
      <category term="语言学基础" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>吸引学知识</title>
    <link href="http://yoursite.com/2019/01/25/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/%E8%AE%A4%E7%9F%A5%E5%8D%87%E7%BA%A7/%E5%90%B8%E5%BC%95%E5%AD%A6/%E5%90%B8%E5%BC%95%E5%AD%A6%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2019/01/25/个人知识体系/认知升级/吸引学/吸引学知识/</id>
    <published>2019-01-25T15:56:01.000Z</published>
    <updated>2019-01-25T15:56:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于追求女生的一些错误观念"><a href="#关于追求女生的一些错误观念" class="headerlink" title="关于追求女生的一些错误观念"></a>关于追求女生的一些错误观念</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>我们在日常生活中，经常会听到、看到、或者自己正在实践以下观念：</p><ul><li>展现自己的成就、经历、工作职位等。有物质基础、有钱的男人吸引女人。只要有钱就可以吸引到女人</li><li>长的帅和高外表出众的人才会吸引到女人。除了钱，外表就是最重要的。</li><li>向女生表达自己的爱意，用逻辑道理说服女生喜欢上自己</li><li>坚持对女生好，关心她，不断为她做事情，总有一天能感动她。</li><li>宿命论。世界上总会有一个女生喜欢我，只是现在还没有碰到。所以我要继续等待。</li></ul><p>除此之外，大部分人还有一个观念：爱情是稀有的，真爱只有一次。</p><p>根据上面的这些观念去指导我们的实践，往往会有以下的这些行为：</p><ul><li>如果你喜欢一个女生，那么你应该注意你的言行举止，要经过考虑，这样才能不说错话做错事，不会产生不好的印象。</li><li>女生不会平白无故的喜欢我，一定是我哪一点特别好，女生喜欢男生是有条件的。</li><li>每个人喜欢的类型是不一样的，如果你不符合她的类型，再努力也没用。</li></ul><h2 id="这些观念从哪里来的，为什么它们会误导你"><a href="#这些观念从哪里来的，为什么它们会误导你" class="headerlink" title="这些观念从哪里来的，为什么它们会误导你"></a><strong>这些观念从哪里来的，为什么它们会误导你</strong></h2><p>从幼时开始，我们通过家庭教育、电视媒体、学校、周围环境获得我们对社会的认知。从这些认知中，我们去构建我们看待事物的观念，这些也就是常说的：世界观、人生观、价值观。</p><p>我们都是都是生活在同一个社会背景之下，因此大部分人的观念都是类似的。也就是说：我们会有很多相同的看法和观点，尽管这些是不正确的。</p><p>又因为，这些观念被深深的植入我们脑海，并且我们所接触到的周围的人都是这么去做的，也就进一步加强了这些观念，所以我们相信很多这些其实是错误的观点都是事实。</p><p>这个叫做：思维社会化定式。我们的大脑是非常懒的，能不用脑就不用脑，我们的思维被驯化之后就不会判断这个观念到底对不对。</p><p>我们所看的影视作品大部分都是编剧根据观众希望的结果去故意安排的，非常脱离实际情况。</p><h2 id="不要去追求女人"><a href="#不要去追求女人" class="headerlink" title="不要去追求女人"></a>不要去追求女人</h2><p>大部分情况下，当调用上面所说的这些观念去指导我们的行为时，我们其实是在追求女人：绝大多数男人选择了喜欢那个女生，然后把可不可以和她在一起的权利全盘交给了女生，把决定权交给了女生，把决定权交给了女生，把决定权交给了女生，重要的事说三遍。</p><p>这种情况下时，男生往往会不自主的开始担心，担心女生是否会拒绝自己。</p><p>事实上，我们应该去吸引女人，而不是追求女人，吸引，吸引，吸引。</p><p>那么，如何吸引女人呢？赚钱，长的高和帅？当然不是，核心是先让女生对你产生好感，让女生先动，在不动声色中，让女生喜欢你。</p><h1 id="吸引女生的秘密"><a href="#吸引女生的秘密" class="headerlink" title="吸引女生的秘密"></a>吸引女生的秘密</h1><h2 id="可得性"><a href="#可得性" class="headerlink" title="可得性"></a>可得性</h2><p>男女之间，要产生喜欢等的情感，有一个前提就是“可得性”。</p><p>交流互动等这些友好的行为可以增加在对方眼中的可得性，让对方感觉你不是触不可及的，是在可得范围之内的。</p><p>对于大部分人来说，当第一次有了女生好像喜欢我的这种感觉之后，就会不断的在脑海中想和分析有关的事情，从而让自己陷入一种困境当中。</p><h2 id="建立吸引要适可而止"><a href="#建立吸引要适可而止" class="headerlink" title="建立吸引要适可而止"></a>建立吸引要适可而止</h2><p>大部分情况下，前期都是通过聊天开始的，当你经过一阵子的聊天之后，能把女生约出来之后，其实就证明她对你有好感，你们之间的吸引其实是已经建立了，那么，聊天的目的已经达到，接下来就不能还停留在聊天上了，再继续聊反而会出问题。</p><p>建立吸引之后要推进关系到下一个阶段，也就是升级亲密度。</p><h2 id="吸引女人是可以学习的"><a href="#吸引女人是可以学习的" class="headerlink" title="吸引女人是可以学习的"></a>吸引女人是可以学习的</h2><p>我们一直使用错误的观念去追求女生，所以结果就是：老方法一直出的是老结果，用新方法去解决这个问题就能出新结果。</p><h3 id="学习的误区"><a href="#学习的误区" class="headerlink" title="学习的误区"></a>学习的误区</h3><p>在学习技巧过程中，有一个最大的误区就是：在我实践上还没有完全掌握换一个技巧之前，就对自己说，这些东西我都明白了。这其实也是学习所有学科的一个通病。</p><p>一般人要想把一个东西学好，至少需要花1000-2000个小时的时间。直到你可以非常自然的运用这些技巧之后，才可以停止学些这些知识。</p><p>每个领域都有大师，但是其实我们和这些大师其实都是一样的人，只不过他有机会接触到这个领域，并且他比其他接触到这个领域的人更加投入和努力，所以，只要你愿意，你也能成为他，甚至超过他。</p><h2 id="钱、帅、高、名、权这些是怎么吸引到女生的？"><a href="#钱、帅、高、名、权这些是怎么吸引到女生的？" class="headerlink" title="钱、帅、高、名、权这些是怎么吸引到女生的？"></a>钱、帅、高、名、权这些是怎么吸引到女生的？</h2><p>这些东西都是外在的表象，是具象的东西的，实际的本质是背后的抽象的理论。</p><p>真正的核心本质是：安全感。</p><p>在上古时代，人类的平均寿命大概只有15岁，汉朝的平均寿命是25岁左右，唐朝是29岁。</p><p>作为大自然种类的一种，人类的生物本能是：生存，如何活下去。</p><p>父系社会的产生就是因为男人的体力可以捕捉更多的猎物，更多的食物资源，维持生存，而女性天生比男性柔弱的体格，注定了她需要男性伴侣为她提供维持生存的资源，特别是在女人生孩子的时候，如果男人不能提供足够的食物，不能很好的照顾，女性会直接面对的就是死亡。</p><p>因此，在人类进化过程中，那些不懂得挑选男人的女性，在生孩子之前就死亡，或者即使孩子生下来，双方也没有足够的食物来养活。</p><p>如果女人到临盆的时候才发现她的男人不能让他依靠，不能给她安全感，不能提供给她赖以生存的食物，那么等待她的就是死亡，到那个时候就为时太晚了。</p><p>所以女性在进化过程中，就进化出了一套选择男人的机制，这种机制是本能的，能活下来的女性，身体里都有这个基因。所以，你看到的所有女性，她们都有这一套机制在运作，有趣的是，她们自己都不知道。</p><p>所以标题的这些实际表现的是更好的基因，而更好的基因代表更好的生存能力。这些东西的本质都是一样的，只不过在当今社会的标准不再是捕猎。</p><p>也就是说，女性是被这些东西所表达的感觉所吸引。真正吸引女性的是这些东西带给女人的某种感觉，感觉，感觉，感觉！</p><p>是这些感觉在吸引女人，而不是这些具体的东西。</p><p>男女吸引是一种情绪，众多情绪中的一种！！！</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="目的以及要解决的问题"><a href="#目的以及要解决的问题" class="headerlink" title="目的以及要解决的问题"></a>目的以及要解决的问题</h2><h2 id="核心观点和内容"><a href="#核心观点和内容" class="headerlink" title="核心观点和内容"></a>核心观点和内容</h2><h2 id="目的和核心内容的连接"><a href="#目的和核心内容的连接" class="headerlink" title="目的和核心内容的连接"></a>目的和核心内容的连接</h2><h2 id="讲述的逻辑"><a href="#讲述的逻辑" class="headerlink" title="讲述的逻辑"></a>讲述的逻辑</h2><h2 id="启发点和疑问点"><a href="#启发点和疑问点" class="headerlink" title="启发点和疑问点"></a>启发点和疑问点</h2><h2 id="这些启发和疑问的背后逻辑"><a href="#这些启发和疑问的背后逻辑" class="headerlink" title="这些启发和疑问的背后逻辑"></a>这些启发和疑问的背后逻辑</h2><h2 id="马上可以实践的应用场景"><a href="#马上可以实践的应用场景" class="headerlink" title="马上可以实践的应用场景"></a>马上可以实践的应用场景</h2>]]></content>
    
    <summary type="html">
    
      吸引学知识
    
    </summary>
    
      <category term="个人认知体系" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E8%AE%A4%E7%9F%A5%E4%BD%93%E7%B3%BB/"/>
    
      <category term="认知升级" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E8%AE%A4%E7%9F%A5%E4%BD%93%E7%B3%BB/%E8%AE%A4%E7%9F%A5%E5%8D%87%E7%BA%A7/"/>
    
      <category term="吸引学" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E8%AE%A4%E7%9F%A5%E4%BD%93%E7%B3%BB/%E8%AE%A4%E7%9F%A5%E5%8D%87%E7%BA%A7/%E5%90%B8%E5%BC%95%E5%AD%A6/"/>
    
    
      <category term="吸引学" scheme="http://yoursite.com/tags/%E5%90%B8%E5%BC%95%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>rsync用法</title>
    <link href="http://yoursite.com/2019/01/24/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E5%8F%8A%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1/%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1/rsync/rsync/"/>
    <id>http://yoursite.com/2019/01/24/IT科学技术知识体系结构-Linux运维方向/网络知识及网络服务/网络服务/rsync/rsync/</id>
    <published>2019-01-24T15:13:25.000Z</published>
    <updated>2019-01-24T15:13:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>rsync作为一个数据<strong>同步</strong>的工具，可通过LAN/WAN快速同步多台主机间的文件。</p><p>主要解决的核心问题是：<strong>使两端的数据保持同步</strong></p><p>可以分为2个部分：</p><ul><li>全量传输（也可以理解为全量备份）</li><li>差异化传输（只传输有变化的部分内容）</li></ul><h2 id="语法及6种命令格式"><a href="#语法及6种命令格式" class="headerlink" title="语法及6种命令格式"></a>语法及6种命令格式</h2><p>抽象后的语法表达式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync [option] src dest</span><br></pre></td></tr></table></figure><p>在实际使用中，源和目的地的组合有一下几种方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Usage: rsync [OPTION]... SRC [SRC]... DEST</span><br><span class="line">  or   rsync [OPTION]... SRC [SRC]... [USER@]HOST:DEST</span><br><span class="line">  or   rsync [OPTION]... SRC [SRC]... [USER@]HOST::DEST</span><br><span class="line">  or   rsync [OPTION]... SRC [SRC]... rsync://[USER@]HOST[:PORT]/DEST</span><br><span class="line">  or   rsync [OPTION]... [USER@]HOST:SRC [DEST]</span><br><span class="line">  or   rsync [OPTION]... [USER@]HOST::SRC [DEST]</span><br><span class="line">  or   rsync [OPTION]... rsync://[USER@]HOST[:PORT]/SRC [DEST]</span><br><span class="line">The &apos;:&apos; usages connect via remote shell, while &apos;::&apos; &amp; &apos;rsync://&apos; usages connect</span><br><span class="line">to an rsync daemon, and require SRC or DEST to start with a module name.</span><br></pre></td></tr></table></figure><p>:表示连接的是远端的shell。而::或者rsync://表示连接的是远端的rsync守护进程。</p><p>以上这几种命令格式对应的是不同的工作模式和场景，我们把它提取精简出来就是：</p><ul><li>本地文件之间的传输。src dest</li><li>将本地同步到远端。src user@host:dest</li><li>将本地文件同步到远端的默认配置rsync服务端。src user@host::dest</li><li>将本地文件同步到远端的指定配置的rsync服务端。src rsync://user@host:port/dest</li><li>将远端机器上的数据同步传输到本地。user@host:src local_dest</li><li>将远端rsync服务器(默认配置)上的数据同步传输到本地。user@host::src local_dest</li><li>将远端rsync服务器(指定配置)上的数据同步传输到本地。rsync://user@host:por/src local_dest</li></ul><p>一共7种方式。</p><h2 id="6种命令格式对"><a href="#6种命令格式对" class="headerlink" title="6种命令格式对"></a>6种命令格式对</h2><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="目的或者说要解决的问题"><a href="#目的或者说要解决的问题" class="headerlink" title="目的或者说要解决的问题"></a>目的或者说要解决的问题</h2><p>rsync作为一个数据<strong>同步</strong>的工具，可通过LAN/WAN快速同步多台主机间的文件。</p><p>主要解决的核心问题是：<strong>使两端的数据保持同步</strong></p><p>可以分为2个部分：</p><ul><li>全量传输（也可以理解为全量备份）</li><li>差异化传输（只传输有变化的部分内容）</li></ul><h2 id="核心观点和内容"><a href="#核心观点和内容" class="headerlink" title="核心观点和内容"></a>核心观点和内容</h2><h2 id="目的和核心内容是怎么连接的"><a href="#目的和核心内容是怎么连接的" class="headerlink" title="目的和核心内容是怎么连接的"></a>目的和核心内容是怎么连接的</h2><h2 id="整体的实现逻辑"><a href="#整体的实现逻辑" class="headerlink" title="整体的实现逻辑"></a>整体的实现逻辑</h2><h2 id="启发点和疑问点"><a href="#启发点和疑问点" class="headerlink" title="启发点和疑问点"></a>启发点和疑问点</h2><h2 id="抽象化"><a href="#抽象化" class="headerlink" title="抽象化"></a>抽象化</h2><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>Redis数据备份这个我已经把核心的sentinel这些实现好了，cpu、内存、流量、sentinel日志这些可能会出现的报警情况都已经思考确认优化过了。</p><p>刚才11点的时候做了一次测试，没有问题，待会我把时间点换成凌晨。</p><p>cluster部分的数据备份和恢复稍微有点不一样，我先把上海机房Redis都创建之后再来做下这个。</p>]]></content>
    
    <summary type="html">
    
      rsync用法
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="网络知识及网络服务" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E5%8F%8A%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="网络服务" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E5%8F%8A%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1/%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="rsync" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E5%8F%8A%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1/%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1/rsync/"/>
    
    
      <category term="rsync" scheme="http://yoursite.com/tags/rsync/"/>
    
  </entry>
  
  <entry>
    <title>django-定时任务</title>
    <link href="http://yoursite.com/2019/01/13/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/Python/django/django-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>http://yoursite.com/2019/01/13/IT科学技术知识体系结构-Linux运维方向/编程开发/Python/django/django-定时任务/</id>
    <published>2019-01-13T06:19:01.000Z</published>
    <updated>2019-01-13T06:19:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>在编写django项目的时候，很多时候会有定时任务的需求。</p><h1 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h1><h2 id="步骤1：安装django-crontab库"><a href="#步骤1：安装django-crontab库" class="headerlink" title="步骤1：安装django-crontab库"></a>步骤1：安装django-crontab库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-crontab</span><br></pre></td></tr></table></figure><p>再在settings.py中添加app:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line">       ...</span><br><span class="line">       &apos;django_crontab&apos;,</span><br><span class="line">   )</span><br></pre></td></tr></table></figure><h2 id="步骤2：创建定时任务"><a href="#步骤2：创建定时任务" class="headerlink" title="步骤2：创建定时任务"></a>步骤2：创建定时任务</h2><p>在app内新建py文件，文件名称随意。</p><p>例如我们在名为bind_ops的app下新建了一个bind_crontab.py文件。</p><p>文件内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from lib.logger  import logger</span><br><span class="line">import datetime</span><br><span class="line">time = datetime.datetime.now()</span><br><span class="line">time = str(time)</span><br><span class="line">def crontab_test():</span><br><span class="line">    print (111)</span><br><span class="line">    logger.info(&quot;bind crontab&quot; +time )</span><br></pre></td></tr></table></figure><p>因为要看定时任务的效果，所以采用了直接输出和记录到文件的形式</p><p>经过测试发现：当定时任务在执行时，如果你只是输出一些语句，那么你将看不到任何内容，所以请不要怀疑这个定时任务没有执行。</p><p>然后在 settings.py中增加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 最简单配置</span><br><span class="line">CRONJOBS = [</span><br><span class="line">    # 表示每天2：01执行</span><br><span class="line">    (&apos;01 2 * * *&apos;, &apos;bind_ops.bind_crontab.crontab_test&apos;)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">#</span><br></pre></td></tr></table></figure><p><strong>参数及字段说明：</strong></p><p>第一个参数（表示时间），前5个字段分别表示：</p><ul><li>分钟：0-59</li><li>小时：1-23</li><li>日期：1-31</li><li>月份：1-12</li><li>星期：0-6（0表示周日）</li></ul><p>一些特殊符号：</p><ul><li>*： 表示任何时刻</li><li>,：　表示分割</li><li>-：表示一个段，如在第二段里： 1-5，就表示1到5点</li><li>/n : 表示每个n的单位执行一次，如第二段里，*/1, 就表示每隔1个小时执行一次命令。也可以写成1-23/1.</li></ul><p>第二个参数（表示路径）：</p><p>格式：app名称.文件名.函数名</p><p>如果想生成日志，那就<strong>再加一个字符串类型的参数</strong>：’&gt;&gt; path/name.log’， path路径，name文件名。’&gt;&gt;’表示追加写入，’&gt;’表示覆盖写入。</p><p><strong>提示：</strong></p><ul><li>如果你有多个定时任务，以逗号隔开，都放入CORNJOBS的列表中即可。</li><li>路径必须写绝对路径，写相对路径是不识别的。</li></ul><h2 id="步骤3：启动任务"><a href="#步骤3：启动任务" class="headerlink" title="步骤3：启动任务"></a>步骤3：启动任务</h2><p>以上都完成后，需要执行以下命令将任务添加并生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py crontab add</span><br></pre></td></tr></table></figure><p>显示当前的定时任务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py crontab show</span><br></pre></td></tr></table></figure><p>删除所有定时任务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py crontab remove</span><br></pre></td></tr></table></figure><p>重启django服务执行（可能不需要，因为并没有用，也正常使用了。）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py corntab -e</span><br></pre></td></tr></table></figure><h1 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h1><h2 id="dname项目-bind定时获取主机名"><a href="#dname项目-bind定时获取主机名" class="headerlink" title="dname项目-bind定时获取主机名"></a>dname项目-bind定时获取主机名</h2><h3 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h3><p>需求：bind服务需要提供解析主机名的功能</p><p>拆分：</p><ul><li>从数据源中获取主机名的对应信息并写入zone数据文件-这里的数据源是cmdb</li><li>定期检测删除的主机</li><li>定期更新有ip变化的主机记录</li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3>]]></content>
    
    <summary type="html">
    
      django-定时任务
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="编程开发" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
      <category term="Python" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/Python/"/>
    
      <category term="django" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/Python/django/"/>
    
    
      <category term="django-定时任务" scheme="http://yoursite.com/tags/django-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>python文件处理</title>
    <link href="http://yoursite.com/2019/01/07/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/Python/python%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/python%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2019/01/07/IT科学技术知识体系结构-Linux运维方向/编程开发/Python/python文件处理/python文件处理/</id>
    <published>2019-01-07T15:04:17.000Z</published>
    <updated>2019-01-07T15:04:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>Python open() 方法用于打开一个文件，并返回文件对象，在对文件进行处理过程都需要使用到这个函数，如果该文件无法被打开，会抛出 OSError。</p><p><strong>注意：</strong></p><p>使用 open() 方法一定要保证关闭文件对象，即调用 close() 方法。</p><p>open() 函数常用形式是接收两个参数：文件名(file)和模式(mode)。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="open"><a href="#open" class="headerlink" title="open()"></a>open()</h3><p>Python open() 方法用于打开一个文件，并返回文件对象，在对文件进行处理过程都需要使用到这个函数，如果该文件无法被打开，会抛出 OSError。</p><p><strong>注意：</strong></p><p>使用 open() 方法一定要保证关闭文件对象，即调用 close() 方法。</p><p>open() 函数常用形式是接收两个参数：文件名(file)和模式(mode)。</p><p>语法格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open(file, mode=&apos;r&apos;)</span><br></pre></td></tr></table></figure><p>完整的语法格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open(file, mode=&apos;r&apos;, buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)</span><br></pre></td></tr></table></figure><p>参数说明:</p><ul><li>file: 必需，文件路径（相对或者绝对路径）。</li><li>mode: 可选，文件打开模式</li><li>buffering: 设置缓冲</li><li>encoding: 一般使用utf8</li><li>errors: 报错级别</li><li>newline: 区分换行符</li><li>closefd: 传入的file参数类型</li><li>opener:</li></ul><p>mode模式一共有一下几种：</p><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>t</td><td>文本模式 (默认)。</td></tr><tr><td>x</td><td>写模式，新建一个文件，如果该文件已存在则会报错。</td></tr><tr><td>b</td><td>二进制模式。</td></tr><tr><td>+</td><td>打开一个文件进行更新(可读可写)。</td></tr><tr><td>U</td><td>通用换行模式（不推荐）。</td></tr><tr><td>r</td><td>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td>rb</td><td>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。</td></tr><tr><td>r+</td><td>打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td>rb+</td><td>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。</td></tr><tr><td>w</td><td>打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>wb</td><td>以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td>w+</td><td>打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>wb+</td><td>以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td>a</td><td>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>ab</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>a+</td><td>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td>ab+</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><p>默认为文本模式，如果要以二进制模式打开，加上 b 。</p><h3 id="file-对象"><a href="#file-对象" class="headerlink" title="file 对象"></a>file 对象</h3><p>file 对象使用 open 函数来创建，下表列出了 file 对象常用的函数：</p><table><thead><tr><th>序号</th><th>方法及描述</th></tr></thead><tbody><tr><td>1</td><td><a href="http://www.runoob.com/python/file-close.html" target="_blank" rel="noopener">file.close()</a>关闭文件。关闭后文件不能再进行读写操作。</td></tr><tr><td>2</td><td><a href="http://www.runoob.com/python/file-flush.html" target="_blank" rel="noopener">file.flush()</a>刷新文件内部缓冲，直接把内部缓冲区的数据立刻写入文件, 而不是被动的等待输出缓冲区写入。</td></tr><tr><td>3</td><td><a href="http://www.runoob.com/python/file-fileno.html" target="_blank" rel="noopener">file.fileno()</a>返回一个整型的文件描述符(file descriptor FD 整型), 可以用在如os模块的read方法等一些底层操作上。</td></tr><tr><td>4</td><td><a href="http://www.runoob.com/python/file-isatty.html" target="_blank" rel="noopener">file.isatty()</a>如果文件连接到一个终端设备返回 True，否则返回 False。</td></tr><tr><td>5</td><td><a href="http://www.runoob.com/python/file-next.html" target="_blank" rel="noopener">file.next()</a>返回文件下一行。</td></tr><tr><td>6</td><td><a href="http://www.runoob.com/python/python-file-read.html" target="_blank" rel="noopener">file.read([size])</a>从文件读取指定的字节数，如果未给定或为负则读取所有。</td></tr><tr><td>7</td><td><a href="http://www.runoob.com/python/file-readline.html" target="_blank" rel="noopener">file.readline([size])</a>读取整行，包括 “\n” 字符。</td></tr><tr><td>8</td><td><a href="http://www.runoob.com/python/file-readlines.html" target="_blank" rel="noopener">file.readlines([sizeint])</a>读取所有行并返回列表，若给定sizeint&gt;0，则是设置一次读多少字节，这是为了减轻读取压力。</td></tr><tr><td>9</td><td><a href="http://www.runoob.com/python/file-seek.html" target="_blank" rel="noopener">file.seek(offset[, whence])</a>设置文件当前位置</td></tr><tr><td>10</td><td><a href="http://www.runoob.com/python/file-tell.html" target="_blank" rel="noopener">file.tell()</a>返回文件当前位置。</td></tr><tr><td>11</td><td><a href="http://www.runoob.com/python/file-truncate.html" target="_blank" rel="noopener">file.truncate([size])</a>截取文件，截取的字节通过size指定，默认为当前文件位置。</td></tr><tr><td>12</td><td><a href="http://www.runoob.com/python/python-file-write.html" target="_blank" rel="noopener">file.write(str)</a>将字符串写入文件，返回的是写入的字符长度。</td></tr><tr><td>13</td><td><a href="http://www.runoob.com/python/file-writelines.html" target="_blank" rel="noopener">file.writelines(sequence)</a>向文件写入一个序列字符串列表，如果需要换行则要自己加入每行的换行符。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      python文件处理
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="编程开发" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
      <category term="Python" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/Python/"/>
    
      <category term="python文件处理" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/Python/python%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/"/>
    
    
      <category term="python文件处理" scheme="http://yoursite.com/tags/python%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>sed命令</title>
    <link href="http://yoursite.com/2019/01/07/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/Linux%E5%91%BD%E4%BB%A4/sed%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/01/07/IT科学技术知识体系结构-Linux运维方向/Linux命令/sed命令/</id>
    <published>2019-01-07T01:42:29.000Z</published>
    <updated>2019-01-07T01:42:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>sed全称stream editor，流编辑器，用程序的方式来编辑文本，它是文本处理中常用的工具，能够完美的配合正则表达式使用。</p><p>sed处理文件的具体过程如下：</p><ol><li><p>首先sed把当前正在处理的行保存在一个临时缓存区中（也称为模式空间），然后处理临时缓冲区中的行，完成后把该行发送到屏幕上。</p></li><li><p>sed每处理完一行就将其从临时缓冲区删除，然后将下一行读入，进行处理和显示。</p></li><li><p>处理完输入文件的最后一行后，sed便结束运行。</p></li><li><p>sed把每一行都存在临时缓冲区中，对这个副本进行编辑，所以不会修改原文件。</p></li></ol><h1 id="sed语法"><a href="#sed语法" class="headerlink" title="sed语法"></a>sed语法</h1><p>sed的操作过程包括：</p><ol><li>定位。定址用于决定对哪些行进行编辑。地址的形式可以是数字、正则表达式、或二者的结合。如果没有指定地址，sed将处理输入文件的所有行。</li><li></li></ol><p>地址是一个数字，则表示行号；是“$”符号，则表示最后一行。例如： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`sed -n &apos;3p&apos; datafile只打印第三行`</span><br></pre></td></tr></table></figure><p> 只显示指定行范围的文件内容，例如：</p><p># 只查看文件的第100行到第200行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n &apos;100,200p&apos; mysql_slow_query.log</span><br></pre></td></tr></table></figure><p>地址是逗号分隔的，那么需要处理的地址是这两行之间的范围（包括这两行在内）。范围可以用数字、正则表达式、或二者的组合表示。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`sed &apos;2,5d&apos; datafile#删除第二到第五行sed &apos;/My/,/You/d&apos; datafile#删除包含&quot;My&quot;的行到包含&quot;You&quot;的行之间的行sed &apos;/My/,10d&apos; datafile#删除包含&quot;My&quot;的行到第十行的内容`</span><br></pre></td></tr></table></figure><h1 id="sed实际案例"><a href="#sed实际案例" class="headerlink" title="sed实际案例"></a>sed实际案例</h1><p>sed -n  ‘/;[ ]{1,5}serial/s/[0-9]{1,10}/&amp;+1/;s/;[ ]{1,5}serial[ ][0-9]{1,10}/; serial date+1/;s/[0-9]{1,10}$/no+1/p’ dianwoba.com.zone</p><p>sed -n  ‘/;[ ]{1,5}serial/s/[0-9]{1,10}$/no+1/p’ dianwoba.com.zone</p><p>sed -n  ‘/;[ ]{1,5}serial/s#[0-9]{1,10}#&amp;+1#;/;[ ]{1,5}serial/s#;[ ]{1,5}serial[ ][0-9]{1,10}#; serial date+1#;/;[ ]{1,5}serial/s#[0-9]{1,10}$#no+1#p’ dianwoba.com.zone</p><p>sed -n  ‘/;[ ]{1,5}serial/s/[0-9]{1,10}/&amp;+1/;/;[ ]{1,5}serial/s/;[ ]{1,5}serial[ ][0-9]{1,10}/; serial date+1/;/;[ ]{1,5}serial/s/[0-9]{1,10}$/no+1/p’ dianwoba.com.zone</p><p>sed -n  ‘3s/[0-9]{1,10}/&amp;+1/;3s/;[ ]{1,5}serial[ ][0-9]{1,10}/; serial date+1/;3s/[0-9]{1,10}$/no+1/p’ dianwoba.com.zone</p><p>sed -n  ‘3s/[0-9]{1,10}/&amp;+1/;3s/;[ ]{1,5}serial[ ][0-9]{1,10}/; serial date/;3s/$/no+1/p’ dianwoba.com.zone</p><h1 id="高级知识"><a href="#高级知识" class="headerlink" title="高级知识"></a>高级知识</h1>]]></content>
    
    <summary type="html">
    
      sed命令
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="Linux命令" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/Linux%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="sed" scheme="http://yoursite.com/tags/sed/"/>
    
  </entry>
  
  <entry>
    <title>思维模型</title>
    <link href="http://yoursite.com/2019/01/04/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/%E8%AE%A4%E7%9F%A5%E5%8D%87%E7%BA%A7/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2019/01/04/个人知识体系/认知升级/学习方法/思维模型/</id>
    <published>2019-01-04T15:09:14.000Z</published>
    <updated>2019-01-04T15:09:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="什么是思维模型"><a href="#什么是思维模型" class="headerlink" title="什么是思维模型"></a>什么是思维模型</h2><p>查理芒格曾说：每个人都需要掌握至少100个思维模型，才能解决生活中的80%、90%的问题。</p><p>那么，思维模型究竟是什么？以及思维模型究竟怎么样在生活中帮助我们解决问题？</p><p>查理芒格本身说：思维模式是重要学科的重要原理，通常是那些不证自明的基础规律</p><p>我的个人理解：思维模型是高级思维方式的底层框架抽象，是一个系统框架</p><p>学习思维模型，关键不在于具体的技巧和答案，而在于思考的过程。</p><h2 id="思维模型的分层"><a href="#思维模型的分层" class="headerlink" title="思维模型的分层"></a>思维模型的分层</h2><p>思维模型其实是分层次的</p><p>从上到下适用范围越来越基础，也就是说适用范围越来越广</p><p><strong>最上层：</strong>解决具体问题的思维模型。比如FFC、SWOT法则、冰山模型等等</p><p><strong>中间层：</strong>某一学科的原理或者规律。比如精益创业、边际效应、价值投资理念等等，解决一个学科中问题的思维模型</p><p><strong>最下层：</strong>最底层的抽象的跨学科的原理和规律。比如哲学上的递弱代偿、物理学的机械论、物理学的熵增定律，生物学的进化论等等</p><p>思维模型越往上就越有用，工具属性就越强，解决某个具体场景的问题</p><p>思维模型越往下就越无用，距离具体问题越远，解释事情的属性更强</p><h2 id="思维模型的作用"><a href="#思维模型的作用" class="headerlink" title="思维模型的作用"></a>思维模型的作用</h2><p>思维模型主要有2个作用：</p><ul><li><p>帮助我们提高做决策的质量和正确率</p><p>生活是一个又一个决定的延续，每个选择做的好与不好对于我们的影响是巨大的。可是我们很少仔细地思考，我们究竟是怎么做决策的，做决策的过程是什么样的。具体看补充知识</p></li><li><p>提升创新力</p><p>我们的创新力往往来自于那些无用的思维模型。</p><p>熊彼特：创新是生产要素的重组，关键在于我们要懂看世界的方式，我们只有掌握了更多理解理解世界的方式，更多解释世界问题的方式，才能够打破我们过去经验世界里各要素的关系，用新的视角来将各个要素进行重新组合，进而产生创新…..</p></li></ul><h2 id="如何发现和学习思维模型？"><a href="#如何发现和学习思维模型？" class="headerlink" title="如何发现和学习思维模型？"></a>如何发现和学习思维模型？</h2><p>查理芒格在《穷查理宝典》中只写了十几个思维模型，那么还有那么多的思维模型我们去哪里学习呢？</p><p>其实在我们的日常生活中，我们可以发现很多很好的思维模型，只不过我们没有方法、没有意识去发现这些思维模型。</p><p>那么，我们如何在生活中发现思维模型呢？</p><h3 id="方法1：启发、问题、思路、模型"><a href="#方法1：启发、问题、思路、模型" class="headerlink" title="方法1：启发、问题、思路、模型"></a>方法1：启发、问题、思路、模型</h3><p>在生活当中，经常会遇到一些让你觉得有启发的事情。大部分人往往不会去深究背后到底在解决什么问题？</p><p>所以，不是碰到问题，再去发现思维模型，而是碰到让你有启发的事情的时候，就可以去思考思维模型。</p><p>分析：</p><ol><li>解决了什么问题</li><li>思路是什么，为什么有效，有哪些基本的要素，本质是什么</li><li>把思路抽象提炼出模型，思考这个思路所调用的更底层的思维模型</li></ol><p>要想实现这个，需要我们做相应的改变：</p><ol><li>心态的转变。需要有好奇心，主动的去问，为什么这个现象的背后有这么一个答案，为什么这个答案起作用</li><li>重点的转变。过去在学习时，时间都主要花在：记笔记、看书、记答案。可是真正重要的地方是将时间花在思考的过程。把时间花在硬问题，打通思维的过程。</li><li>方法的转变。顺着答案不断的和我们过去已有的经验结合。重要的不是答案，重要的是知识之间的联系。</li></ol><h2 id="如何运用思维模型"><a href="#如何运用思维模型" class="headerlink" title="如何运用思维模型?"></a>如何运用思维模型?</h2><p>我们学习了思维模型之后，在我们日常生活中应该怎么去应用呢？</p><p>运用思维模型，关键点在于：多层次、多视角</p><ul><li><p>多层次：把一个问题，使用不同层次的思维模型进行分析。这里的层次可以理解为学科，不同的学科解释问题的层次</p></li><li><p>多视角：在同一个层次当中，用不同的角度来分析问题</p></li></ul><p>欧内斯特-内格尔：各学科就是一系列解释的层次。</p><h2 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h2><h3 id="我们是如何做决策的？"><a href="#我们是如何做决策的？" class="headerlink" title="我们是如何做决策的？"></a>我们是如何做决策的？</h3><p>我们在外部刺激和做出反应之间，并不是简单的刺激行为模式，而是一个ABC模式。</p><ul><li>A: Activatiing event 诱发刺激</li><li>B: beliefs 信念反应，决策依据</li><li>C: consequences 行动结果</li></ul><p>对于同一个刺激A，由于背后的信念B不同，我们会做出不同的行为决策C。我把它理解是一种流式模式，信息源输入一个系统框架（决策依据）中，然后进行运算，得出一个输出结果。</p><p>每个人由于过往的经历、经验、家庭等等因素的不同，会有不同的信念B，而信念往往是很难改变的，因为这个形成的过程往往是自己不自知的，并且容易成为潜意识。</p><p>我们经常说的认知升级，其实本质就是面对同一个问题，你有不同的处理方式，也就是你的中间信念反应，决策依据发生了改变。</p><p>所以，我们成长进步的过程实际上是用更好的决策依据来替换自己之前因为有限知识或经验得出的那些不太可靠的决策依据。</p><p>这个新的，好的决策依据就是我们所说的思维模型。也就是说，我们把这个决策的模型进行了修改，修改之后的实现顺序是：刺激–&gt;思维模型–&gt;行动结果</p><p>总结：我们要把中间的这个黑箱（决策依据）变成我们可以调控的白箱</p><h3 id="多元思维模型"><a href="#多元思维模型" class="headerlink" title="多元思维模型"></a>多元思维模型</h3><p>对于一个系统而言，结构远远大于单个要素本身，系统的性质是取决于要素的结构，而不是要素本身。</p><p>就行C原子，它可以排列成钻石，也可以是石墨，这不是取决于碳元素本身的原因，而是它相互之间关系形成的系统。</p><p>同样的，就算你把查理芒格的思维模型全都学会了，但是你不知道在应用之间它们的关系，结构，权重，先后关系，哪些互相有冲突，你也成为不了查理芒格。最终的结果是你知识知道了很多的思维模型的一个someone。</p><h3 id="如何更高效的学习思维模型"><a href="#如何更高效的学习思维模型" class="headerlink" title="如何更高效的学习思维模型"></a>如何更高效的学习思维模型</h3><p>学习思维模型，重要的不是那些思维模型本身，而不是那些知识点。而是理解我们运用思维模型的思路，它解决问题的过程，所以我们在记笔记的时候可以换一种方法。</p><p>我们记笔记的目的是：描绘出这个思维模型的一个全局框架，而不是零散的看起来非常用来但是不能建立连接的知识点，当问题进入这个框架，出去的时候就是满意的解决。</p><h4 id="七星笔记法"><a href="#七星笔记法" class="headerlink" title="七星笔记法"></a>七星笔记法</h4><p>目的：事先人为的描述整体全局框架的关键点，在过程中，填充着7个关键点，填充完了之后，这个框架也就描绘出来了。也就是说，用你的学习的思维模型去学习其他思维模型</p><p>在学习做记笔记的时候，7个星星，也就是7个问题</p><p>上课或者学习的时候就是回答这7个问题，当这7个问题回答完了，那么笔记也记完了</p><ul><li><p>这门课的目的是什么？也就是：为什么要学习它，它解决什么问题？</p></li><li><p>这门课的核心观点和内容是什么？</p></li><li>目的和这些核心观点是怎么连接的？</li><li>老师或作者讲述的逻辑是什么？</li><li>我在听课学习的过程中，有哪些疑问（说的对吗）和启发（为什么能这么思考）的地方？</li><li>上面的这些疑问和启发背后的思维模型是什么？</li><li>有哪些事情可以让我直接就可以开始找应用场景并采取行动？</li></ul><p>一些说明：</p><ul><li>在学习之前，可以通过上网查资料等方式先了解下这门课，这个领域的核心框架是什么，之后在学习的时候去进行比较。</li><li>老师或者作者的逻辑和我自己理解的有什么差别，重要的不是知识点，重要的是为什么这么组织推演思考过程，为什么这么思考？</li></ul><h4 id="做自己理解的思维导图"><a href="#做自己理解的思维导图" class="headerlink" title="做自己理解的思维导图"></a>做自己理解的思维导图</h4><p>就像上面我说的，要使用自己的框架去记忆这些知识点，如果只是单纯的这些知识点，那么将会是孤立的，没有办法建立连接。</p><h4 id="收集启发点和疑问点"><a href="#收集启发点和疑问点" class="headerlink" title="收集启发点和疑问点"></a>收集启发点和疑问点</h4><p>你在碎片时间进行学习的时候，当碰到启发点和疑问点的时候，简单记录一下，当你有整块时间的时候再去深究它。</p><h4 id="通过预想使用的场景去记忆"><a href="#通过预想使用的场景去记忆" class="headerlink" title="通过预想使用的场景去记忆"></a>通过预想使用的场景去记忆</h4><p>这一点在学习英语等学科中尤为有效，你在记忆单词的时候，最好是在记忆句子的时候顺便记忆单词，如果只是单纯的记忆单词，效果根据不好。</p><p>并且在学习一些语法知识点的时候，最好也是通过一个句子来记忆。</p><p>同样的，在学习其他学科知识的时候，通过结果去记忆这些知识点。</p><h1 id="思维模型"><a href="#思维模型" class="headerlink" title="思维模型"></a>思维模型</h1><h2 id="FFC"><a href="#FFC" class="headerlink" title="FFC"></a>FFC</h2><p>在于他们进行沟通交流的时候，可以使用FFC模型</p><p>F：feeling。描述感觉</p><p>F：fact。描述事实</p><p>C: compare。进行比较</p><p>常规赞美：你好漂亮、今天很漂亮。</p><p>优化：你的打扮让我眼前一亮，你今天的绿色衣服和围巾和项链特别搭配，简直是一股生机盎然的气息，你是今天嘉宾里面最亮眼的。</p>]]></content>
    
    <summary type="html">
    
      思维模型
    
    </summary>
    
      <category term="个人知识体系" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    
      <category term="认知升级" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/%E8%AE%A4%E7%9F%A5%E5%8D%87%E7%BA%A7/"/>
    
      <category term="学习方法" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/%E8%AE%A4%E7%9F%A5%E5%8D%87%E7%BA%A7/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    
    
      <category term="思维模型" scheme="http://yoursite.com/tags/%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>知识之网理论</title>
    <link href="http://yoursite.com/2019/01/03/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/%E8%AE%A4%E7%9F%A5%E5%8D%87%E7%BA%A7/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/%E7%9F%A5%E8%AF%86%E4%B9%8B%E7%BD%91%E7%90%86%E8%AE%BA/"/>
    <id>http://yoursite.com/2019/01/03/个人知识体系/认知升级/学习方法/知识之网理论/</id>
    <published>2019-01-02T16:19:16.000Z</published>
    <updated>2019-01-02T16:19:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>我把一个人的知识看成是一张知识之网（可以类比为蜘蛛网），那么中心节点就是我这个人，由我这个中心发起的每一条边（实际上射线，在这里不严谨，这么用主要是便于直观理解），就是所有基础学科的知识</p><p>这里放上一张蜘蛛网的图</p><p>这个时候这张网只有边，过于分散，是无法捕捉到猎物的，因此需要使用一定的规则将所有边组合起来，对于蜘蛛网来说，我们直观的感受是一个个的<font color="blue"><strong>同心圆</strong></font>。</p><p>同样的，对于我来说，我怎么把这些分散的知识有机的结合起来，形成为一个整体？我的方法就是使用思维模型，通过跨界思维，将所学的知识结合成为一个整体。</p><p>也就是说，我只把知识分为2类：基础学科的知识和思维模型。</p><p>这里有几个问题我需要说明下：</p><ol><li>思维模型是什么？</li><li>跨界思维是什么意思？</li><li>为什么要构建这张知识之网，有了这张网之后又什么作用？</li></ol><h1 id="第一个问题：思维模型是什么？"><a href="#第一个问题：思维模型是什么？" class="headerlink" title="第一个问题：思维模型是什么？"></a><strong>第一个问题：</strong>思维模型是什么？</h1><p>思维模型可以理解为：<strong>思维方式的抽象</strong>。</p><p>生活是由一个个的选择构成的，那么是什么在背后指导我们做选择？我们决定是否买一个东西时需要考虑各种因素（价钱，必要性，时机等等），我们在思考这些因素的时候就是调用我们过往认知产生的思维模型，只不过我们不自知而已。我们在处理问题时，在做考试题目时，解题的思路和步骤更是思维方式的直接体现。</p><p>而思维模型是思维方式的抽象，很多时候我们拥有某一种思维的方式，但是自己却不清楚是怎么运作的，所以这个时候需要站在更高的维度，把它抽象出来，让它能为更多人学习使用。</p><h1 id="第二个问题：跨界思维是什么意思？"><a href="#第二个问题：跨界思维是什么意思？" class="headerlink" title="第二个问题：跨界思维是什么意思？"></a><strong>第二个问题：</strong>跨界思维是什么意思？</h1><p>关于学习知识，我们需要拉大尺度，在大时间线上，在宏观上看待这件事。</p><p>在人类历史中，一开始根本就没有学科，早期的知识主要是为了生存（如果要分类的话可以理解为生存学科），后来解决了生存危机，有了火，有了农耕畜牧之后，慢慢的知识的总量得到的极大增长，人类开始探索自然，这一个阶段的学科其实就一个-自然科学，然后随着文明的进一步发展，才慢慢有了今天我们所看到的样子</p><p>说了这么多，其实就是想说：<strong>人类目前的所有科目其实都是后天分类出来的</strong>。这一点可能很多人往往会忽略。</p><p>每一个学科之间其实是相互影响的，一个学科的重要基础理论可能也同样适用于另一个学科，能够提高你在学习这个学科时的效率</p><p>所以，将所有的学科看成为一个整体，不要局限于某一个具体的学科，才是真正的有效学习。</p><h1 id="第三个问题：知识之网的作用？"><a href="#第三个问题：知识之网的作用？" class="headerlink" title="第三个问题：知识之网的作用？"></a><strong>第三个问题：</strong>知识之网的作用？</h1><p>当我们把思维+具体的知识编织成为一张网，这个时候我们可以把自己看做是等到猎物的蜘蛛，当有问题（蜘蛛的猎物）来的时候，只要落在这张网上面，我们就能找到方法消灭（解决）</p><p>如果有问题解决不了，这个时候我们就知道，我们需要更新我们的知识系统，加固或者扩大我们的知识之网。</p>]]></content>
    
    <summary type="html">
    
      知识之网理论
    
    </summary>
    
      <category term="个人知识体系" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    
      <category term="认知升级" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/%E8%AE%A4%E7%9F%A5%E5%8D%87%E7%BA%A7/"/>
    
      <category term="学习方法" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/%E8%AE%A4%E7%9F%A5%E5%8D%87%E7%BA%A7/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    
    
      <category term="学习方法" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>如何输入和输出</title>
    <link href="http://yoursite.com/2019/01/02/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/%E8%AE%A4%E7%9F%A5%E5%8D%87%E7%BA%A7/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/%E5%A6%82%E4%BD%95%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA/"/>
    <id>http://yoursite.com/2019/01/02/个人知识体系/认知升级/学习方法/如何输入和输出/</id>
    <published>2019-01-02T15:02:40.000Z</published>
    <updated>2019-01-02T15:02:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h1><p>就我个人而言，整个学习过程分为以下3个步骤（注意是有顺序的）：</p><ol><li>输入。信息来源</li><li>内化。最核心部分，将所学的知识、思维模型及专业技能存储能够被<strong>直接调用</strong>的资源池中，内化成直觉</li><li>输出。将思维模型或者专业的技能变成直觉的直接输出</li></ol><p>虽然内化是最核心的部分，但是学习是一个完整的系统，输入和输出环境也影响着内化环节。</p><p>我针对我的情况画了一张学习整体结构图，仅供参考：</p><p>下面我们来介绍这三个方面</p><h1 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h1><p>输入也就是信息（知识）的摄入，在日常生活中，我的信息输入源主要有：</p><ul><li><p>书籍</p></li><li><p>视频</p></li><li><p>音频</p></li><li><p>网上获取的知识</p></li><li><p>生活中看到的事情得到的启发</p></li><li><p>自己深度思考得出的知识（也就是说知识的来源可以是本身）</p></li><li><p>交际活动获取的知识</p><blockquote><p>这一部分包含的范围就比较广了，可以是与他人交流时获取的，也可以是参加线下或线上会议、论坛等获取的知识</p></blockquote></li></ul><p>我把通过这些输入源学到的知识主要分为以下2类：</p><ul><li>思维模型。一个思维方式的系统框架。为下面所说的专业领域知识所服务，主要作用是不断优化改善分析和处理问题的逻辑，关于这部分的内容我有专门的文章《思维模型》。</li><li>专业领域的知识。比如计算机科学、英语、数学、历史、心理学、生命科学、经济学、哲学等等学科的知识</li></ul><p>按道理来说，学到的知识应该可以分为很多个类别，为什么我只分了2类？</p><p>这就涉及到个人的知识体系结构问题了，这一点在我的另一篇文章《知识之网理论》有概述。</p><p>因此最佳阅读顺序是：《思维模型》–&gt;《知识之网理论》–&gt;《如何输入和输出》。当然不按照这个顺序来也可以</p><h1 id="内化-关于内化的一些前提知识"><a href="#内化-关于内化的一些前提知识" class="headerlink" title="内化-关于内化的一些前提知识"></a>内化-关于内化的一些前提知识</h1><p>这一章节是全文的重点和核心</p><p>整个内化的过程比较复杂和抽象，因此会花很长的篇幅来进行解释和记录。</p><p>内化是将所学到知识融会贯通的过程，这个过程根据个人的差异（主要是所采取的方法技巧（包括时间管理、一些提升效率的工具的使用等）的差异、思维方式的差异等），整个内化的时间和效果会有非常大的差异性</p><p>下面我要介绍的这些有关学习的基础知识，都是我个人实践过的或者正在实践的，在了解了这些基础知识之后，我们再来说说如何才能达到最佳的内化效果。</p><p>下面我们说一说这些有关内化的基础知识</p><h2 id="大脑结构-神经元连接"><a href="#大脑结构-神经元连接" class="headerlink" title="大脑结构-神经元连接"></a>大脑结构-神经元连接</h2><p>桑代克在《教育心理学》中说：学习就是联结，人之所以善于学习，主要是因为能够形成大量的联结。学习会使人成为异常复杂而精致的联结系统</p><p>一学习之所以有助于另一学习，是因为两种学习具有相同因素的原因</p><p>真正的高手会把模型与模型之间也建立连接，其实这一部分我主要在《知识之网理论》中说明，各个知识或者思维模型可以联结成为一个网站结构，多个网状结构可以形成知识的互联网，这一点其实也和当前宇宙的结构类似。</p><h2 id="艾宾浩斯遗忘曲线"><a href="#艾宾浩斯遗忘曲线" class="headerlink" title="艾宾浩斯遗忘曲线"></a>艾宾浩斯遗忘曲线</h2><p>遗忘曲线的背后实质原因其实还是因为神经元之间没有建立连接</p><h2 id="烧开水理论"><a href="#烧开水理论" class="headerlink" title="烧开水理论"></a>烧开水理论</h2><h2 id="为什么自学比培训好？"><a href="#为什么自学比培训好？" class="headerlink" title="为什么自学比培训好？"></a>为什么自学比培训好？</h2><p>主要的一个原因是神经元无法建立连接以及遗忘曲线的原因。</p><p>这一个部分其实在《知识之网理论》中能够找到答案，在培训班中，大量的知识输入大脑，在现有知识没有建立神经元连接的时候，学习新的知识，不断的恶性循环，就像是在沙子上盖楼，一层水泥还没有干，就开始网上买铺第二层水泥。</p><h2 id="认知升级"><a href="#认知升级" class="headerlink" title="认知升级"></a>认知升级</h2><p>在问题来的时候，原本是走这个神经元通路，经过反复的训练，让大脑走另一个神经元网络通路，新的网络通路越来越强壮，旧的就会慢慢消失。</p><p>所谓的认知升级本质上其实是：建立新的神经网络链路，替换原有的旧的神经网络。修新路，绕旧路。</p><h2 id="内化的5个阶段"><a href="#内化的5个阶段" class="headerlink" title="内化的5个阶段"></a>内化的5个阶段</h2><p>我们在学习新知识的时候，一般来说都会经历这几个阶段</p><ul><li>事前想不到</li><li>事后诸葛亮</li><li>事中有启发。在中某些事的时候，还是用以前的思维的时候，突然会提醒自己，我应该用更好的方式。</li><li>事前会想起</li><li>自然而然。内化成为我们的直觉。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在这里我们对上面的这些知识进行一个总结</p><h1 id="内化-如何达到最佳内化效果"><a href="#内化-如何达到最佳内化效果" class="headerlink" title="内化-如何达到最佳内化效果"></a>内化-如何达到最佳内化效果</h1><p>在这个部分，记录各种学习的方法和基本准则，帮助我们进行有效的内化，提升效率。</p><p>就像我在开头说的，虽然内化是最核心的部分，但是学习是一个完整的系统，输入和输出环境也影响着内化环节。</p><p>所以在这个部分，众多方法我会先讲输入和输出是怎么提升内化的</p><h2 id="通用方法"><a href="#通用方法" class="headerlink" title="通用方法"></a>通用方法</h2><p>学习知识的顺序：</p><ol><li>网上了解，了解粗略的框架</li><li>看视频，视频偏实际的应用，先实践，了解具体是怎么运作的</li><li>看书籍，通过书籍去深入</li></ol><h2 id="输入提升内化"><a href="#输入提升内化" class="headerlink" title="输入提升内化"></a>输入提升内化</h2><p>在这里我们主要以“读书”这个输入方式进行讲解。</p><p>我们在读书的时候，书和书是不一样的，书的类型不同，难度不同，因为所使用的方法也会有所不同。</p><p>下面简单介绍3个方法帮助大家提高阅读时吸收知识的效率。</p><h3 id="熔断不读书法"><a href="#熔断不读书法" class="headerlink" title="熔断不读书法"></a>熔断不读书法</h3><p>在利用碎片时间进行读书的时候，就可以使用这个方法，比如只有十几二十分钟的时候。</p><p>股市中的熔断机制：当股市下跌到某一个指标的时候，就强制不允许买卖交易了，暂停，熔断。</p><p>同样的，当你读书的时候，遇到有疑问或者有启发的地方，立马合上书，然后思考，这里为什么让我有启发，启发点在哪里，我可以把它用在生活中的哪些场景中，这个背后有什么基本原理吗。这个时候其实也就是我在《思维模型》中所说的6星学习法中的后3点。</p><p>使用这种方法，哪怕你只有20分钟的时间，你也可以在书中找到对你有帮助的启发点，我们读书并不需要全部看完，寻找到启发点远比看到毫无收益要好的多。</p><p>总结：每一个单点的知识，都可以让我们真正地去理解思考，通过很短的时间来大幅度提升效率。对于大多数的畅销书而言，使用这个方法去阅读就足够了。</p><p>这种方法的弊端：当你专注于某一个点，你就很容易看不到整个系统。而我们知道，对于一个系统而言，结构远大于单点的要素。</p><p>如果你遇到想深入阅读，理解作者思路和逻辑，看清整个系统的时候，这个时候就不能再使用这个方法。</p><h3 id="关键词读书法"><a href="#关键词读书法" class="headerlink" title="关键词读书法"></a>关键词读书法</h3><p>一本书，无论它的组织思想是什么，它一定是用一些节点串联起来的，而这些节点往往是概念或者关键词的形式。</p><p>你把这些关键词提炼出来，然后寻找它们之间的关系，再结合这本书的主题和目的，梳理出它们之间的关系网络，就找到了作者的思路。</p><p>因为，我们核心要做的就是3件事：</p><ul><li>作者在这本书中想要解决什么问题？</li><li>关于这个问题，他提出了哪些核心观点（观点通常会以关键词的方式展示出来）</li><li>目的和关键词之间的关系是什么？（也就是：要解决的问题，是怎么和观点连接起来的，它们的联系）</li></ul><p>如何获取核心观点或者说关键词，需要我们把整本书读完再去总结吗？</p><p>我们其实可以用这个方法去提炼：封序目尾（封面，序言，目录，结尾）</p><p>换一个视角来看，其实阅读不仅仅是我们去读书，也就是说，不仅仅是我们一个人的事，还有作者和出版社，阅读，其实是3个元素构成的一个系统。就像人际沟通，其实也就是双方与信息三者构成的系统。</p><ul><li>封面：出版社会想尽办法把这本书的重点、主要价值提炼出来。主要是为了更好的销售。</li><li>序言：一般情况在封面之后会有说明，提炼出在这本书中，作者最核心的观点。</li><li>目录：关键词列表，作者在写目录的时候，通常会那些关键的概念提炼出来</li><li>结尾：</li></ul><p>任何一个作者，通常都会在开篇或者结尾的时候，把自己的书的特点、最关键的思想提炼出来。</p><p>所以，我们要找到一本书的关键词，通常情况下，根据不需要读完一本书，通过这4个步骤，通常就能获取。</p><h3 id="经典书籍-里应外合读书法"><a href="#经典书籍-里应外合读书法" class="headerlink" title="经典书籍-里应外合读书法"></a>经典书籍-里应外合读书法</h3><p>里：书里写的文字，阅读书籍的内容</p><p>外：书籍里没有写的内容部分</p><p>我们知道，我们写书籍的目的是，通过书籍这种语言文字符号去表达我们头脑的思想。</p><p>斯蒂芬-平克曾说：写作的难点在于要把网状的思考用树状的结构体现在线性展开的语句里。所以，写作实际上是作者思维层层压缩维度的一个过程。</p><p>因此，黑格尔会说：每当我用语言和符号去表达我的思想，我的思想就发生质变和肤浅化。</p><p>所以说，语言符号这种方式本身会带来一些限制问题，因此我们要精读那些最经典的书籍的时候，就需要注意到这种缺陷，因此，在阅读经典书籍的时候，使用里应外合的方法。</p><p>因此，在这种情况下，我们要知人论世，就是要研究作者的成长背景，他过去的经历对他有什么影响，哪些人的思想对他有很大的影响。他所处的时代，主流思想是什么。文化背景是什么，这些都是我们额外需要去做的功夫。</p><p>我们要把这本书放在时代、人物、文化等大的背景下理解，才能真正理解经典思想。</p><h2 id="输出提升内化-输出倒逼输入"><a href="#输出提升内化-输出倒逼输入" class="headerlink" title="输出提升内化-输出倒逼输入"></a>输出提升内化-输出倒逼输入</h2><h3 id="以教为学"><a href="#以教为学" class="headerlink" title="以教为学"></a>以教为学</h3><p>把教别人当做一个学习的过程，你不懂哪个思维模型，你不会用哪一个，你就去教别人哪一个。</p><p>主要有3个点再驱动你：</p><ul><li>压力。压力转化为动力。</li><li>发现自己的知识阻塞。在准备的过程中，你会发现一些原来自己以为懂但是实际上是不懂的地方。</li><li>通过别人的提问检验反馈。</li></ul><h2 id="具象抽象再具象"><a href="#具象抽象再具象" class="headerlink" title="具象抽象再具象"></a>具象抽象再具象</h2><p>我们所学习到的思维模型，一般情况下来说是已经具象化过的。</p><p>这个时候，我们需要把它进行抽象，抽象出一个系统框架，再填充上我们自己的内容，再重新具象化。</p><p>举例来说，我们在学习查理芒格的“复利”思维模型的时候，如果从表面上学习的话，很难被我们在日常生活中所运用，因为它是已经被查理芒格具象化的，我们所看到的并不是抽象层面的。</p><p>这个时候，我们把他说的这个思维模型进行抽象，可以看到“复利”的本质是：</p><p>做A会导致B，而B反过来又会强化A。所以我们在生活中看到的，凡是符合做A产生B，B又会强化A的都是“复利”这个思维模型的具象表现。</p><p>当我们知道了这个抽象的思维模型之后，我们可以看到，生活中的很多事情都可以用复利来进行解释。</p><p>例如，亚马逊的增长飞轮模式其实就是一个方法的复利的具象应用，是一个更大的综合系统下来思考。</p><p>所以，明白了复利的核心之后，我们就知道，我们需要使用长线思维去做一些事情，而不能短视。</p><h2 id="刻意练习"><a href="#刻意练习" class="headerlink" title="刻意练习"></a>刻意练习</h2><p>先把结论放出来：刻意练习=核心算法*大量练习。最终的结果是把思维模型和专业技能这些转换成为直觉。</p><p>把思维模型和专业技能转化成为直觉是需要大量的训练的。但是应该怎样去训练呢？不断的重复，遵循一万小时定律吗？</p><p>但是我们每天要上班，各种事情，哪有那么多的时间去训练呢？</p><p>就算我有时间，我应该怎么去训练这些思维模型和知识呢？</p><p>《助推》：如果我们想要持续的产生一个行为，那么外部的环境影响是非常重要的。</p><p>也就是说：不同的环境会影响我们某个行为产生的频率。而不断的练习和反省训练思维模型和专业技能也需要这样一个助推的环节。你需要设计一个场景，能够不断的触发我们反省思考</p><p>一个非常重要的工具：《反思日记》。提高我们成长进步斜率的杠杆点</p><h3 id="核心算法1-对标练习"><a href="#核心算法1-对标练习" class="headerlink" title="核心算法1-对标练习"></a>核心算法1-对标练习</h3><p>在日常生活中，经常碰到的一个问题是，学习了一个思维模型或者一些我们觉得非常有用的知识点之后，找不到使用的场景。也就是说，我们学的这些知识和我们是脱节的。</p><p><strong>核心问题：</strong>不是学习的这个思维模型不起作用，而是我们看不到它如何起作用。</p><p>对标：把思维模型当做思考问题的标准。寻找可以用思维模型的场景。</p><h3 id="核心算法2-举一反三"><a href="#核心算法2-举一反三" class="headerlink" title="核心算法2-举一反三"></a>核心算法2-举一反三</h3><p>学习了一个思维模型之后，至少在3个以上的不同场景中练习应用。</p><p>你必须找到不同的场景去运用同一个思维模型，如果找不到，说明还是不理解这个事情。</p><h2 id="七星笔记法"><a href="#七星笔记法" class="headerlink" title="七星笔记法"></a>七星笔记法</h2><p>目的：事先人为的描述整体全局框架的关键点，在过程中，填充着7个关键点，填充完了之后，这个框架也就描绘出来了。也就是说，用你的学习的思维模型去学习其他思维模型</p><p>在学习做记笔记的时候，7个星星，也就是7个问题。上课或者学习的时候就是回答这7个问题，当这7个问题回答完了，那么笔记也记完了</p><ul><li>这门课的目的是什么？也就是：为什么要学习它，它解决什么问题？</li><li>这门课的核心观点和内容是什么？</li><li>目的和这些核心观点是怎么连接的？</li><li>老师或作者讲述的逻辑是什么？</li><li>我在听课学习的过程中，有哪些疑问（说的对吗）和启发（为什么能这么思考）的地方？</li><li>上面的这些疑问和启发背后的思维模型是什么？</li><li>有哪些事情可以让我直接就可以开始找应用场景并采取行动？</li></ul><p>一些说明：</p><ul><li>在学习之前，可以通过上网查资料等方式先了解下这门课，这个领域的核心框架是什么，之后在学习的时候去进行比较。</li><li>老师或者作者的逻辑和我自己理解的有什么差别，重要的不是知识点，重要的是为什么这么组织推演思考过程，为什么这么思考？</li></ul><h2 id="逻辑思维"><a href="#逻辑思维" class="headerlink" title="逻辑思维"></a>逻辑思维</h2><h3 id="star1-学习逻辑的目的"><a href="#star1-学习逻辑的目的" class="headerlink" title="star1:学习逻辑的目的"></a>star1:学习逻辑的目的</h3><p>通过学习逻辑思维的相关知识，提高我们在今后学习的时候，提取知识和梳理脉络的效率。最终目的是为了更好的构建思维模型。</p><h3 id="star2-逻辑思维的核心观点和内容"><a href="#star2-逻辑思维的核心观点和内容" class="headerlink" title="star2:逻辑思维的核心观点和内容"></a>star2:逻辑思维的核心观点和内容</h3><h4 id="什么是逻辑-知识和思考方法"><a href="#什么是逻辑-知识和思考方法" class="headerlink" title="什么是逻辑-知识和思考方法"></a>什么是逻辑-知识和思考方法</h4><p>知识：是问题的答案，比如人有一张嘴、2个耳朵；达尔文的进化论。</p><p>思考的方法：知识背后的。</p><p>举例来说：我们都学了达尔文的演化论，我们是要学习达尔文的演化论究竟说了什么东西吗？演化论里面，它的知识点有哪些吗？我们学习演化论其实是要琢磨这么一个事情：全人类都面对同一个大自然，但是有的人找出的是神造论，那么，为什么达尔文就偏偏能够解读出演化论这件事情，他是怎么找出这个<strong>视角</strong>、怎么从这个视角<strong>推论出道理</strong>、怎么证明这个道理。<font color="red">视角–&gt;道理–&gt;证明</font>。这个系列就是达尔文的思考方法。</p><p>逻辑就是：从找到角度进而论述道理，进而证明道理，这整条的脉络，运算机制就是逻辑。</p><p>总结一下，逻辑思维是分析思考事物的方法，帮我们找出知识的脉络。</p><h4 id="为什么要学逻辑？"><a href="#为什么要学逻辑？" class="headerlink" title="为什么要学逻辑？"></a>为什么要学逻辑？</h4><p>逻辑是每一个人先天就有的，我们常常会误认为不学习逻辑就没有逻辑。</p><p>我们身处其中却又不知自的逻辑通常有2个：</p><ul><li>逻辑1：归纳法。同一件事情，它的因果链条在不同的情况中，高频率的重复出现，我们自然而然的就会把它归纳起来，认为这就是一个道理。此蘑菇有毒。这个道理的整个过程是不需要进行推理的，只需要记忆就可以。</li><li>逻辑2：演绎推理法。例如祈祷这个事情，前提：有病是因为我冒犯了神灵。过程：向神灵沟通，就能够让他宽恕我的罪过。因此结论就是：求神能治病。这个就是演绎法（演绎推理法）的雏形。</li><li>补充：演绎推理是严格的逻辑推理，一般表现为大前提、小前提、结论的三段论模式：即从两个反映客观世界对象的联系和关系的判断中得出新的判断的推理形式。如：“自然界一切物质都是可分的，基本粒子是自然界的物质，因此，基本粒子是可分的。”演绎推理的基本要求是：一是大、小前提的判断必须是真实的；二是推理过程必须符合正确的逻辑形式和规则。演绎推理的正确与否首先取决于大前提的正确与否，如果大前提错了，结论自然不会正确。</li></ul><p>那么，既然逻辑是我们每一个人先天就有的，为什么我们还要学习逻辑呢？</p><p>2个原因：</p><ul><li>直观答案阻碍我们启动思考。只要我们对某一个疑问有了一个答案，那我们很自然的就会让我们的大脑停止思考。例如：学音乐的孩子比较乖。这个说法是不是有点因果倒置了？当我们开始进行推敲的时候，我们往往就能发现潜藏在背后的真正答案。</li><li>世界越来越复杂。很难直观的发现，我们现在的一个行为最终会造成什么样的后果。商场中，所有的决策，永远不会只有一个面的效果，所以我们需要让我们的视角更开阔，让判断更精密。</li></ul><p>头脑中拥有非常多的逻辑知识，不代表你的逻辑能力强。逻辑其实是一个能力，而不是知识</p><p>所以，学逻辑应该说是：<strong>锻炼我们先天既有的逻辑能力，让它变得更精准</strong></p><h4 id="如何启动触发逻辑"><a href="#如何启动触发逻辑" class="headerlink" title="如何启动触发逻辑"></a>如何启动触发逻辑</h4><p>也就是如何运用</p><p>人的大脑是分为两个部分的：</p><ul><li>理性思考。也就是逻辑思维。</li><li>感性直觉。人在碰到问题的时候，最直观的答案。</li></ul><p>人的大脑总是：先感性直觉，再决定要不要启动理性思考。理性思考往往滞后于感性直觉。</p><p>思考工具：为什么、凭什么？前提是方向的确定性。</p><p>4个判断：</p><ul><li>事实判断</li><li>功利判断</li><li>价值判断</li><li>审美判断。主要是感受</li></ul><p>我们在进行思考的时候，往往会有多个判断同时浮现，这个时候方向的确定就显得非常重要。</p><h4 id="提高逻辑的效率"><a href="#提高逻辑的效率" class="headerlink" title="提高逻辑的效率"></a>提高逻辑的效率</h4><h5 id="足够的信息-更多信息"><a href="#足够的信息-更多信息" class="headerlink" title="足够的信息-更多信息"></a>足够的信息-更多信息</h5><p>很多人认为，一个有逻辑的人，他找出的答案一定是正确的。这是不一定的</p><p>案例：例如四方形的面积等于长*宽。如果这个时候只是知道了长，那么是不能就算出面积的。</p><p>也就是说：逻辑思维要能给我们反馈一个准确的答案，还有一个重要的前提就是：我们注入的信息是足够丰富的。</p><p>也就是说表象要足够丰富，我们才能够进行抽象</p><h5 id="封装-更多观念"><a href="#封装-更多观念" class="headerlink" title="封装-更多观念"></a>封装-更多观念</h5><p>掌握更多封装的观念。一个就久经验证的道理，这个道理可以直接为我们所用，不用我们再去麻烦的推演的一套观念。</p><p>例如：勾股定理。供需关系。</p><h5 id="找出更多元的答案"><a href="#找出更多元的答案" class="headerlink" title="找出更多元的答案"></a>找出更多元的答案</h5><p>当我们习惯用一个方法来解决问题之后，就会不由自主的在下一次碰到同类问题的时候会重复沿用。</p><p>但是每一个问题或多或少都是不一样的。人不可能在同一条河中出现两次。</p><p>工具：类比思维。这个事情在其他领域有没有类似性质可以参考。把其他领域的解法引用进来帮助我们解决问题。</p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>信息—&gt;逻辑—&gt;本质—&gt;逻辑—&gt;方法。</p><h3 id="star3-观点内容和目的是如何连接的？"><a href="#star3-观点内容和目的是如何连接的？" class="headerlink" title="star3:观点内容和目的是如何连接的？"></a>star3:观点内容和目的是如何连接的？</h3><p>目的-内容：</p><ul><li>了解逻辑思维。第一部分的知识和思考方法以及第二部分的为什么要学。说明了什么是逻辑思维，逻辑思维是分析思考事物的方法；以及学习逻辑思维对我们有什么影响，默认内置的2个逻辑思维不够不能满足实际的需求，因为直观答案阻碍我们并且当今世界越来越复杂。</li><li>掌握逻辑思维。首先确定思考的方向，然后使用工具：为什么？凭什么？</li><li>更高效的使用逻辑思维。信息、可以直接调用的封装框架，多元角度。</li></ul><h3 id="star4-讲述的逻辑是什么样的？"><a href="#star4-讲述的逻辑是什么样的？" class="headerlink" title="star4:讲述的逻辑是什么样的？"></a>star4:讲述的逻辑是什么样的？</h3><p><strong>讲述的顺序：</strong></p><ul><li>简介学习的目的</li><li>介绍核心观点和内容(是什么、为什么、怎么做、如何提高)</li></ul><h3 id="star5-有哪些启发点和疑问点"><a href="#star5-有哪些启发点和疑问点" class="headerlink" title="star5:有哪些启发点和疑问点"></a>star5:有哪些启发点和疑问点</h3><p>启发点：主要是在为什么要学习逻辑这一个部分。介绍了我们已经被内置的2个逻辑，也就是归纳法和演绎推理法。但是这2个先天的逻辑在没有经过训练强化的情况下不能满足我们的使用需求，所以我们要做的事情其实上是强化锻炼我们的先天逻辑，让它变得更精准。而不是所谓的创建逻辑思维，它本身就是存在的。</p><h3 id="star6-这些启发点和疑问点背后的本质和思维模型是什么？"><a href="#star6-这些启发点和疑问点背后的本质和思维模型是什么？" class="headerlink" title="star6:这些启发点和疑问点背后的本质和思维模型是什么？"></a>star6:这些启发点和疑问点背后的本质和思维模型是什么？</h3><p>我的理解：其实逻辑还是算是思维模型体系中的一个部分，并不是独立存在的。逻辑其实是我们做决策的一个依据，也就是处理一个事情的脉络，也就是抽象后的单个或多个思维模型的组合。</p><p>而逻辑能力是发现和从构建思维模型的能力。</p><h3 id="star7-有哪些我可以直接运用的应用场景？"><a href="#star7-有哪些我可以直接运用的应用场景？" class="headerlink" title="star7:有哪些我可以直接运用的应用场景？"></a>star7:有哪些我可以直接运用的应用场景？</h3><p>思维模型的抽象有一个前提，就是需要输入大量的具象的信息，有了大量的具象信息之后我们才能进行抽象，依靠唯心主义，凭空创造是不可取的。</p><p>总结：这个逻辑思维的内容部分，我学习完了之后其实是没有多少收获的，说的都是我已经知道的内容，但是在没学之前又生怕错过了什么。如果对你有启发，那就最好。</p><h1 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h1><p>当经历了输入和内化之后，就只剩下输出了。</p><p>在很多人看到，输出很简单，通过文章或者讲解把自己的要表达的这些内容说抛出来就完成了。</p><p>但是，行百里者半九十！良好的输出和输入及内化同等重要！</p><p>但是，行百里者半九十！良好的输出和输入及内化同等重要！</p><p>但是，行百里者半九十！良好的输出和输入及内化同等重要！</p><p>重要的事情说三遍！</p><p>一般人在进行输出的时候，往往是采取：是什么？、为什么？、怎么做？这么3个问题来展开。这种方式有其一定的科学道理，但并不是任何场景都试用的，这些还是在表象层面，我们要做的，是真正的发掘更本质的东西。</p><p>因此，我个人思考得出的观点是在输出的时候，有没有想过一下这些问题：</p><ul><li>说的对吗？你是否正确的把你要表达的内容输出出来了？是否达到了本次输出的目的？</li><li>听/看完了吗？信息接受者有没有真的听或看完你的内容？为什么不能坚持？是输出的方式有问题还是输出结构还是什么问题？</li><li>听/看懂了吗？信息接受者有没有理解你表达出来的内容。</li><li>是科学的吗？<ul><li>你的输出方式是不是合理科学的？有时间的控制还是任意发挥?</li><li>在阐述一些其他人没有接触过的新知识的时候，有没有更好的方法帮助他人吸收？</li><li>输出介质（文章、图片、视频等）的组织结构是否清晰易读，内容是否重点突出（最终的目的是为了更好的理解），是否可以学习下写作技巧等科学的方法进行提升</li></ul></li></ul><p>下面我们进行拆分讲解。</p>]]></content>
    
    <summary type="html">
    
      如何输出和输出
    
    </summary>
    
      <category term="个人知识体系" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    
      <category term="认知升级" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/%E8%AE%A4%E7%9F%A5%E5%8D%87%E7%BA%A7/"/>
    
      <category term="学习方法" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/%E8%AE%A4%E7%9F%A5%E5%8D%87%E7%BA%A7/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    
    
      <category term="学习方法" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>如何自学计算机科学</title>
    <link href="http://yoursite.com/2018/12/31/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/IT%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%A6%82%E4%BD%95%E8%87%AA%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%A6%82%E4%BD%95%E8%87%AA%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    <id>http://yoursite.com/2018/12/31/IT科学技术知识体系结构-Linux运维方向/IT基础知识/如何自学计算机科学/如何自学计算机科学/</id>
    <published>2018-12-31T08:49:42.000Z</published>
    <updated>2018-12-31T08:49:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1>]]></content>
    
    <summary type="html">
    
      “自学计算机科学“这个系列的文章将会是我工作经验的输出和对IT领域知识领悟后的抽象和提炼，可以说将会包含我个人最核心的思想（就计算机科学这一学科来说）。《如何自学计算机科学》这篇文章，后续如果记录的内容较多时可能会进行拆分；同样的，《IT技术学习网站及学习资料汇总》这篇文章可能也会进行拆分。但是不管怎么样，都是统一归类到“自学计算机科学“这一个系列当中
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="IT基础知识" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/IT%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="如何自学计算机科学" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/IT%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%A6%82%E4%BD%95%E8%87%AA%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
      <category term="计算机科学" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>IT技术学习网站及学习资料汇总</title>
    <link href="http://yoursite.com/2018/12/31/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/IT%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%A6%82%E4%BD%95%E8%87%AA%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/IT%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E5%8F%8A%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%B1%87%E6%80%BB/"/>
    <id>http://yoursite.com/2018/12/31/IT科学技术知识体系结构-Linux运维方向/IT基础知识/如何自学计算机科学/IT技术学习网站及学习资料汇总/</id>
    <published>2018-12-31T08:46:00.000Z</published>
    <updated>2018-12-31T08:46:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>本文有2个目的：</p><ul><li>记录同级目录下的另一篇文章：《如何自学计算机科学》中所提及的资料，便于检索查找。</li><li>记录在学习及工作中所涉及到的相关网站或者书籍资料等。同样的，也是为了便于检索查找。</li></ul><p>文章内容的一些说明：</p><ul><li>我会尽量说明资料的类型以及对应的作者。这一点也是非常重要的，IT领域经过这么多年的快速发展，资料重名已经是不可避免的了，所以有必要提及作者。</li><li>如果一些书籍存在多个译本，那么我会尽量说明哪一个译本的质量最高（因为是以我个人为主，所以仅供参考）。毕竟如果不能直接看英语的原版，那么对知识的吸收理解以及内化程度和翻译者的水平成正相关。高质量的译本和低质量的相差真的是非常之大</li><li>如果一些书我看过并且有做记录笔记的话，将会在我的另一个目录《个人知识体系》的读书笔记下</li></ul><p>这篇文章的内容其实可以做成一个图形的导航界面，只是当前时间没有这个能力，后续我会实现这个的。</p><h1 id="技术社区类网站"><a href="#技术社区类网站" class="headerlink" title="技术社区类网站"></a>技术社区类网站</h1><p>纯IT技术类：</p><ul><li><a href="https://www.csdn.net/" target="_blank" rel="noopener">csdn</a></li><li><a href="http://edu.51cto.com/" target="_blank" rel="noopener">51cto</a></li><li><a href="http://bbs.chinaunix.net/" target="_blank" rel="noopener">ChinaUnix技术论坛</a></li><li><a href="http://www.cnblogs.com/" target="_blank" rel="noopener">博客园</a></li><li><a href="https://www.oschina.net/" target="_blank" rel="noopener">开源中国</a></li><li><a href="http://www.178linux.com/" target="_blank" rel="noopener">Linux运维部落</a></li><li><a href="http://www.yunweipai.com/" target="_blank" rel="noopener">运维派</a></li><li><a href="https://segmentfault.com/" target="_blank" rel="noopener">SegmentFault</a></li><li><a href="https://stackoverflow.com/" target="_blank" rel="noopener">StackOverflow</a></li></ul><p>其他的像知乎什么的，上面的也有非常多的IT方面的知识可以学习</p><h1 id="工具类网站"><a href="#工具类网站" class="headerlink" title="工具类网站"></a>工具类网站</h1><h1 id="学习网站汇总"><a href="#学习网站汇总" class="headerlink" title="学习网站汇总"></a>学习网站汇总</h1><p>网站汇总如下：</p><ul><li><p><a href="https://www.shiyanlou.com/" target="_blank" rel="noopener">实验楼</a></p><p>还是比较有特色，提供的不是视频，而是配置好的虚拟机，注重实践，通过虚拟的实验环境，可以边看文档边动手操作</p></li><li><p><a href="http://www.runoob.com/" target="_blank" rel="noopener">菜鸟教程</a></p><p>它以<strong>文档教程和查询参考手册为主</strong>。看文档理解稍微费劲点，但相比视频教程，可以节省很多时间。</p></li><li><p><a href="https://www.imooc.com/" target="_blank" rel="noopener">慕课网</a></p><p>课程主要针对目前很热门的职业和内容，整体质量也不错</p></li><li><p><a href="https://www.jisuanke.com/" target="_blank" rel="noopener">计蒜课</a></p><p>不是单纯的为求职快速上手而培训，偏向于真正培养IT技术人才</p></li><li><p><a href="https://www.jikexueyuan.com/" target="_blank" rel="noopener">极客学院</a></p></li><li><p><a href="http://www.51zxw.net/" target="_blank" rel="noopener">我要自学网</a></p><p>比较久的一个网站，学习一些基础类的还可以</p></li><li><p><a href="http://study.163.com" target="_blank" rel="noopener">网易云课堂</a></p></li><li><p><a href="https://ke.qq.com/" target="_blank" rel="noopener">腾讯课堂</a></p></li><li><p><a href="https://open.163.com/" target="_blank" rel="noopener">网易公开课</a></p></li><li><p><a href="http://www.w3school.com.cn/" target="_blank" rel="noopener">W3School</a></p><p>W3School 是因特网上最大的 WEB 开发者资源，主要针对web开发，重点在前端</p></li><li><p><a href="https://www.ichunqiu.com/" target="_blank" rel="noopener">i 春秋</a></p><p>主要是安全方面</p></li><li><p><a href="https://www.khanacademy.org/" target="_blank" rel="noopener">可汗学院</a></p></li><li><p><a href="https://link.jianshu.com/?t=http://ocw.mit.edu/" target="_blank" rel="noopener">麻省理工开放式课程计划(MIT OpenCourseWare | Free Online Course Materials)</a></p></li><li><p><a href="https://link.jianshu.com/?t=https://www.edx.org/" target="_blank" rel="noopener">edX | Free online courses from the world’s best universities</a></p><p>edX是麻省理工和哈佛大学于2012年4月联手创建的大规模开放在线课堂平台。它免费给大众提供大学教育水平的在线课堂。两所大学在这个非盈利性计划各资助三千万美元。2012年秋天，edX在MITx启动。</p></li></ul><h1 id="学习资料汇总"><a href="#学习资料汇总" class="headerlink" title="学习资料汇总"></a>学习资料汇总</h1><h2 id="科普"><a href="#科普" class="headerlink" title="科普"></a>科普</h2><h3 id="计算机科学历史及基础知识科普"><a href="#计算机科学历史及基础知识科普" class="headerlink" title="计算机科学历史及基础知识科普"></a>计算机科学历史及基础知识科普</h3><ul><li>书籍《浪潮之巅》。作者吴军。这本真的是入门必读经典。</li></ul><h2 id="网络知识科普"><a href="#网络知识科普" class="headerlink" title="网络知识科普"></a>网络知识科普</h2><h2 id="数据库技术"><a href="#数据库技术" class="headerlink" title="数据库技术"></a>数据库技术</h2><h3 id="nosql"><a href="#nosql" class="headerlink" title="nosql"></a>nosql</h3><ul><li>书籍《Redis运维与开发》。搜狐视频团队出品，其还开源了cachecloud云平台。不错的一本好书。</li></ul>]]></content>
    
    <summary type="html">
    
      “自学计算机科学“这个系列的文章将会是我工作经验的输出和对IT领域知识领悟后的抽象和提炼，可以说将会包含我个人最核心的思想（就计算机科学这一学科来说）。《如何自学计算机科学》这篇文章，后续如果记录的内容较多时可能会进行拆分；同样的，《IT技术学习网站及学习资料汇总》这篇文章可能也会进行拆分。但是不管怎么样，都是统一归类到“自学计算机科学“这一个系列当中
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="IT基础知识" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/IT%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="如何自学计算机科学" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/IT%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%A6%82%E4%BD%95%E8%87%AA%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
      <category term="计算机科学" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>python可变参数args</title>
    <link href="http://yoursite.com/2018/12/20/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/Python/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/python%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0args/"/>
    <id>http://yoursite.com/2018/12/20/IT科学技术知识体系结构-Linux运维方向/编程开发/Python/基础知识/python可变参数args/</id>
    <published>2018-12-20T11:18:57.000Z</published>
    <updated>2018-12-20T11:18:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h1><p>如果我们在函数被调用前并不知道也不限制将来函数可以接收的参数数量。在这种情况下我们可以使用<code>*args</code>和<code>**kwargs</code>来进行定义函数</p><p><code>*args</code>和<code>**kwargs</code>这两个是python中的可变参数。</p><ul><li><p>args表示任何多个无名参数，它是一个tuple</p></li><li><p>kwargs表示关键字参数，它是一个dict</p></li></ul><p><strong>特别注意：</strong></p><ul><li><p>同时使用<code>*args</code>和<code>**kwargs</code>时，<code>*args</code>参数要列在<code>**kwargs</code><strong>前</strong>。</p></li><li><p>因此像foo(a=1, b=’2’, c=3, a’, 1, None, )这样调用的话，会提示语法错误“SyntaxError: non-keyword arg after keyword arg”。</p></li><li><p>当两者同时存在时，正确的调用方式应该像是：foo(‘a’,1,a=1,b=2)</p></li><li><p>实际上真正的Python参数传递语法是<code>*</code>和<code>**</code>。<code>*args</code>和<code>**kwargs</code>只是一种约定俗成的编程实践。我们也可以写成<code>*vars</code>和<code>**kvars</code>。</p></li></ul><h1 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h1><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def test(*args,**kwargs):</span><br><span class="line">    print (&quot;args = &quot;,args)</span><br><span class="line">    print (&quot;kwargs = &quot;,kwargs)</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">test(1,2,3,4)</span><br><span class="line">test(&quot;11&quot;,&quot;2&quot;,a=1,b=2)</span><br></pre></td></tr></table></figure><p>执行后输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">args =  (1, 2, 3, 4)</span><br><span class="line">kwargs =  &#123;&#125;</span><br><span class="line">args =  (&apos;11&apos;, &apos;2&apos;)</span><br><span class="line">kwargs =  &#123;&apos;a&apos;: 1, &apos;b&apos;: 2&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      python可变参数args
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="编程开发" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
      <category term="Python" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/Python/"/>
    
      <category term="基础知识" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/Python/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="python可变参数args" scheme="http://yoursite.com/tags/python%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0args/"/>
    
  </entry>
  
  <entry>
    <title>harbor镜像仓库实战</title>
    <link href="http://yoursite.com/2018/12/18/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E8%99%9A%E6%8B%9F%E5%8C%96/Docker+k8s/harbor/"/>
    <id>http://yoursite.com/2018/12/18/IT科学技术知识体系结构-Linux运维方向/虚拟化/Docker+k8s/harbor/</id>
    <published>2018-12-18T02:52:05.000Z</published>
    <updated>2018-12-18T02:52:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><a href="https://github.com/goharbor/harbor" target="_blank" rel="noopener">github主页</a></li></ul><h1 id="Harbor基础知识"><a href="#Harbor基础知识" class="headerlink" title="Harbor基础知识"></a>Harbor基础知识</h1><h2 id="Features-功能特性"><a href="#Features-功能特性" class="headerlink" title="Features-功能特性"></a>Features-功能特性</h2><ul><li><p><strong>Role based access control</strong>: Users and repositories are organized via ‘projects’ and a user can have different permission for images under a project.</p><blockquote><p>用户和镜像仓库是通过项目关联起来的，不同用户在该项目下拥有不同的权限</p></blockquote></li><li><p><strong>Policy based image replication</strong>: Images can be replicated (synchronized) between multiple registry instances, with auto-retry on errors. Great for load balancing, high availability, multi-datacenter, hybrid and multi-cloud scenarios.</p><blockquote><p>镜像将在多个注册实例中复制，实现高可用、负载均衡、多路选择等功能</p></blockquote></li><li><p><strong>Vulnerability Scanning</strong>: Harbor scans images regularly and warns users of vulnerabilities.</p><blockquote><p>高危扫描：harbor将会在规律的扫描镜像并且提醒用户相关的危险</p></blockquote></li><li><p><strong>LDAP/AD support</strong>: Harbor integrates with existing enterprise LDAP/AD for user authentication and management.</p><blockquote><p>harbor可以聚合企业现在的LDAP/AD等实现用户认证和管理</p></blockquote></li><li><p><strong>Image deletion &amp; garbage collection</strong>: Images can be deleted and their space can be recycled.</p><blockquote><p>镜像删除和垃圾收集</p></blockquote></li><li><p><strong>Notary</strong>: Image authenticity can be ensured.</p><blockquote><p>可以保证镜像的可靠性</p></blockquote></li><li><p><strong>Graphical user portal</strong>: User can easily browse, search repositories and manage projects.</p><blockquote><p>图形化的用户入口：可以浏览，检索，管理项目</p></blockquote></li><li><p><strong>Auditing</strong>: All the operations to the repositories are tracked.</p><blockquote><p>审计：所有的操作都可以被追踪</p></blockquote></li><li><p><strong>RESTful API</strong>: RESTful APIs for most administrative operations, easy to integrate with external systems.</p><blockquote><p>提供api</p></blockquote></li><li><p><strong>Easy deployment</strong>: Provide both an online and offline installer.</p><blockquote><p>部署简单，提供在线和离线两种安装方式</p></blockquote></li></ul><h2 id="Architecture-体系结构"><a href="#Architecture-体系结构" class="headerlink" title="Architecture-体系结构"></a>Architecture-体系结构</h2><p><img src="https://camo.githubusercontent.com/e0de62fb4f08efedd2c5abd44786410d3af06c7b/687474703a2f2f7777772e7468696e6b2d666f756e6472792e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031362f30392f61727469636c65315f696d616765322e706e67" alt="img"></p><p>As depicted in the above diagram, Harbor comprises 6 components:</p><p><strong>Proxy:</strong> Components of Harbor, such as registry, UI and token services, are all behind a reversed proxy. The proxy forwards requests from browsers and Docker clients to various backend services.</p><blockquote><p>harbor使用代理结构，外部的客户端（浏览器或者docker client）访问调用是通过代理层去实现的</p></blockquote><p><strong>Registry:</strong> Responsible for storing Docker images and processing Docker push/pull commands. As Harbor needs to enforce access control to images, the Registry will direct clients to a token service to obtain a valid token for each pull or push request.</p><blockquote><p>注册部分：响应操作docker镜像的请求</p><p>harbor为了确保安全性，客户端在调用的时候，需要取得valid token才可以进行操作</p></blockquote><p><strong>Core services:</strong> Harbor’s core functions, which mainly provides the following services:</p><p><strong>UI:</strong> a graphical user interface to help users manage images on the Registry Webhook: Webhook is a mechanism configured in the Registry so that image status changes in the Registry can be populated to the Webhook endpoint of Harbor. Harbor uses webhook to update logs, initiate replications, and some other functions. Token service: Responsible for issuing a token for every docker push/pull command according to a user’s role of a project. If there is no token in a request sent from a Docker client, the Registry will redirect the request to the token service. Database: Database stores the meta data of projects, users, roles, replication policies and images.</p><blockquote><p>提供一个图形的用户入口，方便用户在注册钩子系统（registry webhook）中管理镜像。</p></blockquote><p><strong>Job services:</strong> used for image replication, local images can be replicated(synchronized) to other Harbor instances.</p><p><strong>Log collector:</strong> Responsible for collecting logs of other modules in a single place.</p><h1 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h1><h2 id="参考文献-1"><a href="#参考文献-1" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://github.com/goharbor/harbor/blob/master/docs/installation_guide.md" target="_blank" rel="noopener">官方安装手册</a></li></ul><h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><p>Harbor is deployed as several Docker containers, and, therefore, can be deployed on any Linux distribution that supports Docker. The target host requires Python, Docker, and Docker Compose to be installed.</p><p>harbor是使用docker的方式部署的，整个harbor包含几个容器，因此能够部署在任何只要支持docker的Linux发行版本上。</p><p>目标主机只需要包含：python、docker、docker compose这3个东西即可</p><p><strong>Hardware</strong></p><table><thead><tr><th>Resource</th><th>Capacity</th><th>Description</th></tr></thead><tbody><tr><td>CPU</td><td>minimal 2 CPU</td><td>4 CPU is prefered</td></tr><tr><td>Mem</td><td>minimal 4GB</td><td>8GB is prefered</td></tr><tr><td>Disk</td><td>minimal 40GB</td><td>160GB is prefered</td></tr></tbody></table><p><strong>Software</strong></p><table><thead><tr><th>Software</th><th>Version</th><th>Description</th></tr></thead><tbody><tr><td>Python</td><td>version 2.7 or higher</td><td>Note that you may have to install Python on Linux distributions (Gentoo, Arch) that do not come with a Python interpreter installed by default</td></tr><tr><td>Docker engine</td><td>version 1.10 or higher</td><td>For installation instructions, please refer to: <a href="https://docs.docker.com/engine/installation/" target="_blank" rel="noopener">https://docs.docker.com/engine/installation/</a></td></tr><tr><td>Docker Compose</td><td>version 1.6.0 or higher</td><td>For installation instructions, please refer to: <a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener">https://docs.docker.com/compose/install/</a></td></tr><tr><td>Openssl</td><td>latest is prefered</td><td>Generate certificate and keys for Harbor</td></tr></tbody></table><p><strong>Network ports</strong></p><table><thead><tr><th>Port</th><th>Protocol</th><th>Description</th></tr></thead><tbody><tr><td>443</td><td>HTTPS</td><td>Harbor UI and API will accept requests on this port for https protocol</td></tr><tr><td>4443</td><td>HTTPS</td><td>Connections to the Docker Content Trust service for Harbor, only needed when Notary is enabled</td></tr><tr><td>80</td><td>HTTP</td><td>Harbor UI and API will accept requests on this port for http protocol</td></tr></tbody></table><p>官方的安装步骤（The installation steps boil down to the following）：</p><ol><li>Download the installer;</li><li>Configure <strong>harbor.cfg</strong>;</li><li>Run <strong>install.sh</strong> to install and start Harbor;</li></ol><p>下面我们开始实际操作</p><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><h3 id="下载并解压"><a href="#下载并解压" class="headerlink" title="下载并解压"></a>下载并解压</h3><p><a href="https://github.com/goharbor/harbor/releases" target="_blank" rel="noopener">所有软件包的下载地址</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># tar -xvf harbor-online-installer-&lt;version&gt;.tgz</span><br></pre></td></tr></table></figure><p>当前节点我使用的是harbor.v1.4.0.tar.gz</p><h3 id="安装docker-ce"><a href="#安装docker-ce" class="headerlink" title="安装docker-ce"></a>安装docker-ce</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># sudo yum install -y yum-utils   device-mapper-persistent-data   lvm2</span><br><span class="line"></span><br><span class="line"># sudo yum-config-manager     --add-repo     https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"># sudo yum install docker-ce</span><br></pre></td></tr></table></figure><h3 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># systemctl start  docker</span><br><span class="line"># systemctl enable  docker</span><br></pre></td></tr></table></figure><h3 id="安装Docker-Compose"><a href="#安装Docker-Compose" class="headerlink" title="安装Docker Compose"></a>安装Docker Compose</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line"># sudo chmod +x /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line"># docker-compose --version</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="配置概述"><a href="#配置概述" class="headerlink" title="配置概述"></a>配置概述</h3><p>Configuration parameters are located in the file <strong>harbor.cfg</strong></p><p>There are two categories of parameters in harbor.cfg, <strong>required parameters</strong> and <strong>optional parameters</strong>.</p><ul><li><p><strong>required parameters</strong>: These parameters are required to be set in the configuration file. They will take effect if a user updates them in <code>harbor.cfg</code> and run the <code>install.sh</code> script to reinstall Harbor.</p></li><li><p><strong>optional parameters</strong>: These parameters are optional for updating, i.e. user can leave them as default and update them on Web UI after Harbor is started. If they are set in <code>harbor.cfg</code>, they only take effect in the first launch of Harbor. Subsequent update to these parameters in <code>harbor.cfg</code> will be ignored.</p><p><strong>Note:</strong> If you choose to set these parameters via the UI, be sure to do so right after Harbor is started. In particular, you must set the desired <strong>auth_mode</strong> before registering or creating any new users in Harbor. When there are users in the system (besides the default admin user), <strong>auth_mode</strong> cannot be changed.</p></li></ul><p>配置文件中有2种配置内容，一种是必须配置的参数，一种是可选参数</p><ul><li>必须参数：这是是在配置文件当中必须要存在的参数，当用户修改之后并且重新安装harbor之后生效</li><li>可选参数：这些参数是可以动态更新的，你能够在harbor启动之后，在web界面中进行更新。但是如果你把这些参数直接配置在harbor.cfg配置文件中（默认的配置不算人为配置了），它们只能在你第一次启动harbor的时候加载生效，之后再更新参数将不会生效。这一点需要尤为注意<ul><li>注意1：你使用动态的可选参数方式的时候，首先要确认harbor已经启动</li><li>注意2：有一个特别需要注意的参数，当有用户（除了默认的管理员用户）已经存在于harbor中的时候，<strong>auth_mode</strong>这个参数是不能被修改的。所以你需要在有新的用户注册进harbor之前，设置好认证模式（auth_mode）</li></ul></li></ul><h3 id="配置文件参数详解"><a href="#配置文件参数详解" class="headerlink" title="配置文件参数详解"></a>配置文件参数详解</h3><h4 id="Required-parameters-必需参数"><a href="#Required-parameters-必需参数" class="headerlink" title="Required parameters-必需参数"></a>Required parameters-必需参数</h4><ul><li><p><strong>hostname</strong>: The target host’s hostname, which is used to access the UI and the registry service. It should be the IP address or the fully qualified domain name (FQDN) of your target machine, e.g., <code>192.168.1.10</code> or <code>reg.yourdomain.com</code>. <em>Do NOT use localhost or 127.0.0.1 for the hostname - the registry service needs to be accessible by external clients!</em></p><blockquote><p><strong>hostname一般配置为域名</strong>,也就是整个harbor的入口</p></blockquote></li><li><p><strong>ui_url_protocol</strong>: (<strong>http</strong> or <strong>https</strong>. Default is <strong>http</strong>) The protocol used to access the UI and the token/notification service. If Notary is enabled, this parameter has to be <em>https</em>. By default, this is <em>http</em>. To set up the https protocol, refer to <strong>Configuring Harbor with HTTPS Access</strong>.</p><blockquote><p><strong>走HTT还是HTTPS</strong></p></blockquote></li><li><p><strong>db_password</strong>: The root password for the MySQL database used for <strong>db_auth</strong>. <em>Change this password for any production use!</em></p></li><li><p><strong>max_job_workers</strong>: (default value is <strong>10</strong>) The maximum number of replication workers in job service. For each image replication job, a worker synchronizes all tags of a repository to the remote destination. Increasing this number allows more concurrent replication jobs in the system. However, since each worker consumes a certain amount of network/CPU/IO resources, please carefully pick the value of this attribute based on the hardware resource of the host.</p><blockquote><p><strong>复制任务的进程数量，默认10个，这些进程，将这些镜像同步到远端的存储中</strong></p><p>每个进程都需要消耗系统的资源，因此合理设置数量</p></blockquote></li><li><p><strong>customize_crt</strong>: (<strong>on</strong> or <strong>off</strong>. Default is <strong>on</strong>) When this attribute is <strong>on</strong>, the prepare script creates private key and root certificate for the generation/verification of the registry’s token. Set this attribute to <strong>off</strong> when the key and root certificate are supplied by external sources. Refer to <a href="https://github.com/goharbor/harbor/blob/master/docs/customize_token_service.md" target="_blank" rel="noopener">Customize Key and Certificate of Harbor Token Service</a> for more info.</p></li><li><p><strong>ssl_cert</strong>: The path of SSL certificate, it’s applied only when the protocol is set to https</p></li><li><p><strong>ssl_cert_key</strong>: The path of SSL key, it’s applied only when the protocol is set to https</p></li><li><p><strong>secretkey_path</strong>: The path of key for encrypt or decrypt the password of a remote registry in a replication policy.</p></li><li><p><strong>log_rotate_count</strong>: Log files are rotated <strong>log_rotate_count</strong> times before being removed. If count is 0, old versions are removed rather than rotated.</p></li><li><p><strong>log_rotate_size</strong>: Log files are rotated only if they grow bigger than <strong>log_rotate_size</strong> bytes. If size is followed by k, the size is assumed to be in kilobytes. If the M is used, the size is in megabytes, and if G is used, the size is in gigabytes. So size 100, size 100k, size 100M and size 100G are all valid.</p></li></ul><h4 id="optional-parameters-动态可选参数"><a href="#optional-parameters-动态可选参数" class="headerlink" title="optional parameters-动态可选参数"></a>optional parameters-动态可选参数</h4><h2 id="harbor启动"><a href="#harbor启动" class="headerlink" title="harbor启动"></a>harbor启动</h2><p>修改完毕之后的配置如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">[root@app028-dev harbor]# less harbor.cfg  | egrep -v &apos;^$|^#&apos;</span><br><span class="line">hostname = harbor.wxh.com</span><br><span class="line">ui_url_protocol = https</span><br><span class="line">max_job_workers = 3</span><br><span class="line">customize_crt = on</span><br><span class="line">ssl_cert = /data/cert/server.cer</span><br><span class="line">ssl_cert_key = /data/cert/server.key</span><br><span class="line">secretkey_path = /data</span><br><span class="line">admiral_url = NA</span><br><span class="line">log_rotate_count = 50</span><br><span class="line">log_rotate_size = 200M</span><br><span class="line">email_identity =</span><br><span class="line">email_server = smtp.mydomain.com</span><br><span class="line">email_server_port = 25</span><br><span class="line">email_username = sample_admin@mydomain.com</span><br><span class="line">email_password = abc</span><br><span class="line">email_from = admin &lt;sample_admin@mydomain.com&gt;</span><br><span class="line">email_ssl = false</span><br><span class="line">email_insecure = false</span><br><span class="line">harbor_admin_password = dHarbor12345</span><br><span class="line">auth_mode = db_auth</span><br><span class="line">ldap_url = ldaps://ldap.mydomain.com</span><br><span class="line">ldap_basedn = ou=people,dc=mydomain,dc=com</span><br><span class="line">ldap_uid = uid</span><br><span class="line">ldap_scope = 2</span><br><span class="line">ldap_timeout = 5</span><br><span class="line">ldap_verify_cert = true</span><br><span class="line">self_registration = on</span><br><span class="line">token_expiration = 30</span><br><span class="line">project_creation_restriction = everyone</span><br><span class="line">db_host = mysql</span><br><span class="line">db_password = root123</span><br><span class="line">db_port = 3306</span><br><span class="line">db_user = root</span><br><span class="line">redis_url =</span><br><span class="line">clair_db_host = postgres</span><br><span class="line">clair_db_password = password</span><br><span class="line">clair_db_port = 5432</span><br><span class="line">clair_db_username = postgres</span><br><span class="line">clair_db = postgres</span><br><span class="line">uaa_endpoint = uaa.mydomain.org</span><br><span class="line">uaa_clientid = id</span><br><span class="line">uaa_clientsecret = secret</span><br><span class="line">uaa_verify_cert = true</span><br><span class="line">uaa_ca_cert = /path/to/ca.pem</span><br><span class="line">registry_storage_provider_name = filesystem</span><br><span class="line">registry_storage_provider_config =</span><br></pre></td></tr></table></figure><p>自己做测试时，将url类型设置成为http，并且将域名设置成为了：harbor.wxh.com</p><p>修改完配置之后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ./install.sh</span><br></pre></td></tr></table></figure><p>整个的安装过程如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost harbor]# ./install.sh</span><br><span class="line"></span><br><span class="line">[Step 0]: checking installation environment ...</span><br><span class="line"></span><br><span class="line">Note: docker version: 18.06.1</span><br><span class="line"></span><br><span class="line">Note: docker-compose version: 1.22.0</span><br><span class="line"></span><br><span class="line">[Step 1]: loading Harbor images ...</span><br><span class="line">651f69aef02c: Loading layer [==================================================&gt;]  135.8MB/135.8MB</span><br><span class="line">40a1aad64343: Loading layer [==================================================&gt;]  23.24MB/23.24MB</span><br><span class="line">3fe2713e4072: Loading layer [==================================================&gt;]  12.16MB/12.16MB</span><br><span class="line">ba3a1eb0e375: Loading layer [==================================================&gt;]   17.3MB/17.3MB</span><br><span class="line">447427ec5e1a: Loading layer [==================================================&gt;]  15.87kB/15.87kB</span><br><span class="line">4ccb4026663c: Loading layer [==================================================&gt;]  3.072kB/3.072kB</span><br><span class="line">16faa95946a1: Loading layer [==================================================&gt;]  29.46MB/29.46MB</span><br><span class="line">Loaded image: vmware/notary-server-photon:v0.5.1-v1.4.0</span><br><span class="line">fa7ba9fd42c9: Loading layer [==================================================&gt;]  10.95MB/10.95MB</span><br><span class="line">4e400f9ae23e: Loading layer [==================================================&gt;]   17.3MB/17.3MB</span><br><span class="line">2802fb27c88b: Loading layer [==================================================&gt;]  15.87kB/15.87kB</span><br><span class="line">e6367a4e1e1e: Loading layer [==================================================&gt;]  3.072kB/3.072kB</span><br><span class="line">8ece8dfcdd98: Loading layer [==================================================&gt;]  28.24MB/28.24MB</span><br><span class="line">Loaded image: vmware/notary-signer-photon:v0.5.1-v1.4.0</span><br><span class="line">a7dd1a8afcaf: Loading layer [==================================================&gt;]  396.7MB/396.7MB</span><br><span class="line">05adebbe496f: Loading layer [==================================================&gt;]  9.216kB/9.216kB</span><br><span class="line">86eb534949fa: Loading layer [==================================================&gt;]  9.216kB/9.216kB</span><br><span class="line">d7f127c69380: Loading layer [==================================================&gt;]   7.68kB/7.68kB</span><br><span class="line">5ac1c4dc5ee9: Loading layer [==================================================&gt;]  1.536kB/1.536kB</span><br><span class="line">d0bec56b5b1a: Loading layer [==================================================&gt;]  9.728kB/9.728kB</span><br><span class="line">4bbe83860556: Loading layer [==================================================&gt;]   2.56kB/2.56kB</span><br><span class="line">e526f9e6769f: Loading layer [==================================================&gt;]  3.072kB/3.072kB</span><br><span class="line">Loaded image: vmware/harbor-db:v1.4.0</span><br><span class="line">1cff102bbda2: Loading layer [==================================================&gt;]  154.1MB/154.1MB</span><br><span class="line">04c9f3e07de1: Loading layer [==================================================&gt;]  10.75MB/10.75MB</span><br><span class="line">7b6c7bf54f5c: Loading layer [==================================================&gt;]  2.048kB/2.048kB</span><br><span class="line">42f8acdb7fe3: Loading layer [==================================================&gt;]  48.13kB/48.13kB</span><br><span class="line">5b6299d0a1df: Loading layer [==================================================&gt;]   10.8MB/10.8MB</span><br><span class="line">Loaded image: vmware/clair-photon:v2.0.1-v1.4.0</span><br><span class="line">6534131f457c: Loading layer [==================================================&gt;]  94.76MB/94.76MB</span><br><span class="line">73f582101e4b: Loading layer [==================================================&gt;]  6.656kB/6.656kB</span><br><span class="line">86d847823c48: Loading layer [==================================================&gt;]  6.656kB/6.656kB</span><br><span class="line">Loaded image: vmware/postgresql-photon:v1.4.0</span><br><span class="line">5cd250d5a352: Loading layer [==================================================&gt;]  23.24MB/23.24MB</span><br><span class="line">ad3fd52b54f3: Loading layer [==================================================&gt;]  14.99MB/14.99MB</span><br><span class="line">13b1e24cc368: Loading layer [==================================================&gt;]  14.99MB/14.99MB</span><br><span class="line">Loaded image: vmware/harbor-adminserver:v1.4.0</span><br><span class="line">c26c69706710: Loading layer [==================================================&gt;]  23.24MB/23.24MB</span><br><span class="line">223f6fe02cc8: Loading layer [==================================================&gt;]  23.45MB/23.45MB</span><br><span class="line">1fc843c8698a: Loading layer [==================================================&gt;]  7.168kB/7.168kB</span><br><span class="line">e09293610ee7: Loading layer [==================================================&gt;]  10.39MB/10.39MB</span><br><span class="line">d59f9780b1d8: Loading layer [==================================================&gt;]  23.44MB/23.44MB</span><br><span class="line">Loaded image: vmware/harbor-ui:v1.4.0</span><br><span class="line">dd4753242e59: Loading layer [==================================================&gt;]  73.07MB/73.07MB</span><br><span class="line">95aed61ca251: Loading layer [==================================================&gt;]  3.584kB/3.584kB</span><br><span class="line">1864f9818562: Loading layer [==================================================&gt;]  3.072kB/3.072kB</span><br><span class="line">da2a19f80b81: Loading layer [==================================================&gt;]  4.096kB/4.096kB</span><br><span class="line">058531639e75: Loading layer [==================================================&gt;]  3.584kB/3.584kB</span><br><span class="line">a84e69fb619b: Loading layer [==================================================&gt;]  10.24kB/10.24kB</span><br><span class="line">Loaded image: vmware/harbor-log:v1.4.0</span><br><span class="line">b1056051f246: Loading layer [==================================================&gt;]  23.24MB/23.24MB</span><br><span class="line">07678065e08b: Loading layer [==================================================&gt;]  19.19MB/19.19MB</span><br><span class="line">a2d9bdb8f5fb: Loading layer [==================================================&gt;]  19.19MB/19.19MB</span><br><span class="line">Loaded image: vmware/harbor-jobservice:v1.4.0</span><br><span class="line">7f58ce57cd5e: Loading layer [==================================================&gt;]  4.805MB/4.805MB</span><br><span class="line">Loaded image: vmware/nginx-photon:v1.4.0</span><br><span class="line">4c8965978b77: Loading layer [==================================================&gt;]  23.24MB/23.24MB</span><br><span class="line">1466c942edde: Loading layer [==================================================&gt;]  2.048kB/2.048kB</span><br><span class="line">ac5c17331735: Loading layer [==================================================&gt;]  2.048kB/2.048kB</span><br><span class="line">86824c7c466a: Loading layer [==================================================&gt;]  2.048kB/2.048kB</span><br><span class="line">fd3bd0e70d67: Loading layer [==================================================&gt;]   22.8MB/22.8MB</span><br><span class="line">b02195d77636: Loading layer [==================================================&gt;]   22.8MB/22.8MB</span><br><span class="line">Loaded image: vmware/registry-photon:v2.6.2-v1.4.0</span><br><span class="line">Loaded image: vmware/photon:1.0</span><br><span class="line">Loaded image: vmware/mariadb-photon:v1.4.0</span><br><span class="line">454c81edbd3b: Loading layer [==================================================&gt;]  135.2MB/135.2MB</span><br><span class="line">e99db1275091: Loading layer [==================================================&gt;]  395.4MB/395.4MB</span><br><span class="line">051e4ee23882: Loading layer [==================================================&gt;]  9.216kB/9.216kB</span><br><span class="line">6cca4437b6f6: Loading layer [==================================================&gt;]  9.216kB/9.216kB</span><br><span class="line">1d48fc08c8bc: Loading layer [==================================================&gt;]   7.68kB/7.68kB</span><br><span class="line">0419724fd942: Loading layer [==================================================&gt;]  1.536kB/1.536kB</span><br><span class="line">526b2156bd7a: Loading layer [==================================================&gt;]  637.8MB/637.8MB</span><br><span class="line">9ebf6900ecbd: Loading layer [==================================================&gt;]  78.34kB/78.34kB</span><br><span class="line">Loaded image: vmware/harbor-db-migrator:1.4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Step 2]: preparing environment ...</span><br><span class="line">Generated and saved secret to file: /data/secretkey</span><br><span class="line">Generated configuration file: ./common/config/nginx/nginx.conf</span><br><span class="line">Generated configuration file: ./common/config/adminserver/env</span><br><span class="line">Generated configuration file: ./common/config/ui/env</span><br><span class="line">Generated configuration file: ./common/config/registry/config.yml</span><br><span class="line">Generated configuration file: ./common/config/db/env</span><br><span class="line">Generated configuration file: ./common/config/jobservice/env</span><br><span class="line">Generated configuration file: ./common/config/log/logrotate.conf</span><br><span class="line">Generated configuration file: ./common/config/jobservice/app.conf</span><br><span class="line">Generated configuration file: ./common/config/ui/app.conf</span><br><span class="line">Generated certificate, key file: ./common/config/ui/private_key.pem, cert file: ./common/config/registry/root.crt</span><br><span class="line">The configuration files are ready, please use docker-compose to start the service.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Step 3]: checking existing instance of Harbor ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Step 4]: starting Harbor ...</span><br><span class="line">Creating network &quot;harbor_harbor&quot; with the default driver</span><br><span class="line">Creating harbor-log ... done</span><br><span class="line">Creating harbor-db          ... done</span><br><span class="line">Creating registry           ... done</span><br><span class="line">Creating harbor-adminserver ... done</span><br><span class="line">Creating harbor-ui          ... done</span><br><span class="line">Creating nginx              ... done</span><br><span class="line">Creating harbor-jobservice  ... done</span><br><span class="line"></span><br><span class="line">✔ ----Harbor has been installed and started successfully.----</span><br><span class="line"></span><br><span class="line">Now you should be able to visit the admin portal at http://harbor.wxh.com.</span><br><span class="line">For more details, please visit https://github.com/vmware/harbor .</span><br><span class="line"></span><br><span class="line">[root@localhost harbor]#</span><br></pre></td></tr></table></figure><h1 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h1><h2 id="上传镜像"><a href="#上传镜像" class="headerlink" title="上传镜像"></a>上传镜像</h2><p>push的格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># docker push reg.yourdomain.com/myproject/myrepo:mytag</span><br></pre></td></tr></table></figure><p>注意首先需要登录： docker login domain_name</p><p><strong>步骤1：登录</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login domain_name</span><br></pre></td></tr></table></figure><p><strong>步骤2：将要上传的镜像打上标志</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># docker tag hello-world harbor.wxh.com/apps/hello-world</span><br><span class="line"></span><br><span class="line"># docker push harbor.wxh.com/apps/hello-world</span><br></pre></td></tr></table></figure><p>这种上传的话，默认是打上latest的标志</p><p>打上指定的标签使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker tag hello-world harbor.wxh.com/apps/hello-world:v1</span><br><span class="line">docker push harbor.wxh.com/apps/hello-world:v1</span><br></pre></td></tr></table></figure><h2 id="harbor镜像删除"><a href="#harbor镜像删除" class="headerlink" title="harbor镜像删除"></a>harbor镜像删除</h2><p>在web页面上删除镜像实际上只是执行的软删除，因为镜像存在很强的文件系统依赖关系</p><p>Harbor的UI界面上先删除镜像，但这个操作并没有删除磁盘上存放的镜像文件，只是镜像文件manifest的映射关系，还需要通过GC来删除。</p><p><strong>CAUTION: If both tag A and tag B refer to the same image, after deleting tag A, B will also get deleted. if you enabled content trust, you need to use notary command line tool to delete the tag’s signature before you delete an image.</strong></p><p>注意，如果标签A和B都指向都一个镜像（比如hello-world的2个镜像），那么删除一个之后，另外一个也会消失</p><p><strong>步骤1：删除镜像tag</strong></p><p>在web页面删除镜像或者使用api接口进行删除</p><p><strong>步骤2：停止Harbor</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose stop</span><br></pre></td></tr></table></figure><p><strong>步骤3：执行gc回收空间</strong></p><ul><li>通过带有–dry-run选项，可以<strong>查看</strong>到将要删除的镜像文件：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name gc --rm --volumes-from registry vmware/registry:2.6.2-photon garbage-collect --dry-run /etc/registry/config.yml1</span><br></pre></td></tr></table></figure><ul><li>不带–dry-run选项，直接<strong>执行删除</strong>：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name gc --rm --volumes-from registry vmware/registry:2.6.2-photon garbage-collect /etc/registry/config.yml1</span><br></pre></td></tr></table></figure><p><strong>步骤4：启动Harbor</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose start</span><br></pre></td></tr></table></figure><h2 id="镜像清理策略"><a href="#镜像清理策略" class="headerlink" title="镜像清理策略"></a>镜像清理策略</h2><p>需求：</p><ul><li>暂时不做删除 repo 的处理【这部分手动处理】</li><li>保留 60 天内创建的所有 tag ，在 60 天之前创建的 tag ，额外保留 10 个；</li><li>标签数只有 1的镜像，不清理</li><li>保留最后一次更新的tag，有些image比较稳定，有可能超过60天都没有修改，但是却一直在用</li><li>针对一些特殊的（比如每天5个tag的镜像，那么60天就有300个），这个单独特殊处理</li></ul><p>最终：</p><ul><li>针对 tag ：保留 60 天内创建的所有 tag ，在 60 天之前创建的 tag ，额外保留 10 个；</li><li>针对 repo ：暂时不做删除 repo 的处理（不太好确定 repo 是否还在使用，理论上讲每个 repo 下至少应该有一个 tag 是被需要的；若打算删除，则建议 repo 负责人自行进行删除操作）；</li><li>私有仓库暂时不做处理；</li></ul><p><strong>具体实现：</strong></p><ul><li>harbor 主要概念的关系：1 个 project -&gt; 每个 project 下具有 N 种不同的 repos &gt; 每个 repo 下具有 M 个 tags</li><li>project 有创建时间，但这个对我们的处理策略来说没有用处；</li><li>repo 有创建时间和 pull 时间，该 pull 时间对应 repo 下任意一个 tag ，最新一次，被拉取的那个时间</li><li>tag 有创建时间，但没有针对 tag 的 pull 时间（harbor 中定义的数据结构中不支持）；</li></ul><p>因此</p><ul><li>保留 60 天内的 tag”，这个根据 tag 的创建时间</li><li>“60 天之外的看 pull 的数量，关注 60 天之外是不是被 pull 过”，由于 pull 数量是针对 repo 整体的，无法对应到具体的 tag ，即在 API 层面无法方便的知道哪些 tag 最近被 pull 过（当然如果一定要做，就只能沟通分析 log 来搞，性价比不高），所以，只能根据 tag 创建时间的先后，“武断”的认为，后创建的 tag 应该是用户最想保留的；</li><li>“如果没有被 pull 过，则只保留最新 5 个 tag”，根据上一条的说明，某个 tag 是否被 pull 过是无法知道的，但目前可以做到根据 tag 的创建时间进行保留（满足保留最新 N 个需求）；</li></ul><h1 id="Harborclient-harbor客户端命令"><a href="#Harborclient-harbor客户端命令" class="headerlink" title="Harborclient-harbor客户端命令"></a>Harborclient-harbor客户端命令</h1><h2 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h2><ul><li><a href="https://github.com/int32bit/python-harborclient/blob/master/README.zh.md" target="_blank" rel="noopener">主页说明</a></li></ul><h2 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h2><h1 id="实战案例"><a href="#实战案例" class="headerlink" title="实战案例"></a>实战案例</h1><h2 id="harbor镜像复制"><a href="#harbor镜像复制" class="headerlink" title="harbor镜像复制"></a>harbor镜像复制</h2><h3 id="参考文献-2"><a href="#参考文献-2" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><a href="https://github.com/goharbor/harbor/blob/master/docs/user_guide.md" target="_blank" rel="noopener">官网文档</a></li></ul><h3 id="镜像复制概述"><a href="#镜像复制概述" class="headerlink" title="镜像复制概述"></a>镜像复制概述</h3><p>镜像复制有一些基本的概念需要知晓：</p><ul><li><p>该功能是<strong>面向项目</strong>的，系统管理员设置之后，匹配了过滤规则的项目，在触发了事先定义好的触发条件之后，这些项目就会被复制到远程的另一个仓库中。</p></li><li><p>如果在远程镜像仓库中，该项目不存在，那么就会自动创建这个项目</p></li><li><p>如果在远程仓库中，这个项目已经存在，并且配置的用户对这个项目没有写的权限，那么这个操作将会失败</p></li><li>因为网络的原因，在复制传输的过程中，可能会出现一些延迟。如果复制job是因为网络原因而导致失败的，那么这个任务将会在几分钟之后再次尝试，一直尝试，知道网络恢复正常。</li></ul><p><strong>注意：</strong></p><ul><li><p>因为api等原因，不同版本的镜像复制可能会失败，所以尽量使用同一个版本。</p></li><li><p>用户信息不会被复制</p></li></ul><h3 id="创建复制规则"><a href="#创建复制规则" class="headerlink" title="创建复制规则"></a>创建复制规则</h3><p>注意，在创建endpoint的时候，直接test connection是会报错：“harbor Failed to ping endpoint”</p><p>这是因为网络问题导致，在内网访问的时候，还需要额外的添加hosts文件，详见注意事项</p><p>注意：在创建完毕之后，默认不会执行同步，需要手动点击一下replication</p><h3 id="删除replication规则"><a href="#删除replication规则" class="headerlink" title="删除replication规则"></a>删除replication规则</h3><p>删除规则的时候有几个注意事项：</p><ul><li><p>Only rules which have no pending/running/retrying jobs can be deleted.</p><p>也就是说，只有当改规则下面没有正在运行或者等待运行或者正在重传的jobs时，才可以删除</p></li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>在创建endpoint的时候，如果事先没有在容器内存配置对端的地址，那么会报连接错误</p><p>官方的issues：<a href="https://github.com/goharbor/harbor/issues/2221" target="_blank" rel="noopener">https://github.com/goharbor/harbor/issues/2221</a></p><h2 id="harbor迁移"><a href="#harbor迁移" class="headerlink" title="harbor迁移"></a>harbor迁移</h2><h3 id="节点完全迁移"><a href="#节点完全迁移" class="headerlink" title="节点完全迁移"></a>节点完全迁移</h3><h3 id="存储迁移"><a href="#存储迁移" class="headerlink" title="存储迁移"></a>存储迁移</h3><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="证书问题"><a href="#证书问题" class="headerlink" title="证书问题"></a>证书问题</h2><p>证书生成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -sha256 -x509 -days 365 -nodes -newkey rsa:4096 -keyout  harbor.wxh.com.key -out harbor.wxh.com.crt</span><br></pre></td></tr></table></figure><p>注意，一些name的字段要配置成为配置文件中配置的域名，例如：harbor.wxh.com</p><p>生成之后，将证书存放到指定位置，然后修改配置文件指向这些证书文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">less harbor.cfg  | egrep -v &quot;^$|^#&quot;</span><br><span class="line">ssl_cert = /data/cert/harbor.wxh.com.crt</span><br><span class="line">ssl_cert_key = /data/cert/harbor.wxh.com.key</span><br></pre></td></tr></table></figure><p>然后需要对docker进行一些配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/docker/certs.d/harbor.wxh.com</span><br></pre></td></tr></table></figure><p>然后将上面的2个证书文件复制到这个目录之下，并将/data/cert/harbor.wxh.com.crt重命名为/data/cert/harbor.wxh.com.cert</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># pwd;ls</span><br><span class="line">/etc/docker/certs.d/harbor.wxh.com</span><br><span class="line">harbor.wxh.com.crt harbor.wxh.com.key</span><br><span class="line"></span><br><span class="line"># mv harbor.wxh.com.crt harbor.wxh.com.cert</span><br></pre></td></tr></table></figure><h2 id="文件创建为目录问题"><a href="#文件创建为目录问题" class="headerlink" title="文件创建为目录问题"></a>文件创建为目录问题</h2><p>/data1/harbor/data/secretkey  </p><p>在harbor安装之后以及运行过程中，secretkey为文件，而不是目录。</p><p>在一些异常情况可能会出现这个文件变成目录这种问题，当出现这种问题的时候，将该目录清空，然后重新安装即可</p><h1 id="harbor升级-支持在线gc"><a href="#harbor升级-支持在线gc" class="headerlink" title="harbor升级-支持在线gc"></a>harbor升级-支持在线gc</h1><h1 id="harbor高可用"><a href="#harbor高可用" class="headerlink" title="harbor高可用"></a>harbor高可用</h1><h2 id="架构规划"><a href="#架构规划" class="headerlink" title="架构规划"></a>架构规划</h2><p>整体架构如下：</p><p>首先单节点高可用，将有状态的东西分离出去，包括：</p><ul><li>Redis</li><li>db数据库</li><li>文件存储</li></ul><p>要注意session等问题,使用外部的Redis来实现共享session</p><p>在最前端使用LB做负载均衡</p><p>使用同一个db需要考虑的问题：</p><ul><li>复制策略是保存在数据库中的，2个harbor都能获取到去发起复制，会不会存在问题？</li></ul><p>也就是说，要不要每个harbor都使用同一个db</p><p>LB的检测机制，能否有比端口更好的方式</p><p>然后异地多活的每一个harbor集群通过分布式的方式组合起来，使用consul来记录信息</p>]]></content>
    
    <summary type="html">
    
      harbor镜像仓库实战
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="虚拟化" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="Docker+k8s" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E8%99%9A%E6%8B%9F%E5%8C%96/Docker-k8s/"/>
    
    
      <category term="harbor" scheme="http://yoursite.com/tags/harbor/"/>
    
  </entry>
  
  <entry>
    <title>python操作MySQL</title>
    <link href="http://yoursite.com/2018/12/13/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/Python/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/python%E6%93%8D%E4%BD%9CMySQL/"/>
    <id>http://yoursite.com/2018/12/13/IT科学技术知识体系结构-Linux运维方向/编程开发/Python/基础知识/python操作MySQL/</id>
    <published>2018-12-13T14:01:29.000Z</published>
    <updated>2018-12-13T14:01:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><a href="http://www.runoob.com/python/python-mysql.html" target="_blank" rel="noopener">菜鸟教程</a></li></ul><h1 id="实例案例"><a href="#实例案例" class="headerlink" title="实例案例"></a>实例案例</h1><p>在py3中，我们一般使用pymysql这个客户端去连接mysql数据库</p><h2 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h2><h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><h2 id="写入数据"><a href="#写入数据" class="headerlink" title="写入数据"></a>写入数据</h2>]]></content>
    
    <summary type="html">
    
      python操作MySQL
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="编程开发" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
      <category term="Python" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/Python/"/>
    
      <category term="基础知识" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/Python/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="python操作MySQL" scheme="http://yoursite.com/tags/python%E6%93%8D%E4%BD%9CMySQL/"/>
    
  </entry>
  
  <entry>
    <title>异地多活-多机房bind部署</title>
    <link href="http://yoursite.com/2018/12/12/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E5%8F%8A%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1/%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1/DNS%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0-bind/%E5%BC%82%E5%9C%B0%E5%A4%9A%E6%B4%BB-%E5%A4%9A%E6%9C%BA%E6%88%BFbind%E9%83%A8%E7%BD%B2/"/>
    <id>http://yoursite.com/2018/12/12/IT科学技术知识体系结构-Linux运维方向/网络知识及网络服务/网络服务/DNS服务实现-bind/异地多活-多机房bind部署/</id>
    <published>2018-12-12T06:20:18.000Z</published>
    <updated>2018-12-12T06:20:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>有关bind的一些部署，请查看我在该目录下的其他文章</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在实现多机房异地多活时，将服务分散到多个机房之后，一个核心的问题就是自建DNS，实现根据不同来源的ip段，返回相对应zone中的nginx服务端ip地址，只有这样才能</p><h1 id="需求概述"><a href="#需求概述" class="headerlink" title="需求概述"></a>需求概述</h1><p><strong>需要实现的功能如下：</strong></p><ul><li>DNS服务端采取主从结构，阿里云端为master，IDC机房端为slave，数据保持一致</li><li>阿里云VPC内网IP地址作为dns客户端访问时，返回VPC内机房的nginx服务器IP地址</li><li>IDC机房内网IP地址作为dns客户端访问时，返回IDC机房的nginx服务器IP地址</li><li>杭州的公网IP地址访问SLB的公网地址，上海的公网IP地址访问IDC机房的IP地址</li><li>总结：dns客户端请求到的永远是最距离最近服务器</li></ul><h1 id="bind部署需要明确的几个问题"><a href="#bind部署需要明确的几个问题" class="headerlink" title="bind部署需要明确的几个问题"></a>bind部署需要明确的几个问题</h1><ol><li><p>主从关系</p><p>暂定：阿里云为主，其他为从</p></li><li><p>服务器配置</p><ul><li>阿里云端需要重新购置机器吗？是的话可用区及配置？</li><li>IDC机房端的机器规划，挑一台common机器</li></ul></li><li><p>匹配ip转发规则</p><ul><li>根据阿里云网段、机房网段等不同网段进行匹配转发</li><li>dns客户端请求域名之后，分别返回阿里云nginx服务的地址，机房的nginx服务器对应的vip</li><li>因此，阿里云端的请求的域名就有2条记录，机房端就一条记录</li></ul></li><li><p>服务器端dns服务器配置</p><p>服务端预计配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># cat /etc/resolv.conf</span><br><span class="line">nameserver 机房1dns服务器ip </span><br><span class="line">nameserver 机房2dns服务器ip</span><br></pre></td></tr></table></figure><p>所有的dns客户端，在请求dns服务的时候 ，可能会连接到距离较远的服务器，但是获取记录之后将不会有影响。这里的第一次开销就保持这样吗？还是说这个也需要做优化，暂时没想到太好的方法</p></li><li><p>域名记录同步实现方式【这个目前是主要矛盾】</p><ul><li>数据源为dnspod</li><li>如何同步dnspod上的记录到自建dns（我的想法：每隔3/5分钟去调用dnspod的api获取结果，根据对应的公网ip，去判断是阿里云还是机房的记录，然后追加进对应的zone数据文件，并且增大复制偏移量的值）</li><li>那么这个时候就存在一个问题：当一个域名只存在一个地方的时候，其他地域的主机将无法访问，因为没有记录到对应的zone数据文件中。所以需要每个地域都配置并且注册到dnspod上</li></ul></li><li><p>主服务器有数据更新之后，触发通知的实现方式</p><p>我这边看下是否有更好的方式，没有的话暂时使用reload的方式</p></li><li><p>移动端配置？</p><p>移动端需要考虑吗？</p></li></ol><p>总结：</p><ul><li>阿里云走内网的slb</li></ul><p>并不是所有的域名都需要配置成为多机房，只有一些特定的域名需要配置成为多记录的方式</p><p>当只有一条记录的时候，我们所有的配置文件中都配置成为这一个记录</p><p>当有3条记录的时候，我们将数据分发到3个配置文件当中</p><p>当只有一条记录的时候，每个数据文件都记录这个内容，保证解析成功</p><h1 id="架构规划这里是拓扑图"><a href="#架构规划这里是拓扑图" class="headerlink" title="架构规划这里是拓扑图"></a>架构规划这里是拓扑图</h1><p>讲解</p><ol><li>主从结构</li><li>Bind 视图和zone功能，实现根据来源ip进行判断</li><li>现在的所有域名导入</li></ol><h1 id="部署实施"><a href="#部署实施" class="headerlink" title="部署实施"></a>部署实施</h1><h2 id="目录分层"><a href="#目录分层" class="headerlink" title="目录分层"></a>目录分层</h2><p>并不是所有的域名都需要根据地域不同返回不同的ip</p><p>我们根据不不同的地域创建了不同的zone目录，目录下有相同名称的zone数据文件</p><p>所以这个时候我们就可以进行匹配，当匹配到一个域名只有一个解析ip的时候，我们就把这条记录写入到3个不同的目录下的相同域名zone文件中</p><p>当匹配到有3个解析ip的时候，我们就对这个信息做处理，把对应的ip写入到对应的目录下的zone文件当中。</p><h2 id="zone配置"><a href="#zone配置" class="headerlink" title="zone配置"></a>zone配置</h2><h3 id="common"><a href="#common" class="headerlink" title="common"></a>common</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[named@host1 common]$ pwd;ls</span><br><span class="line">/home/named/bind/chroot/var/named/zone/common</span><br><span class="line">dwb.dgt.zone  dwd.gds-sh.zone  ecs.east1-b.zone  ecs.east1-e.zone  ecs.east1-g.zone</span><br></pre></td></tr></table></figure><p>zone文件配置模板：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[named@host1 common]$ cat dwd.gds-sh.zone</span><br><span class="line"></span><br><span class="line">$TTL      86400</span><br><span class="line">@            IN SOA  dwd.gds-sh.  admin.dwd.gds-sh. (</span><br><span class="line">                      1                ; serial</span><br><span class="line">                      3H                ; refresh</span><br><span class="line">                      15M                ; retry</span><br><span class="line">                      1W                ; expiry</span><br><span class="line">                      1D )              ; minimum</span><br><span class="line">        IN         NS     dns.dwd.gds-sh.</span><br><span class="line">dns     IN      A      10.11.4.11</span><br><span class="line">dns     IN      A      10.11.4.12</span><br><span class="line">dns     IN      A      10.10.10.72</span><br><span class="line">dns     IN      A      10.10.10.73</span><br><span class="line">dns     IN      A      172.24.139.193</span><br><span class="line">dns     IN      A      172.24.139.194</span><br><span class="line">lvs001     IN      A      10.11.0.11</span><br><span class="line">lvs002     IN      A      11.11.0.12</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>为了便于后期分析及拍错等操作，我们在每个zone配置文件中都添加上6条ns记录</li></ul><h1 id="数据写入"><a href="#数据写入" class="headerlink" title="数据写入"></a>数据写入</h1><p>因为dnspod上的数据都是公网地址</p><p>所以要进行匹配，匹配公网之后，替换为对应的内网负载均衡的ip地址</p><h1 id="优化进阶"><a href="#优化进阶" class="headerlink" title="优化进阶"></a>优化进阶</h1><p>最终实现目标是编写一个平台去管理，在当前时间节点下，先只能做到通过web框架去编写api实现下面这些操作</p><h2 id="主节点zone数据信息变更"><a href="#主节点zone数据信息变更" class="headerlink" title="主节点zone数据信息变更"></a>主节点zone数据信息变更</h2><h3 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h3><p>在master节点上启动django服务，提供api，当数据源有变化时，对端发送POST请求，参数为：</p><ul><li></li></ul><p>收到请求之后进行处理</p><p>注意：因为这个很重要，所以事先定义用户名和密码，生成token，然后才运行更新数据</p><p>写完之后，序列号更新为当天的时间，例如：2007041501</p><p>如果发现当天已经存在，那么在当前的序列号上+1</p><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>和写入一样，在master节点上启动django服务，提供api，当数据源有变化时，对端发送POST请求</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>和写入一样，在master节点上启动django服务，提供api，当数据源有变化时，对端发送delete请求</p><p>针对主机名的配置，我们不使用提供接口的方式，对主机名的配置，我们编写程序作为客户端，定时的去扫描数据源（阿里云或者jumpserver端）</p><h2 id="主从数据同步"><a href="#主从数据同步" class="headerlink" title="主从数据同步"></a>主从数据同步</h2><p>主从数据同步主要分为2种</p><ul><li>一种是主节点数据变化之后，主动的触发通知机制，发送通知消息给所以slave节点。</li><li>另一种是从节点定期去连接主节点，获取序列号信息，与当前的值进行比较，如果获取的更大则发起数据同步</li></ul><p>结合实际情况，我们选择第一种方式</p><p>那么，当数据变更之后，如何不适用rndc reload的方式</p><h2 id="序列号增长问题"><a href="#序列号增长问题" class="headerlink" title="序列号增长问题"></a>序列号增长问题</h2><p>因为序列号最多为10位数，所以使用传统的日期表示法</p><h2 id="dns服务稳定性问题"><a href="#dns服务稳定性问题" class="headerlink" title="dns服务稳定性问题"></a>dns服务稳定性问题</h2><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>主从节点两边的acl列表需要保持一致，这部分数据是不会同步的</p><p>会同步的只是zone数据</p><p>因此在启动之前，一定要确保主配置文件、acl列表、view配置等都保持一致</p><p>因为主的多个view会共用一些zone（主机名），所以这些zone，view配置中的路径可以一致</p><p>但是从上，每一个view之间不能存在这种通用文件。</p><p>slave的ip地址不止应该在named.conf主配置文件当中定义</p><p>在acl列表中也应该写明，不然会被refused</p><p>在master上：所有的acl列表需要包含slave节点ip</p><p>在salve节点上，所有的acl列表需要包含master节点的ip</p><p>不然：</p><ul><li>主从同步开始时，slave向master发送soa时会被拒绝</li><li>主修改之后发送notify，slave将会拒绝这个消息，因此来源ip不在acl中</li></ul><p>同时存在3个view，在主上修改了view3或view2，但是slave上收到的信息始终是view1的notify</p><p>在这里，只有shidc这个view能收到信息</p><h1 id="主节点-acl配置"><a href="#主节点-acl配置" class="headerlink" title="主节点 acl配置"></a>主节点 acl配置</h1><p>阿里云acl：</p><ul><li>vpc的网段 【必须有】</li><li>阿里云2台dns的ip</li></ul><p>杭州acl：</p><ul><li>杭州机房网段 【必须有】</li><li>杭州机房2台dns服务器的ip  允许这2台主机发送soa请求并给予响应</li></ul><p>上海机房acl</p><ul><li>上海机房网段 【必须有】</li><li>上海机房2台dns服务器</li></ul><h1 id="从节点acl配置"><a href="#从节点acl配置" class="headerlink" title="从节点acl配置"></a>从节点acl配置</h1><ul><li>vpc的网段 【必须有】</li><li>上海主节点的ip地址。为了主节点发送notify发送消息时不拒绝</li></ul><p>杭州acl：</p><ul><li>杭州机房网段 【必须有】</li><li>上海主节点的ip地址。为了主节点发送notify发送消息时不拒绝</li></ul><p>上海机房acl</p><ul><li>上海机房网段 【必须有】</li><li>上海主节点的ip地址。为了主节点发送notify发送消息时不拒绝</li></ul><p>因为从节点需要做备份，所以从节点上需要维护3个view，而不只是所在地域的这一个网段</p><h1 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h1><p>有变化的只是杭州idc和阿里云</p><p>测试客户端</p><p>hzidc: common008-dev 192.168.11.88</p><p>Aliyun:  common010-dev 192.168.11.76</p><p>shIDC：common007-dev  192.168.11.84 </p><h1 id="notify配置"><a href="#notify配置" class="headerlink" title="notify配置"></a>notify配置</h1><p>注意，notify的配置需要写在每一个zone里面，不能写在主配置文件当中</p><p>master发送的notify信息中不能携带view信息，slave接收的时候，根据本身的view的配置进行匹配</p><p>如果一个网段存在于多个view当中，那么只有第一个生效，也就是说，如果主节点更新的是view3的数据，如果view1收到之后，那么将会更新view1中的zone信息</p><p>又因为master的ip必须存在于acl中（需要允许master发送的notify，不设置的话主节点发送的消息会被拒绝），</p><p>但是因为acl是从上到下匹配的</p><p>因此slave只能有一个view，也就是说除了主上维护的是全量的数据，其他从节点维护的只是一个view的数据</p><p>也就是说，如果存在同一个ip，那么不管配置几个view，同时生效的只会有一个view</p><h1 id="从节点直接显示文本"><a href="#从节点直接显示文本" class="headerlink" title="从节点直接显示文本"></a>从节点直接显示文本</h1><h1 id="多view主从同步问题"><a href="#多view主从同步问题" class="headerlink" title="多view主从同步问题"></a>多view主从同步问题</h1><p>多个view的主备同步主要是是主备之间每个view都使用共享key进行消息的签名。master的配置和之前的稍微有点小的改动</p><p>大家经常使用bind的时候是划分不同的view的，因为每个view的zone需要单独修改，所以人肉修改是比较麻烦的。这个时候可以使用nsupdate进行批量的操作。只要注意每个view使用正确的记录就行。</p><p>每个view指定一个对应key进行能更新</p><p>最终的实现目的：主从上的数据完全一致，也就是</p><p>参考文献：</p><ul><li><a href="https://blog.gnuers.org/?p=896" target="_blank" rel="noopener">bind多个view的主备同步</a></li></ul><p>#!/bin/bash<br>cd /home/appdeploy/deploy/apps/fortune-unit-service<br>/usr/bin/nohup /usr/local/jdk/bin/java -Dproject.name=fortune-unit-service -verbose:gc -Xloggc:/home/appdeploy/deploy/logs/fortune-unit-service/gc.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/home/appdeploy/deploy/logs/fortune-unit-service/java.hprof -XX:ErrorFile=/home/appdeploy/deploy/logs/fortune-unit-service/java_error.log -Dlogging.file.path=”/home/appdeploy/deploy/logs/fortune-unit-service” -Dspring.cloud.config.label=aliyun.hz.unit1 -Dspring.cloud.config.index=aliyun.hz.unit1 -Dlogging.console.level=off -Dzone=unit1 -Dregion=aliyun.hz -server -Xms3000m -Xmx3000m -XX:MaxNewSize=512m -XX:PermSize=512M -XX:MaxPermSize=512m -XX:ThreadStackSize=512 -XX:-OmitStackTraceInFastThrow -jar fortune-unit-service.jar –spring.profiles.active=production &gt;&gt; /dev/null 2&gt;&amp;1 &amp;</p><p>select h.name as hostname,SUM(tre.value_min) as mem_avail<br>from hosts h,items i,trends_uint tre<br>where<br>h.name like ‘redis%’<br>and  h.status = ‘0’<br>and h.hostid= i.hostid<br>and i.itemid= tre.itemid<br>and i.name = “Available memory”<br>and tre.clock BETWEEN 1545809182 and 1545812782<br>group by hostname,total</p>]]></content>
    
    <summary type="html">
    
      异地多活-多机房bind部署
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="网络知识及网络服务" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E5%8F%8A%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="网络服务" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E5%8F%8A%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1/%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="DNS服务实现-bind" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E5%8F%8A%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1/%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1/DNS%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0-bind/"/>
    
    
      <category term="bind" scheme="http://yoursite.com/tags/bind/"/>
    
  </entry>
  
</feed>
