<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Watchmen1992&#39;s Blog</title>
  
  <subtitle>锦瑟年华当与书香为度，是为不负天地人生。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-03T08:29:10.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>XiaoHua WANG</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>磁盘性能测试</title>
    <link href="http://yoursite.com/2018/06/03/%E7%A3%81%E7%9B%98%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2018/06/03/磁盘性能测试/</id>
    <published>2018-06-03T08:29:10.000Z</published>
    <updated>2018-06-03T08:29:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>文献资料：</p><ul><li>[阿里云-ECS之-块存储性能]</li></ul><h1 id="性能衡量指标"><a href="#性能衡量指标" class="headerlink" title="性能衡量指标"></a>性能衡量指标</h1><p>衡量存储产品的性能指标主要包括：</p><ul><li><p>IOPS </p></li><li><p>吞吐量</p></li><li><p>访问时延。</p></li></ul><p>IOPS和Throughput吞吐量两个参数是衡量存储性能的主要指标，两者在不同的情况下都能表示存储的性能状况，但应用的场景不尽相同。同时，两者之间也存在着相互的联系</p><h2 id="IOPS"><a href="#IOPS" class="headerlink" title="IOPS"></a>IOPS</h2><p>IOPS是Input/Output Operations per Second，即每秒能处理的I/O个数（也就是在一秒内，磁盘进行多少次 I/O 读写），用于表示块存储处理读写（输出/输入）的能力。<font color="red"><strong><code>如果要部署事务密集型应用，需要关注IOPS性能</code></strong></font>。</p><p><strong>ps:</strong>一次完整的读写（有读有写），才算一次</p><p>最普遍的IOPS性能指标是顺序操作和随机操作，如下表所示。</p><p><img src="http://picture.watchmen.xin/ECS/iops.png" alt="iops"></p><p>IOPS又可细分为如下几个指标：</p><ul><li>Toatal IOPS，混合读写和顺序随机I/O负载情况下的磁盘IOPS，这个与实际I/O情况最为相符，大多数应用关注此指标。</li><li>Random Read IOPS，100%随机读负载情况下的IOPS。</li><li>Random Write IOPS，100%随机写负载情况下的IOPS。</li><li>Sequential Read IOPS，100%顺序读负载情况下的IOPS。</li><li>Sequential Write IOPS，100%顺序写负载情况下的IOPS。</li></ul><h2 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h2><p>吞吐量是指单位时间内可以成功传输的数据数量。</p><p><font color="red"><strong><code>如果要部署大量顺序读写的应用，需要关注吞吐量</code></strong></font>。</p><p>磁盘的吞吐量，也就是每秒磁盘 I/O 的流量，即磁盘写入加上读出的数据的大小。</p><p><strong>IOPS 与吞吐量的关系</strong></p><blockquote><p>每秒 I/O 吞吐量＝ IOPS* 平均 I/O SIZE。</p><p>从公式可以看出： I/O SIZE 越大，IOPS 越高，那么每秒 I/O 的吞吐量就越高。因此，我们会认为 IOPS 和吞吐量的数值越高越好。实际上，对于一个磁盘来讲，这两个参数均有其最大值，而且这两个参数也存在着一定的关系。</p></blockquote><h2 id="访问延迟"><a href="#访问延迟" class="headerlink" title="访问延迟"></a>访问延迟</h2><p>访问时延是指块存储处理一个I/O需要的时间。</p><p>如果您的应用对时延比较敏感，比如数据库（过高的时延会导致应用报错），建议您使用固态硬盘介质的SSD云盘、SSD共享块存储或本地SSD盘类产品。</p><p>如果您的应用更偏重存储吞吐能力，对时延不太敏感，比如Hadoop离线计算等吞吐密集型应用，建议您使用本地HDD盘类产品，如d1或d1ne大数据型实例。</p><h1 id="云盘性能"><a href="#云盘性能" class="headerlink" title="云盘性能"></a>云盘性能</h1><p>这里以目前主流的阿里云云盘系列产品进行说明</p><h2 id="云盘性能-1"><a href="#云盘性能-1" class="headerlink" title="云盘性能"></a>云盘性能</h2><p>三种云盘的性能对比如下表所示。</p><p><img src="http://picture.watchmen.xin/ECS/compare1.png" alt="iops"></p><p><strong>注意：</strong></p><blockquote><p>SSD云盘的性能因数据块大小而异，数据块越小，吞吐量越小，IOPS越高，如下表所示。只有挂载到I/O优化的实例时，SSD云盘才能获得期望的IOPS性能。挂载到非I/O优化的实例时，SSD云盘无法获得期望的IOPS性能。</p></blockquote><p><img src="http://picture.watchmen.xin/ECS/ssdiops.png" alt="iops"></p><p><strong>单盘性能计算公式说明：</strong></p><ul><li>以单块SSD云盘最大IOPS计算公式为例说明：起步1200 IOPS，每GiB增加30 IOPS，最高20000 IOPS。</li><li>以单块SSD云盘最大吞吐量计算公式为例说明：起步80 MBps，每GiB增加0.5 MBps，上限为 300 MBps的吞吐量。</li></ul><p><strong>不同云盘的单路访问时延如下：</strong></p><ul><li>SSD云盘：0.5−2 ms</li><li>高效云盘：1−3 ms</li><li>普通云盘：5−10 ms</li></ul><h1 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h1><p>根据ECS实例的操作系统不同，您可以使用不同的工具测试块存储性能：</p><ul><li>Linux实例：可以使用DD、fio或sysbench等工具测试块存储性能。</li><li>Windows实例：可以使用fio、Iometer等工具测试块存储性能。</li></ul><p>本文以Linux实例和fio为例，说明如何使用fio测试块存储性能。在进行测试前，请确保块存储已经4 KiB对齐。</p><p><strong>警告：</strong></p><blockquote><p>测试裸盘可以获得真实的块存储盘性能，但直接测试裸盘会破坏文件系统结构，请在测试前提前做好数据备份。建议您只在新购无数据的ECS实例上使用工具测试块存储性能，避免造成数据丢失。</p></blockquote><p><strong>测试随机写IOPS，运行以下命令：</strong></p><pre><code>fio -direct=1 -iodepth=128 -rw=randwrite -ioengine=libaio -bs=4k -size=1G -numjobs=1 -runtime=1000 -group_reporting -filename=iotest -name=Rand_Write_Testing</code></pre><p><strong>测试随机读IOPS，运行以下命令：</strong></p><pre><code>fio -direct=1 -iodepth=128 -rw=randread -ioengine=libaio -bs=4k -size=1G -numjobs=1 -runtime=1000 -group_reporting -filename=iotest -name=Rand_Read_Testing</code></pre><p><strong>测试顺序写吞吐量，运行以下命令：</strong></p><pre><code>fio -direct=1 -iodepth=64 -rw=write -ioengine=libaio -bs=1024k -size=1G -numjobs=1 -runtime=1000 -group_reporting -filename=iotest -name=Write_PPS_Testing</code></pre><p><strong>测试顺序读吞吐量，运行以下命令：</strong></p><pre><code>fio -direct=1 -iodepth=64 -rw=read -ioengine=libaio -bs=1024k -size=1G -numjobs=1 -runtime=1000 -group_reporting -filename=iotest -name=Read_PPS_Testing</code></pre><p>下表以测试随机写IOPS的命令为例，说明命令中各种参数的含义。</p><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">direct=1</td><td style="text-align:left">表示测试时忽略I/O缓存，数据直写。</td></tr><tr><td style="text-align:left">-iodepth=128</td><td style="text-align:left">表示使用AIO时，同时发出I/O数的上限为128。</td></tr><tr><td style="text-align:left">-rw=randwrite</td><td style="text-align:left">表示测试时的读写策略为随机写（random writes）。作其它测试时可以设置为：<br> - randread（随机读random reads）<br>- read（顺序读sequential reads）<br>- write（顺序写sequential writes）<br>- randrw（混合随机读写mixed random reads and writes）。</td></tr><tr><td style="text-align:left">-ioengine=libaio</td><td style="text-align:left">表示测试方式为libaio（Linux AIO，异步I/O）。应用使用I/O通常有二种方式：同步和异步。同步的I/O一次只能发出一个I/O请求，等待内核完成才返回。这样对于单个线程iodepth总是小于1，但是可以透过多个线程并发执行来解决。通常会用 16−32 根线程同时工作将iodepth塞满。异步则通常使用libaio这样的方式一次提交一批I/O请求，然后等待一批的完成，减少交互的次数，会更有效率。</td></tr><tr><td style="text-align:left">-bs=4k</td><td style="text-align:left">表示单次I/O的块文件大小为4k。未指定该参数时的默认大小也是4k。测试IOPS时，建议将<strong><code>bs</code></strong>设置为一个比较小的值，如本示例中的4k。测试吞吐量时，建议将<strong><code>bs</code></strong>设置为一个较大的值，如本示例中的1024k。</td></tr><tr><td style="text-align:left">-size=1G</td><td style="text-align:left">表示测试文件大小为1G。</td></tr><tr><td style="text-align:left">-numjobs=1</td><td style="text-align:left">表示测试线程数为1。</td></tr><tr><td style="text-align:left">-runtime=1000</td><td style="text-align:left">表示测试时间为1000秒。如果未配置，则持续将前述-size指定大小的文件，以每次-bs值为分块大小写完</td></tr><tr><td style="text-align:left">-group_reporting</td><td style="text-align:left">表示测试结果里汇总每个进程的统计信息，而非以不同job汇总展示信息。</td></tr><tr><td style="text-align:left">-filename=iotest</td><td style="text-align:left">指定测试文件的名称，比如iotest。测试裸盘可以获得真实的磁盘性能，但直接测试裸盘会破坏文件系统结构，请在测试前提前做好数据备份。</td></tr><tr><td style="text-align:left">-name=Rand_Write_Testing</td><td style="text-align:left">表示测试任务名称为Rand_Write_Testing，可以随意设定。</td></tr></tbody></table><p>以下以一块800 GiB SSD云盘随机读IOPS性能的测试结果为例，说明如何理解fio测试结果。</p><pre><code>Rand_Read_Testing: (g=0): rw=randread, bs=4K-4K/4K-4K/4K-4K, ioengine=libaio, iodepth=128fio-2.2.8Starting 1 processJobs: 1 (f=1): [r(1)] [21.4% done] [80000KB/0KB/0KB /s] [20.0K/0/0 iops] [eta 00Jobs: 1 (f=1): [r(1)] [28.6% done] [80000KB/0KB/0KB /s] [20.0K/0/0 iops] [eta 00Jobs: 1 (f=1): [r(1)] [35.7% done] [80000KB/0KB/0KB /s] [20.0K/0/0 iops] [eta 00Jobs: 1 (f=1): [r(1)] [42.9% done] [80004KB/0KB/0KB /s] [20.1K/0/0 iops] [eta 00Jobs: 1 (f=1): [r(1)] [50.0% done] [80004KB/0KB/0KB /s] [20.1K/0/0 iops] [eta 00Jobs: 1 (f=1): [r(1)] [57.1% done] [80000KB/0KB/0KB /s] [20.0K/0/0 iops] [eta 00Jobs: 1 (f=1): [r(1)] [64.3% done] [80144KB/0KB/0KB /s] [20.4K/0/0 iops] [eta 00Jobs: 1 (f=1): [r(1)] [71.4% done] [80388KB/0KB/0KB /s] [20.1K/0/0 iops] [eta 00Jobs: 1 (f=1): [r(1)] [78.6% done] [80232KB/0KB/0KB /s] [20.6K/0/0 iops] [eta 00Jobs: 1 (f=1): [r(1)] [85.7% done] [80260KB/0KB/0KB /s] [20.7K/0/0 iops] [eta 00Jobs: 1 (f=1): [r(1)] [92.9% done] [80016KB/0KB/0KB /s] [20.4K/0/0 iops] [eta 00Jobs: 1 (f=1): [r(1)] [100.0% done] [80576KB/0KB/0KB /s] [20.2K/0/0 iops] [eta 00m:00s]Rand_Read_Testing: (groupid=0, jobs=1): err= 0: pid=9845: Tue Sep 26 20:21:01 2017  read : io=1024.0MB, bw=80505KB/s, iops=20126, runt= 13025msec    slat (usec): min=1, max=674, avg= 4.09, stdev= 6.11    clat (usec): min=172, max=82992, avg=6353.90, stdev=19137.18     lat (usec): min=175, max=82994, avg=6358.28, stdev=19137.16    clat percentiles (usec):     |  1.00th=[  454],  5.00th=[  668], 10.00th=[  812], 20.00th=[  996],     | 30.00th=[ 1128], 40.00th=[ 1256], 50.00th=[ 1368], 60.00th=[ 1480],     | 70.00th=[ 1624], 80.00th=[ 1816], 90.00th=[ 2192], 95.00th=[79360],     | 99.00th=[81408], 99.50th=[81408], 99.90th=[82432], 99.95th=[82432],     | 99.99th=[82432]    bw (KB  /s): min=79530, max=81840, per=99.45%, avg=80064.69, stdev=463.90    lat (usec) : 250=0.04%, 500=1.49%, 750=6.08%, 1000=12.81%    lat (msec) : 2=65.86%, 4=6.84%, 10=0.49%, 20=0.04%, 100=6.35%  cpu          : usr=3.19%, sys=10.95%, ctx=23746, majf=0, minf=160  IO depths    : 1=0.1%, 2=0.1%, 4=0.1%, 8=0.1%, 16=0.1%, 32=0.1%, &gt;=64=100.0%     submit    : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0%     complete  : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.1%     issued    : total=r=262144/w=0/d=0, short=r=0/w=0/d=0, drop=r=0/w=0/d=0     latency   : target=0, window=0, percentile=100.00%, depth=128Run status group 0 (all jobs):   READ: io=1024.0MB, aggrb=80504KB/s, minb=80504KB/s, maxb=80504KB/s, mint=13025msec, maxt=13025msecDisk stats (read/write):  vdb: ios=258422/0, merge=0/0, ticks=1625844/0, in_queue=1625990, util=99.30%</code></pre><p>输出结果中，主要关注以下这行内容：</p><pre><code>read : io=1024.0MB, bw=80505KB/s, iops=20126, runt= 13025msec</code></pre><p>这表示fio做了1 GiB I/O，速率约为80 MiB/s，总IOPS为20126，运行时间为13秒。由IOPS值可知，该SSD云盘的IOPS性能为 20126，而根据公式计算的数值为：</p><pre><code>min{1200+30 * 容量, 20000} = min{1200+30 * 800, 20000} = 20000</code></pre><p>测试结果与公式计算结果相近。</p>]]></content>
    
    <summary type="html">
    
      磁盘性能测试
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="服务器硬件" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A1%AC%E4%BB%B6/"/>
    
      <category term="磁盘" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A1%AC%E4%BB%B6/%E7%A3%81%E7%9B%98/"/>
    
    
      <category term="磁盘性能测试" scheme="http://yoursite.com/tags/%E7%A3%81%E7%9B%98%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>ECS从入门到实践</title>
    <link href="http://yoursite.com/2018/06/03/ECS%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2018/06/03/ECS从入门到实践/</id>
    <published>2018-06-03T02:33:20.000Z</published>
    <updated>2018-06-03T02:33:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考文献：</p><ul><li><a href="https://help.aliyun.com/product/25365.html?spm=a2c4g.750001.2.1.X5t4pr" target="_blank" rel="noopener">阿里云官方文档</a></li></ul><h1 id="ECS基础知识"><a href="#ECS基础知识" class="headerlink" title="ECS基础知识"></a>ECS基础知识</h1><h2 id="ECS-概述"><a href="#ECS-概述" class="headerlink" title="ECS 概述"></a>ECS 概述</h2><p>云服务器Elastic Compute Service（ECS）是阿里云提供的一种基础云计算服务。使用云服务器ECS就像使用水、电、煤气等资源一样便捷、高效。您无需提前采购硬件设备，而是根据业务需要，随时创建所需数量的云服务器ECS实例。在使用过程中，随着业务的扩展，您可以随时扩容磁盘、增加带宽。如果不再需要云服务器，也能随时释放资源，节省费用。</p><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><p>在使用ECS之前，需要了解以下概念</p><ul><li>地域和可用区：是指ECS资源所在的物理位置。</li></ul><ul><li>实例：等同于一台虚拟机，包含CPU、内存、操作系统、网络、磁盘等最基础的计算组件。</li></ul><ul><li>实例规格：是指实例的不同配置，包括vCPU核数、内存、网络性能等。实例规格决定了ECS实例的计算和存储能力。</li></ul><ul><li>镜像：是指ECS实例运行环境的模板，一般包括操作系统和预装的软件。操作系统支持多种Linux发行版本和不同的Windows版本。</li></ul><ul><li>块存储：包括基于分布式存储架构的 弹性块存储，以及基于物理机本地硬盘的 本地存储。</li></ul><ul><li>快照：是指某一个时间点上一块弹性块存储的数据备份。</li></ul><ul><li>网络类型：包括</li></ul><pre><code>- 专有网络：基于阿里云构建的一个隔离的网络环境，专有网络之间逻辑上彻底隔离。更多信息，请参考专有网络VPC。- 经典网络：统一部署在阿里云公共基础内，规划和管理由阿里云负责。</code></pre><ul><li>安全组：由同一地域内具有相同保护需求并相互信任的实例组成，是一种虚拟防火墙，用于设置不同实例的网络访问控制。</li></ul><ul><li>SSH密钥对：远程登录Linux ECS实例的验证方式，阿里云存储公钥，您需要自己妥善保管私钥。您也可以选择使用 用户名密码 验证登录Linux ECS实例。</li></ul><ul><li>IP地址：包括用于 内网通信 的内网IP或私有IP，以及用于访问Internet的公网IP。</li></ul><ul><li>弹性公网IP：可以与实例反复绑定或解绑的静态公网IP地址。</li></ul><ul><li>云服务器管理控制台：是指ECS的Web操作界面。</li></ul><h3 id="ECS的优势"><a href="#ECS的优势" class="headerlink" title="ECS的优势"></a>ECS的优势</h3><p>与普通的IDC机房或服务器厂商相比，阿里云提供的云服务器ECS具有以下优势：</p><ul><li>高可用性</li></ul><ul><li>安全</li></ul><ul><li>弹性</li></ul><p><strong>高可用性</strong></p><p>相较于普通的IDC机房以及服务器厂商，阿里云会使用更严格的IDC标准、服务器准入标准以及运维标准，以保证云计算整个基础框架的高可用性、数据的可靠性以及云服务器的高可用性。</p><p>在此基础之上，阿里云所提供的每个地域都存在多可用区。当您需要更高的可用性时，可以利用阿里云的多可用区搭建自己的主备服务或者双活服务。对于面向金融领域的两地三中心的解决方案，您也可以通过<strong><code>多地域和多可用区</code></strong>搭建出更高的可用性服务。其中包括容灾、备份等服务，阿里云都有非常成熟的解决方案。</p><p>在阿里云的整个框架下，这些服务可以非常平滑地进行切换，相关的信息可以在阿里云行业解决方案中找到。无论是两地三中心，还是电子商务以及视频服务等，都可以在阿里云找到对应的行业解决方案。</p><p>此外，阿里云提供了如下三项支持：</p><ul><li>提升可用性的产品和服务，包括云服务器、负载均衡、多备份数据库服务以及数据迁移服务DTS等。</li></ul><ul><li>行业合作伙伴以及生态合作伙伴，帮助您完成更高、更稳定的架构，并且保证服务的永续性。</li></ul><ul><li>多种多样的培训服务，让您从业务端到底层的基础服务端，在整条链路上实现高可用。</li></ul><p><strong>安全性</strong></p><p>选择了云计算，最关心的问题就是云计算的安全与稳定。阿里云近期通过了很多的国际安全标准认证，包括ISO27001、MTCS等，这些所有的安全合规都要求对于用户数据的私密性、用户信息的私密性以及用户隐私的保护都有非常严格的要求。对于云计算，推荐您使用阿里云专有网络。</p><ul><li>在阿里云专有网络之上，可以产生更多的业务可能性。您只需进行简单配置，就可在自己的业务环境下，与全球所有机房进行串接，从而提高了业务的灵活性、稳定性以及业务的可发展性。</li></ul><ul><li>对于原来拥有自建的IDC机房，也不会产生问题。阿里云专有网络可以拉专线到原有的IDC机房，形成混合云的架构。阿里云可以提供各种混合云的解决方案和非常多的网络产品，形成强大的网络功能，让您的业务更加灵活。结合阿里云的生态，您可以在云上发展出意想不到的业务生态。</li></ul><ul><li><p>阿里云专有网络更加稳定和安全。</p><ul><li><p>稳定性：业务搭建在专有网络上，而网络的基础设施将会不停进化，使您每天都拥有更新的网络架构以及更新的网络功能，使得您的业务永远保持在一个稳定的状态。专有网络允许您自由地分割、配置和管理自己的网络。</p></li><li><p>安全性：面对互联网上不断的攻击流量，专有网络天然就具备流量隔离以及攻击隔离的功能。业务搭建在专有网络上后，专有网络会为业务筑起第一道防线。</p></li></ul></li></ul><p>总之，专有网络提供了稳定、安全、快速交付、自主可控的网络环境。对于传统行业以及未接触到云计算的行业和企业而言，借助专有网络混合云的能力和混合云的架构，它们将享受云计算所带来的技术红利。</p><p><strong>弹性</strong></p><p>云计算最大的优势就在于弹性。目前，阿里云已拥有在数分钟内开出一家中型互联网公司所需要的IT资源的能力，这就能够保证大部分企业在云上所构建的业务都能够承受巨大的业务量压力。</p><ul><li><p>计算弹性</p><ul><li><p>纵向弹性，即单个服务器的配置变更。传统IDC模式下，很难做到对单个服务器进行变更配置。而对于阿里云，当您购买了云服务器或者存储的容量后，可以根据业务量的增长或者减少自由变更自己的配置。关于纵向弹性的具体应用，详情请参考 升降配。</p></li><li><p>横向弹性。对于游戏应用或直播平台出现的高峰期，若在传统的IDC模式下，您根本无法立即准备资源；而云计算却可以使用弹性的方式帮助客户度过这样的高峰。当业务高峰消失时，您可以将多余的资源释放掉，以减少业务成本的开支。利用横向的扩展和缩减，配合阿里云的弹性伸缩，完全可以做到定时定量的伸缩，或者按照业务的负载进行伸缩。关于横向弹性的具体应用，详情请参考 弹性伸缩。</p></li><li><p>存储弹性。阿里云拥有很强的存储弹性。当存储量增多时，对于传统的IDC方案，您只能不断去增加服务器，而这样扩展的服务器数量是有限的。在云计算模式下，将为您提供海量的存储，当您需要时可以直接购买，为存储提供最大保障。关于存储弹性的具体应用，详情请参考磁盘扩容。</p></li><li><p>网络弹性。云上的网络也具有非常大的灵活性。只要您购买了阿里云的专有网络，那么所有的网络配置与线下IDC机房配置可以是完全相同的，并且可以拥有更多的可能性。可以实现各个机房之间的互联互通，各个机房之间的安全域隔离，对于专有网络内所有的网络配置和规划都会非常灵活。关于网络弹性的具体应用，详情请参考专有网络。</p></li></ul></li></ul><p>总之，对于阿里云的弹性而言，是计算的弹性、存储的弹性、网络的弹性以及您对于业务架构重新规划的弹性。您可以使用任意方式去组合自己的业务，阿里云都能够满足您的需求。</p><h2 id="块存储"><a href="#块存储" class="headerlink" title="块存储"></a>块存储</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>阿里云为您的云服务器ECS提供了丰富的块存储产品类型，包括基于分布式存储架构的弹性块存储产品，以及基于物理机本地硬盘的本地存储产品。其中：</p><p>弹性块存储，是阿里云为云服务器ECS提供的数据块级别的随机存储，具有低时延、持久性、高可靠等性能，采用 三副本的分布式机制，为ECS实例提供99.9999999%的数据可靠性保证。可以随时创建或释放，也可以随时扩容。</p><p>本地存储，也称为本地盘，是指挂载在ECS云服务器所在物理机（宿主机）上的本地硬盘，是一种临时块存储。是专为对存储I/O性能有极高要求的业务场景而设计的存储产品。该类存储为实例提供块级别的数据访问能力，具有低时延、高随机IOPS、高吞吐量的I/O能力。</p><h3 id="块存储、对象存储、文件存储的区别"><a href="#块存储、对象存储、文件存储的区别" class="headerlink" title="块存储、对象存储、文件存储的区别"></a>块存储、对象存储、文件存储的区别</h3><p>阿里云目前主要提供三种数据存储产品，分别是块存储、文件存储（NAS）和 对象存储（OSS）。</p><p>三者区别如下：</p><ul><li>块存储：是阿里云为ECS云服务器提供的块设备，高性能、低时延，满足随机读写，可以像使用物理硬盘一样格式化建文件系统使用。可用于大部分通用业务场景下的数据存储。</li></ul><ul><li>对象存储（OSS，Object Storage Service）：可以理解是一个海量的存储空间，最适合存储互联网上产生的图片、短视频、音频等海量非结构化数据，您可以通过API在任何时间、任何地点访问对象存储里的数据。常用于互联网业务网站搭建、动静资源分离、CDN加速等业务场景。</li></ul><ul><li>文件存储（NAS，Network Attached Storage）：类似于对象存储，适合存储非结构化的海量数据。但是您需要通过标准的文件访问协议访问这些数据，比如 Linux 系统需要使用Network File System (NFS)协议，Windows系统需要使用Common Internet File System (CIFS)协议。您可以通过设置权限让不同的客户端同时访问同一份文件。文件存储适合企业部门间文件共享、广电非线编、高性能计算、Docker等业务场景。</li></ul><h2 id="块存储性能"><a href="#块存储性能" class="headerlink" title="块存储性能"></a>块存储性能</h2><p>衡量块存储产品的性能指标主要包括：<strong><code>IOPS、吞吐量和访问时延。</code></strong></p><p><strong>IOPS</strong></p><p>IOPS是Input/Output Operations per Second，即每秒能处理的I/O个数，用于表示块存储处理读写（输出/输入）的能力。如果要部署事务密集型应用，需要关注IOPS性能。</p><p>最普遍的IOPS性能指标是顺序操作和随机操作，如下表所示。</p><p><img src="http://picture.watchmen.xin/ECS/iops.png" alt="iops"></p><p><strong>吞吐量</strong></p><p>吞吐量是指单位时间内可以成功传输的数据数量。</p><p>如果要部署大量顺序读写的应用，需要关注吞吐量。</p><p><strong>访问延迟</strong></p><p>访问时延是指块存储处理一个I/O需要的时间。</p><p>如果您的应用对时延比较敏感，比如数据库（过高的时延会导致应用报错），建议您使用固态硬盘介质的SSD云盘、SSD共享块存储或本地SSD盘类产品。</p><p>如果您的应用更偏重存储吞吐能力，对时延不太敏感，比如Hadoop离线计算等吞吐密集型应用，建议您使用本地HDD盘类产品，如d1或d1ne大数据型实例。</p><p>不同云盘之间的性能测试对比请看文档：<a href="https://help.aliyun.com/document_detail/25382.html?spm=a2c4g.11186623.6.552.L3qKVk" target="_blank" rel="noopener">云盘性能对比部分</a></p><h3 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h3><p>根据ECS实例的操作系统不同，您可以使用不同的工具测试块存储性能：</p><ul><li><p>Linux实例：可以使用DD、fio或sysbench等工具测试块存储性能。</p></li><li><p>Windows实例：可以使用fio、Iometer等工具测试块存储性能。</p></li></ul><p>这里以Linux实例和fio为例，说明如何使用fio测试块存储性能。在进行测试前，请确保块存储已经4 KiB对齐。</p><blockquote><p><strong>警告：</strong><br>测试裸盘可以获得真实的块存储盘性能，但直接测试裸盘会破坏文件系统结构，请在测试前提前做好数据备份。建议您只在新购无数据的ECS实例上使用工具测试块存储性能，避免造成数据丢失。</p></blockquote>]]></content>
    
    <summary type="html">
    
      ECS从入门到实践
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="公有云产品" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%85%AC%E6%9C%89%E4%BA%91%E4%BA%A7%E5%93%81/"/>
    
      <category term="阿里云" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%85%AC%E6%9C%89%E4%BA%91%E4%BA%A7%E5%93%81/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
      <category term="ECS" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%85%AC%E6%9C%89%E4%BA%91%E4%BA%A7%E5%93%81/%E9%98%BF%E9%87%8C%E4%BA%91/ECS/"/>
    
    
      <category term="ECS" scheme="http://yoursite.com/tags/ECS/"/>
    
  </entry>
  
  <entry>
    <title>带宽计算方法及B与b说明</title>
    <link href="http://yoursite.com/2018/05/30/%E5%B8%A6%E5%AE%BD%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95%E5%8F%8AB%E4%B8%8Eb%E8%AF%B4%E6%98%8E/"/>
    <id>http://yoursite.com/2018/05/30/带宽计算方法及B与b说明/</id>
    <published>2018-05-30T12:55:38.000Z</published>
    <updated>2018-05-30T12:55:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考文献：</p><ul><li><a href="https://blog.csdn.net/tianlesoftware/article/details/6909042" target="_blank" rel="noopener">带宽计算方法及大B与小b说明</a></li></ul><h1 id="bit与Byte的关系"><a href="#bit与Byte的关系" class="headerlink" title="bit与Byte的关系"></a>bit与Byte的关系</h1><p><strong>源信息</strong></p><p>在计算机科学中，bit（比特）是表示信息的最小单位，叫做二进制位；一般用0和1表示。</p><p>Byte叫做字节，由8个比特位（8bit）组成一个字节(1Byte)，用于表示计算机中的一个字符。</p><p>bit与Byte之间可以进行换算，其换算关系为：1Byte=8bit（或简写为：1B=8b）</p><p>在实际应用中一般用简称， 即1bit简写为1b(注意是小写英文字母b)，1Byte简写为1B（注意是大写英文字母B）。</p><p><strong>ISP的表示</strong></p><p>在计算机网络或者是网络运营商(Internet service provider)中，一般宽带速率的表示单位用bps(或b/s，小b)表示；</p><p>bps表示<strong><code>比特每秒</code></strong>即表示<strong><code>每秒钟传输多少位</code></strong>信息，是<strong><code>bit per second</code></strong>的缩写。在实际所说的1M带宽的意思是1Mbps（是兆比特每秒Mbps不是兆字节每秒MBps）</p><font color="red"><strong>换算公式:</strong></font><pre><code>1Byte    =    8bit1B    =    8b---------- 1B/s=8b/s(或1Bps=8bps)1KB    =    1024B---------- 1KB/s=1024B/s1MB    =    1024KB ---------- 1MB/s=1024KB/s最终：1Mbps =    1024*1024 bps = 1024 Kbps = 1024/8 KBps = 128KBps = 128KB/s</code></pre><p><strong>规范提示：</strong></p><blockquote><p>在实际书写中，B应表示Byte(字节)，b应表示bit(比特)，但是我们在实际书写中很容易把bit和Byte都混写为b ，如把Mb/s和MB/s都混写为Mb/s，导致人们在实际计算中因单位的混淆而出错。</p></blockquote><h1 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h1><p>在实际上网应用中，下载软件时常常看到诸如下载速度显示为128KB（KB/s），103KB/s等等宽带速率大小字样，因为ISP提供的线路带宽使用的单位是比特（bit，即小b），而一般下载软件显示的是字节（byte，1byte＝8bits），所以要通过换算，才能得实际值。</p><p>所以，我们可以按照公式换算一下：</p><pre><code>128KB/s=128×8(Kb/s)=1024Kb/s=1Mb/s即：128KB/s=1Mb/s。</code></pre><p>也就是说1Mb的带宽，下载速度为128KB/s秒</p><p>在一些软件的带宽的显示页面，通常的显示页面也是以bps的方式来显示，这个时候，我们就需要进行一下换算，例如下面的页面截图（阿里云带宽使用情况）</p><p><img src="http://picture.watchmen.xin/network/bandwidth.png" alt="带宽"></p><p>图中所选的这个值是：13272120 bps(bits/s)，我们下面进行换算：</p><pre><code>13272120 bps = 13272120/1024 Kbps = 13272120/1024/1024 Mbps = 12.65723 Mbps </code></pre><p>换算之后，我们可以看到这里显示的带宽是12.6M</p><h2 id="补充：ADSL宽带知识"><a href="#补充：ADSL宽带知识" class="headerlink" title="补充：ADSL宽带知识"></a>补充：ADSL宽带知识</h2><p>ADSL（Asymmetric Digital Subscriber Loop）技术是一种不对称数字用户线实现宽带接入互连网的技术，ADSL作为一种传输层的技术，充分利用现有的铜线资源，在一对双绞线上提供上行640kbps（理论上行1Mbps）下行8Mbps的带宽，从而克服了传统用户在”最后一公里”的”瓶颈”，实现了真正意义上的宽带接入。</p><p><strong>上行速率：</strong>是指用户电脑向网络发送信息时的数据传输速率。</p><p><strong>下行速率：</strong> 是指网络向用户电脑发送信息时的传输速率。比如用 FTP上传文件到网上去，影响上传速度的就是“上行速率”；而从网上下载文件，影响下载速度的就是“下行速率”。</p><p>当然，在实际上传下载过程中，线路、设备 (含计算机及其他设备)等的质量也会对速度造成或多或少的影响。</p><p><strong>上行速率对上行速率的影响</strong></p><p>TCP/IP规定，每一个封包，都需要有acknowledge信息的回传，也就是说，传输的资料，需要有一个收到资料的信息回复，才能决定后面的传输速度，并决定是否重新传输遗失的资料。　</p><p><font color="red">行的带宽一部分就是用来传输这些acknowledge(确认)资料的，当上行负载过大的时候，就会影响acknowledge资料的传送速度，并进而影响到下载速度。这对非对称数字环路也就是ADSL这种上行带宽远小于下载带宽的连接来说影响尤为明显。</font>　 </p><p>有试验证明，当上传满载时，下载速度讲变为理想速度的40%，这就可以解释为什么很多朋友用BT下载的时候稍微限速反而能够获得更大的下载速度。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在网络运营商提供的宽带速率单位中，”bps”是指”bit per second”</p><p>而我们在日常生活中，使用的一般是”Byte persecond”(Bps)</p><p>我们说的带宽几M几M指的是 2Mbps、8Mbps这种格式，为了便于更加直观的查看，我们会转回成为KB的形式，也就是说，我们拿到这个数字之后，需要先*1024，将M变成K，然后再/8，最后的单位就是我们最常使用的单位了</p><p>举个栗子：</p><pre><code>1M的带宽，理论的下载速度为：1*1024/8= 128KB/s8M的带宽，理论的下载速度为：8*1024/8 = 1024KB/s = 1MB/s</code></pre><p>在8M带宽之后，我们的换算，可以直接除以8来得到结果</p><pre><code>100M的带宽，理论的下载速度为： 100/8 = 12.5MB/s</code></pre>]]></content>
    
    <summary type="html">
    
      带宽计算方法及B与b说明
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="网络知识" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86/"/>
    
      <category term="基础知识" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="带宽计算" scheme="http://yoursite.com/tags/%E5%B8%A6%E5%AE%BD%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>Python基础知识</title>
    <link href="http://yoursite.com/2018/05/24/Python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2018/05/24/Python基础知识/</id>
    <published>2018-05-24T13:05:55.000Z</published>
    <updated>2018-05-24T13:05:55.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python简介"><a href="#Python简介" class="headerlink" title="Python简介"></a>Python简介</h1><h2 id="Python擅长领域"><a href="#Python擅长领域" class="headerlink" title="Python擅长领域"></a>Python擅长领域</h2><p><strong>Web开发</strong></p><ul><li>django</li><li>pyramid</li><li>tornado</li><li>bottle</li><li>flask</li><li>webpy</li></ul><p><strong>网络编程</strong></p><ul><li>twisted</li><li>request</li><li>scrapy</li><li>paramiko</li><li>scipy</li><li>pandas</li><li>ipython</li></ul><p><strong>GUI图形开发</strong></p><ul><li>wxpython</li><li>pyqt</li><li>kivy</li></ul><p><strong>运维自动化</strong></p><ul><li>openstack</li><li>saltstack</li><li>ansible</li><li>腾讯蓝鲸</li></ul><h2 id="编程语言概述"><a href="#编程语言概述" class="headerlink" title="编程语言概述"></a>编程语言概述</h2><p>编程语言主要从以下几个角度为进行分类：</p><ul><li><p>低级语言与高级语言</p></li><li><p>编译型和解释型</p></li><li><p>静态语言和动态语言</p></li><li><p>强类型定义语言和弱类型定义语言</p></li></ul><p>每个分类代表什么意思呢，我们一起来看一下。</p><h3 id="低级语言与高级语言"><a href="#低级语言与高级语言" class="headerlink" title="低级语言与高级语言"></a>低级语言与高级语言</h3><p><strong>低级语言</strong></p><p>最初的计算机程序都是使用0和1的序列表示的，程序员直接使用的是机器指令，无需翻译，从纸带打孔输入即可得到结果。后来为了记忆方便，就将用0、1序列表示的机器指令都用符号助记，这些与机器指令一一对应的助记符号就成为了汇编指令，从而诞生了汇编语言。</p><p>无论是机器指令还是汇编指令，都是面向机器的，这些统称为低级语言。因此是针对特定机器的机器指令的助记符，所以汇编语言是无法独立于机器（特定的CPU体系结构）的</p><p>但是汇编语言也是需要经过翻译才能转变为机器指令，所以也就有了将运行在一种机器上的汇编语言翻译成为另一类机器上的机器指令的方法，这被称之为：<strong><code>交叉汇编技术</code></strong></p><p><strong>高级语言</strong></p><p>高级语言是从人类的逻辑思维角度出发的计算机语言，因此，抽象程度大大提高，需要经过编译成特定机器上的目标代码才能执行，一条高级语言的语句往往需要若干条机器指令来完成。</p><p>高级语言独立于机器的特性是靠编译器为不同机器生成不同的目标代码（或者机器指令）来实现的。具体来说，要将高级语言编译到什么程度，这跟编译的技术相挂钩，可以编译成为直接可以执行的目标代码，也可以变成成为一种中间表示，然后拿到不同的机器和系统上面去执行，这种情况通常是又需要支撑环境，比如解释器或者虚拟机的支持，Java程序编译成为bytecode，再由不同平台上的虚拟机执行就是很好的例子。</p><p>所以，说高级语言不依赖于机器，指的是在不同的机器或者平台上高级语言的程序本身不变，而通过编译器编译得到的目标代码去使用不同的机器。<br>从这个意义来说，通过交叉编译，一些汇编程序也可以获得不同机器之间的可移植性，但是这种途径获得的移植性远远不如高级语言来的方便和实用。</p><p><strong>总结</strong></p><p>我们说的低级语言和高级语言，主要的区别点在于主要针对的对象，低级语言主要针对的对象是特定的机器，而高级语言，主要针对的对象是人类的逻辑。</p><h3 id="编译型和解释型"><a href="#编译型和解释型" class="headerlink" title="编译型和解释型"></a>编译型和解释型</h3><p><strong>概念区别</strong></p><p>编译器是把源程序的每一条语句都<strong><code>编译成机器语言</code></strong>,并保存成二进制文件,这样运行时计算机可以直接以机器语言来运行此程序,速度很快; </p><p>而解释器则是只在执行程序时,才<strong><code>一条一条</code></strong>的解释成机器语言给计算机来执行,所以运行速度是不如编译后的程序运行的快的. </p><p>这是因为计算机不能直接认识并执行我们写的语句,它只能认识机器语言(是二进制的形式)</p><p>以下是各语言的分类</p><p><img src="http://picture.watchmen.xin/python-14/lang.png" alt=""></p><p><strong>编译型vs解释型</strong></p><ul><li>编译型</li></ul><p>优点：编译器一般会有预编译的过程对代码进行优化。因为编译只做一次，<strong><code>运行时不需要编译</code></strong>，所以编译型语言的程序执行效率高。<strong><code>可以脱离语言环境独立运行。</code></strong></p><p>缺点：编译之后如果需要修改就需要整个模块重新编译。编译的时候根据对应的运行环境生成机器码，不同的操作系统之间移植就会有问题，需要根据运行的操作系统环境编译不同的可执行文件。</p><p>也就是说，使用编译器将源代码文件进行编译之后，生成文件之后，计算机就可以直接运行，不再需要借助其他的东西，因此运行效率是最高的，但是这要求前期的准备工作必须做的非常完善，因为如果有代码需要修改的话，需要重新编译是生成执行文件。</p><ul><li>解释型</li></ul><blockquote><p>优点：有良好的平台兼容性，在任何环境中都可以运行，前提是安装了解释器（一般我们也称之为虚拟机）。灵活，修改代码的时候可以直接修改，可以快速部署，不用停机维护</p><p>缺点：每次运行的时候都需要使用解释器解释一遍，因此在性能上是不如编译型语言的。</p><p>解释型语言可以无视运行的系统平台，只要有解释器的存在，能将源代码解释翻译成为计算机能够识别的机器语言即可。 </p></blockquote><h3 id="静态语言和动态语言"><a href="#静态语言和动态语言" class="headerlink" title="静态语言和动态语言"></a>静态语言和动态语言</h3>]]></content>
    
    <summary type="html">
    
      Python基础知识
    
    </summary>
    
      <category term="编程语言" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"/>
    
      <category term="老男孩视频学习笔记" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/%E8%80%81%E7%94%B7%E5%AD%A9%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python基础知识" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/%E8%80%81%E7%94%B7%E5%AD%A9%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="老男孩视频" scheme="http://yoursite.com/tags/%E8%80%81%E7%94%B7%E5%AD%A9%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>IT类书籍资料</title>
    <link href="http://yoursite.com/2018/05/20/IT%E7%B1%BB%E4%B9%A6%E7%B1%8D%E8%B5%84%E6%96%99/"/>
    <id>http://yoursite.com/2018/05/20/IT类书籍资料/</id>
    <published>2018-05-20T09:19:09.000Z</published>
    <updated>2018-05-20T09:19:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>从今天开始（2018年5月20日）记录个人运维职业成长过程中所看过的书籍资料情况</p><h1 id="科普读物"><a href="#科普读物" class="headerlink" title="科普读物"></a>科普读物</h1><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">类型</th><th style="text-align:center">作者</th><th style="text-align:center">出版年份</th><th style="text-align:center">阅读状态</th><th style="text-align:center">评级</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">浪潮之巅</td><td style="text-align:center">书籍</td><td style="text-align:center">吴军</td><td style="text-align:center"></td><td style="text-align:center">未读</td><td style="text-align:center">5星</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">数学之美</td><td style="text-align:center">书籍</td><td style="text-align:center">吴军</td><td style="text-align:center"></td><td style="text-align:center">未读</td><td style="text-align:center"></td></tr></tbody></table><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><p><strong>Mysql：</strong></p><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">类型</th><th style="text-align:center">作者</th><th style="text-align:center">出版年份</th><th style="text-align:center">阅读状态</th><th style="text-align:center">评级</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">MySQL技术内幕_InnoDB存储引擎.第2版</td><td style="text-align:center">书籍</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">高性能mysql</td><td style="text-align:center">书籍</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">MySQL 5.5从零开始学</td><td style="text-align:center">书籍</td></tr></tbody></table><p><strong>Redis</strong></p><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">类型</th><th style="text-align:center">作者</th><th style="text-align:center">出版年份</th><th style="text-align:center">阅读状态</th><th style="text-align:center">评级</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">Redis运维与开发</td><td style="text-align:center">书籍</td><td style="text-align:center">付磊、张益军</td><td style="text-align:center">2017年4月</td><td style="text-align:center"><font color="red"><strong>精读，已看完</strong></font></td><td style="text-align:center">5星</td><td style="text-align:center">搜狐视频团队出品，其还开源了cachecloud云平台</td></tr></tbody></table><h1 id="自动化"><a href="#自动化" class="headerlink" title="自动化"></a>自动化</h1><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">类型</th><th style="text-align:center">作者</th><th style="text-align:center">出版年份</th><th style="text-align:center">阅读状态</th><th style="text-align:center">评级</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">SaltStack技术入门与实践</td><td style="text-align:center">书籍</td><td style="text-align:center">刘继伟、沈灿、赵舜东</td><td style="text-align:center">2016年1月</td><td style="text-align:center"></td></tr></tbody></table><h1 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h1><p><strong>Python</strong></p><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">类型</th><th style="text-align:center">作者</th><th style="text-align:center">出版年份</th><th style="text-align:center">阅读状态</th><th style="text-align:center">评级</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">Python编程从入门到实践</td><td style="text-align:center">书籍</td><td style="text-align:center"></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      IT类书籍资料
    
    </summary>
    
      <category term="IT基础知识" scheme="http://yoursite.com/categories/IT%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="IT类书籍资料" scheme="http://yoursite.com/categories/IT%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/IT%E7%B1%BB%E4%B9%A6%E7%B1%8D%E8%B5%84%E6%96%99/"/>
    
    
      <category term="IT书籍资料" scheme="http://yoursite.com/tags/IT%E4%B9%A6%E7%B1%8D%E8%B5%84%E6%96%99/"/>
    
  </entry>
  
  <entry>
    <title>Salt常用命令</title>
    <link href="http://yoursite.com/2018/05/20/Salt%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/05/20/Salt常用命令/</id>
    <published>2018-05-20T09:08:43.000Z</published>
    <updated>2018-05-20T09:08:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>有关SaltStack相关知识，可以看另一篇文章，本文只是记录常用命令，便于日常使用检索</p><p><a href="http://watchmen.xin/2018/05/20/SaltStack%E6%8A%80%E6%9C%AF%E5%85%A5%E9%97%A8%E4%B8%8E%E5%AE%9E%E8%B7%B5/" target="_blank" rel="noopener">SaltStack技术入门与实践</a></p><h1 id="Salt-master端命令"><a href="#Salt-master端命令" class="headerlink" title="Salt-master端命令"></a>Salt-master端命令</h1><ul><li><p><strong>查看证书签证情况</strong></p><p>  [root@master ~]# salt-key  -L </p></li><li><p><strong>同意签证所有没有接受的签证请求</strong></p></li></ul><pre><code>[root@master ~]# salt-key  -A -y </code></pre><p>在这里，A代表–accept-all的含义</p><h1 id="Salt-minion端命令"><a href="#Salt-minion端命令" class="headerlink" title="Salt-minion端命令"></a>Salt-minion端命令</h1>]]></content>
    
    <summary type="html">
    
      Salt常用命令
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="运维自动化" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E8%BF%90%E7%BB%B4%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
      <category term="SaltStack" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E8%BF%90%E7%BB%B4%E8%87%AA%E5%8A%A8%E5%8C%96/SaltStack/"/>
    
    
      <category term="SaltStack" scheme="http://yoursite.com/tags/SaltStack/"/>
    
  </entry>
  
  <entry>
    <title>常见应用程序/命令-协议/端口号对照表</title>
    <link href="http://yoursite.com/2018/05/20/%E5%B8%B8%E8%A7%81%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%AF%E5%8F%A3%E5%8F%B7%E5%AF%B9%E7%85%A7%E8%A1%A8/"/>
    <id>http://yoursite.com/2018/05/20/常见网络应用端口号对照表/</id>
    <published>2018-05-20T08:36:46.000Z</published>
    <updated>2018-05-20T08:36:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络服务-端口对照关系表"><a href="#网络服务-端口对照关系表" class="headerlink" title="网络服务-端口对照关系表"></a>网络服务-端口对照关系表</h1><table><thead><tr><th style="text-align:left">应用程序API（命令）</th><th style="text-align:center">主流程序</th><th style="text-align:center">程序类别</th><th style="text-align:center">3层协议</th><th style="text-align:center">4层协议</th><th style="text-align:center">5层协议</th><th style="text-align:left">6层协议</th><th style="text-align:left">7层协议</th><th>默认服务端口</th><th>程序说明</th><th>其他信息</th></tr></thead><tbody><tr><td style="text-align:left">FTP数据端口</td><td style="text-align:center">vsftpd</td><td style="text-align:center">网络程序</td><td style="text-align:center">IP</td><td style="text-align:center">TCP</td><td style="text-align:center"></td><td style="text-align:left"></td><td style="text-align:left">FTP</td><td>20</td><td>文件传输</td></tr><tr><td style="text-align:left">FTP连接控制认证</td><td style="text-align:center">vsftpd</td><td style="text-align:center">网络程序</td><td style="text-align:center">IP</td><td style="text-align:center">TCP</td><td style="text-align:center"></td><td style="text-align:left"></td><td style="text-align:left">FTP</td><td>21</td><td>文件传输</td></tr><tr><td style="text-align:left">ssh</td><td style="text-align:center">openssh</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:left"></td><td style="text-align:left"></td><td>22</td><td>加固的远程连接</td></tr><tr><td style="text-align:left">sallt-key</td><td style="text-align:center">salt-master</td><td style="text-align:center">网络程序</td><td style="text-align:center">IP</td><td style="text-align:center">TCP</td><td style="text-align:center"></td><td style="text-align:left"></td><td style="text-align:left"></td><td>4505</td><td>SaltStack-master端监听端口</td></tr><tr><td style="text-align:left">sallt-key</td><td style="text-align:center">salt-master</td><td style="text-align:center">网络程序</td><td style="text-align:center">IP</td><td style="text-align:center">TCP</td><td style="text-align:center"></td><td style="text-align:left"></td><td style="text-align:left"></td><td>4506</td><td>SaltStack-master端监听端口</td></tr></tbody></table><h1 id="系统服务-协议对照关系表"><a href="#系统服务-协议对照关系表" class="headerlink" title="系统服务-协议对照关系表"></a>系统服务-协议对照关系表</h1><table><thead><tr><th style="text-align:left">应用程序/命令</th><th style="text-align:center">主流程序</th><th style="text-align:center">程序类别</th><th style="text-align:center">3层协议</th><th style="text-align:center">4层协议</th><th style="text-align:left">5层协议</th><th style="text-align:left">6层协议</th><th>7层协议</th><th>默认服务端口</th><th>程序说明</th><th>其他信息</th></tr></thead><tbody><tr><td style="text-align:left">ping命令</td><td style="text-align:center">iputils</td><td style="text-align:center">系统程序</td><td style="text-align:center">icmp</td><td style="text-align:center"></td><td style="text-align:left"></td><td style="text-align:left"></td><td></td><td></td><td>探测主机到主机之间是否可通信</td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      常见应用程序/命令-协议/端口号对照表
    
    </summary>
    
      <category term="IT基础知识" scheme="http://yoursite.com/categories/IT%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="应用协议端口对照表" scheme="http://yoursite.com/categories/IT%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE%E7%AB%AF%E5%8F%A3%E5%AF%B9%E7%85%A7%E8%A1%A8/"/>
    
    
      <category term="常见应用程序/命令-协议/端口号对照表" scheme="http://yoursite.com/tags/%E5%B8%B8%E8%A7%81%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F-%E5%91%BD%E4%BB%A4-%E5%8D%8F%E8%AE%AE-%E7%AB%AF%E5%8F%A3%E5%8F%B7%E5%AF%B9%E7%85%A7%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>Centos7安装Python3</title>
    <link href="http://yoursite.com/2018/05/20/Centos7%E5%AE%89%E8%A3%85Python3/"/>
    <id>http://yoursite.com/2018/05/20/Centos7安装Python3/</id>
    <published>2018-05-20T06:17:38.000Z</published>
    <updated>2018-05-20T06:17:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>在centos 7中，默认安装的python版本为2.7,一般情况下，我们都需要对python进行升级</p><pre><code>[root@master ~]# cat /etc/redhat-release CentOS Linux release 7.3.1611 (Core)[root@master ~]# python --version Python 2.7.5</code></pre><h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><pre><code>[root@master ~]# which python /usr/bin/python[root@master ~]# ll /usr/bin/pythonlrwxrwxrwx 1 root root 7 Apr 13 16:50 /usr/bin/python -&gt; python2[root@master ~]# ll /usr/bin/python2lrwxrwxrwx 1 root root 9 Apr 13 16:50 /usr/bin/python2 -&gt; python2.7[root@master ~]# ll /usr/bin/python2.7-rwxr-xr-x 1 root root 7136 Aug  4  2017 /usr/bin/python2.7</code></pre><p>我们知道我们的python命令是在/usr/bin目录下</p><p>可以看到，python指向的是python2，python2指向的是python2.7</p><p>因此我们可以装个python3，然后将python指向python3，然后python2指向python2.7，那么两个版本的python就能共存了。</p><h1 id="正式安装"><a href="#正式安装" class="headerlink" title="正式安装"></a>正式安装</h1><p><strong>下载python3的源码包</strong></p><pre><code>wget https://www.python.org/ftp/python/3.6.5/Python-3.6.5.tgz</code></pre><p><strong>解压编译安装</strong></p><pre><code>[root@master software]# tar -zxvf Python-3.6.5.tgz [root@master software]# cd Python-3.6.5[root@master Python-3.6.5]# ./configure  --prefix=/usr/local/python3[root@master Python-3.6.5]# make &amp;&amp; make install</code></pre><p><strong>添加软链接</strong></p><pre><code>[root@master Python-3.6.5]# mv /usr/bin/python /usr/bin/python.bak[root@master Python-3.6.5]# ln -s /usr/local/python3/bin/python3.6 /usr/bin/python[root@master Python-3.6.5]# python --version Python 3.6.5</code></pre><h1 id="补充操作"><a href="#补充操作" class="headerlink" title="补充操作"></a>补充操作</h1><h2 id="更改yum配置"><a href="#更改yum配置" class="headerlink" title="更改yum配置"></a>更改yum配置</h2><p>安装完毕之后，我们需要修改yum的配置，因为其要使用python2执行，此时我们修改了python的指向路径，不修改则会导致yum无法正常使用。</p><p><strong>vim /usr/bin/yum</strong></p><pre><code>把#! /usr/bin/python修改为#! /usr/bin/python2</code></pre><p><strong>vim /usr/libexec/urlgrabber-ext-down</strong></p><pre><code>把#! /usr/bin/python 修改为#! /usr/bin/python2</code></pre>]]></content>
    
    <summary type="html">
    
      Centos7安装Python3
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="基础环境配置" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
      <category term="Python" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>SaltStack技术入门与实践</title>
    <link href="http://yoursite.com/2018/05/20/SaltStack%E6%8A%80%E6%9C%AF%E5%85%A5%E9%97%A8%E4%B8%8E%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2018/05/20/SaltStack技术入门与实践/</id>
    <published>2018-05-20T03:38:35.000Z</published>
    <updated>2018-05-20T03:38:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考文件：</p><ul><li>书籍：《SaltStack技术入门与实践》</li></ul><h1 id="SaltStack基础入门"><a href="#SaltStack基础入门" class="headerlink" title="SaltStack基础入门"></a>SaltStack基础入门</h1><p>SlatStack是基于python开发的一套C/S架构配置管理工具，底层使用zeroMQ消息队列pub/sub的方式通信，使用SSL证书签发的方式进行认证管理，采用RSA Key方式确认身份，传输采用AES加密，这使得它的安全性有了一定的保障。</p><p>并且，SaltStack不止是一个配置管理工具，它还是一个做云计算与数据中心架构编排的利器-</p><p>重点：</p><ul><li>Python</li><li>C/S架构</li><li>Server和Client之间的通信采用ZeroMQ pub/sub通信方式</li><li>SSL证书提供加密传输</li></ul><h2 id="服务架构"><a href="#服务架构" class="headerlink" title="服务架构"></a>服务架构</h2><p>在slatstack架构中，服务端叫做Master，客户端叫做Minion（英文翻译为：奴才；仆从；宠臣）</p><p>在我们理解的C/S架构中，工作流程为：</p><blockquote><p>客户端发送请求给服务器端</p><p>服务器端接受请求并处理</p><p>处理完成之后，返回客户端</p></blockquote><p>在slatstack中，不仅有这种传统的C/S架构服务模式，而且还有消息队列中的发布/订阅(pub/sub)服务模式，这就使得saltstack的应用场景更加丰富。</p><p>目前在实际的环境中，一般使用C/S架构进行配置管理</p><p><strong>工作机制</strong></p><blockquote><p>Master和Minion端都是以守护进程的模式运行的，一直监听配置文件中定义的<strong><code>ret_port(接受minion请求)和publish_port（发布消息）的端口</code></strong></p><p>当Minion运行时会自动连接到配置文件里面定义的Master地址和ret_port端口进行连接认证。</p></blockquote><p>saltstack除了传统的的C/S架构，还有Masterless架构，如果采用该架构，我们就不需要单独安装一台salt-master机器，只需要在每台机器上安装Minion。然后采用本机只负责本机的配置管理工作机制服务模式。</p><h2 id="Saltstack架构安装"><a href="#Saltstack架构安装" class="headerlink" title="Saltstack架构安装"></a>Saltstack架构安装</h2><p>当前salt的安装一共有4四种方式：</p><ul><li>yum方式安装</li><li>pip方式安装</li><li>源码包方式安装</li><li>salt-bootstrap方式安装</li></ul><p>在这里，我们使用yum方式进行安装,另外3种方式可以参见书籍：《SaltStack技术入门与实践》</p><p>安装环境为：centos7+python3，如果不知道如何升级python，可以看我的另一篇文章：<a href="http://watchmen.xin/2018/05/20/Centos7%E5%AE%89%E8%A3%85Python3/" target="_blank" rel="noopener">Centos7安装Python3</a></p><p><strong>参考文献：</strong></p><ul><li><a href="https://repo.saltstack.com/#rhel" target="_blank" rel="noopener">官方安装指南</a></li></ul><h3 id="yum源安装"><a href="#yum源安装" class="headerlink" title="yum源安装"></a>yum源安装</h3><pre><code># yum -y install https://repo.saltstack.com/py3/redhat/salt-py3-repo-latest-2.el7.noarch.rpm </code></pre><h3 id="master端安装"><a href="#master端安装" class="headerlink" title="master端安装"></a>master端安装</h3><p><strong>安装</strong></p><pre><code># yum -y install salt-master</code></pre><p><strong>启动服务</strong></p><pre><code># systemctl start salt-master</code></pre><p><strong>额外操作</strong></p><p>如果是阿里云服务器，我们还要在安全组中开放4505和4506端口</p><h3 id="minion端安装配置"><a href="#minion端安装配置" class="headerlink" title="minion端安装配置"></a>minion端安装配置</h3><p><strong>安装</strong></p><pre><code># yum -y install salt-minion</code></pre><p>注意：minion端在安装之后还需要进行配置（在配置文件中添加Master端的相关信息）</p><pre><code># sed -i &apos;s/#master: salt/master: 47.93.54.101/g&apos; /etc/salt/minion</code></pre><p><strong>启动服务</strong></p><pre><code># systemctl  start salt-minion</code></pre><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>是否将服务设置为开机自动启动，请根据实际情况决定：</p><p>查看：</p><pre><code># systemctl is-enabled salt-master/salt-miniondisabled</code></pre><p>设置：</p><pre><code># systemctl enable salt-master/salt-minion</code></pre><hr><h2 id="开启SaltStack之旅"><a href="#开启SaltStack之旅" class="headerlink" title="开启SaltStack之旅"></a>开启SaltStack之旅</h2><h3 id="证书管理"><a href="#证书管理" class="headerlink" title="证书管理"></a>证书管理</h3><p>在前面的介绍中我们知道了saltstack使用SSL签证的方式进行安全认证，接下来我们就开始进行证书的管理</p><p>minion端服务启动之后，我们在master端就能看到Minion的证书签证请求，下面我们需要对这台Minion进行签售证书</p><pre><code>[root@master ~]# salt-key  -LAccepted Keys:Denied Keys:Unaccepted Keys:slave.kisspuppet.comRejected Keys:[root@master ~]# salt-key -A -y         #同意签证所有没有接受的请求The following keys are going to be accepted:Unaccepted Keys:slave.kisspuppet.comKey for minion slave.kisspuppet.com accepted.[root@master ~]# salt-key  -LAccepted Keys:slave.kisspuppet.comDenied Keys:Unaccepted Keys:Rejected Keys:</code></pre><p>证书签售成功之后，我们可以运行命令检测我们master与minion之间的通信是否正常</p><pre><code>[root@master ~]# salt slave.kisspuppet.com  test.ping slave.kisspuppet.com:    True</code></pre><h3 id="日常命令参数"><a href="#日常命令参数" class="headerlink" title="日常命令参数"></a>日常命令参数</h3><p>首先我们需要知道，我们在安装salt-master和salt-minion的时候都安装了哪些文件，这样有利于我们去了解SaltStack日后的一些日常操作。</p><h4 id="master端"><a href="#master端" class="headerlink" title="master端"></a>master端</h4><pre><code>[root@master ~]# rpm -ql salt-master/etc/salt/master            #salt master配置文件/etc/salt/master.d/etc/salt/pki/master/usr/bin/salt                #salt master核心操作命令/usr/bin/salt-cp            #salt 文件传输命令/usr/bin/salt-key            #salt 证书管理命令/usr/bin/salt-master/usr/bin/salt-run/usr/bin/salt-unity/usr/lib/systemd/system/salt-master.service/usr/share/man/man1/salt-cp.1.gz/usr/share/man/man1/salt-key.1.gz/usr/share/man/man1/salt-master.1.gz/usr/share/man/man1/salt-run.1.gz/usr/share/man/man1/salt-unity.1.gz/usr/share/man/man1/salt.1.gz/usr/share/man/man7/salt.7.gz</code></pre><p><strong>salt命令语法</strong></p><pre><code>Usage: salt [options] &apos;&lt;target&gt;&apos; &lt;function&gt; [arguments]</code></pre><p><strong>salt命令相关重要参数</strong></p><ul><li><p>-c CONFIG_DIR, –config-dir=CONFIG_DIR 指定配置文件目录（默认为/etc/salt）</p></li><li><p>–async  Run the salt command but don’t wait for a reply  异步执行</p></li><li><p>-d, –doc, –documentation   查看指定模块或者所有模块文档</p></li><li><p>–username=USERNAME        指定外部认证用户名</p></li><li>–password=PASSWORD        指定外部认证用户密码</li></ul><p>具体命令请看下面的输出：</p><pre><code>[root@master ~]# salt -hUsage: salt [options] &apos;&lt;target&gt;&apos; &lt;function&gt; [arguments]Salt allows for commands to be executed across a swath of remote systems inparallel, so they can be both controlled and queried with ease.Options:  --version             show program&apos;s version number and exit  -V, --versions-report                        Show program&apos;s dependencies version number and exit.  -h, --help            show this help message and exit  --saltfile=SALTFILE   Specify the path to a Saltfile. If not passed, one                        will be searched for in the current working directory.  -c CONFIG_DIR, --config-dir=CONFIG_DIR                        Pass in an alternative configuration directory.                        Default: &apos;/etc/salt&apos;.  -t TIMEOUT, --timeout=TIMEOUT                        Change the timeout, if applicable, for the running                        command (in seconds). Default: 5.  --args-stdin          Read additional options and/or arguments from stdin.                        Each entry is newline separated.  --hard-crash          Raise any original exception rather than exiting                        gracefully. Default: False.  --no-parse=argname1,argname2,...                        Comma-separated list of named CLI arguments (i.e.                        argname=value) which should not be parsed as Python                        data types  -s, --static          Return the data from minions as a group after they all                        return.  -p, --progress        Display a progress graph. Requires &quot;progressbar&quot;                        python package.  --failhard            Stop batch execution upon first &quot;bad&quot; return.  --async               Run the salt command but don&apos;t wait for a reply.  --subset=SUBSET       Execute the routine on a random subset of the targeted                        minions. The minions will be verified that they have                        the named function before executing.  -v, --verbose         Turn on command verbosity, display jid and active job                        queries.  --hide-timeout        Hide minions that timeout.  --show-jid            Display jid without the additional output of                        --verbose.  -b BATCH, --batch=BATCH, --batch-size=BATCH                        Execute the salt job in batch mode, pass either the                        number of minions to batch at a time, or the                        percentage of minions to have running.  --batch-wait=BATCH_WAIT                        Wait the specified time in seconds after each job is                        done before freeing the slot in the batch for the next                        one.  --batch-safe-limit=BATCH_SAFE_LIMIT                        Execute the salt job in batch mode if the job would                        have executed on more than this many minions.  --batch-safe-size=BATCH_SAFE_SIZE                        Batch size to use for batch jobs created by batch-                        safe-limit.  --return=RETURNER     Set an alternative return method. By default salt will                        send the return data from the command back to the                        master, but the return data can be redirected into any                        number of systems, databases or applications.  --return_config=RETURNER_CONF                        Set an alternative return method. By default salt will                        send the return data from the command back to the                        master, but the return data can be redirected into any                        number of systems, databases or applications.  --return_kwargs=RETURNER_KWARGS                        Set any returner options at the command line.  --module-executors=EXECUTOR_LIST                        Set an alternative list of executors to override the                        one set in minion config.  --executor-opts=EXECUTOR_OPTS                        Set alternate executor options if supported by                        executor. Options set by minion config are used by                        default.  -d, --doc, --documentation                        Return the documentation for the specified module or                        for all modules if none are specified.  --args-separator=ARGS_SEPARATOR                        Set the special argument used as a delimiter between                        command arguments of compound commands. This is useful                        when one wants to pass commas as arguments to some of                        the commands in a compound command.  --summary             Display summary information about a salt command.  --metadata=METADATA   Pass metadata into Salt, used to search jobs.  --output-diff         Report only those states that have changed.  --config-dump         Dump the master configuration values  --preview-target      Show the minions expected to match a target. Does not                        issue any command.  Logging Options:    Logging options which override any settings defined on the    configuration files.    -l LOG_LEVEL, --log-level=LOG_LEVEL                        Console logging log level. One of &apos;all&apos;, &apos;garbage&apos;,                        &apos;trace&apos;, &apos;debug&apos;, &apos;profile&apos;, &apos;info&apos;, &apos;warning&apos;,                        &apos;error&apos;, &apos;critical&apos;, &apos;quiet&apos;. Default: &apos;warning&apos;.    --log-file=LOG_FILE                        Log file path. Default: &apos;/var/log/salt/master&apos;.    --log-file-level=LOG_LEVEL_LOGFILE                        Logfile logging log level. One of &apos;all&apos;, &apos;garbage&apos;,                        &apos;trace&apos;, &apos;debug&apos;, &apos;profile&apos;, &apos;info&apos;, &apos;warning&apos;,                        &apos;error&apos;, &apos;critical&apos;, &apos;quiet&apos;. Default: &apos;warning&apos;.  Target Options:    Target selection options.    -H, --hosts         List all known hosts to currently visible or other                        specified rosters    -E, --pcre          Instead of using shell globs to evaluate the target                        servers, use pcre regular expressions.    -L, --list          Instead of using shell globs to evaluate the target                        servers, take a comma or space delimited list of                        servers.    -G, --grain         Instead of using shell globs to evaluate the target                        use a grain value to identify targets, the syntax for                        the target is the grain key followed by a                        globexpression: &quot;os:Arch*&quot;.    -P, --grain-pcre    Instead of using shell globs to evaluate the target                        use a grain value to identify targets, the syntax for                        the target is the grain key followed by a pcre regular                        expression: &quot;os:Arch.*&quot;.    -N, --nodegroup     Instead of using shell globs to evaluate the target                        use one of the predefined nodegroups to identify a                        list of targets.    -R, --range         Instead of using shell globs to evaluate the target                        use a range expression to identify targets. Range                        expressions look like %cluster.    -C, --compound      The compound target option allows for multiple target                        types to be evaluated, allowing for greater                        granularity in target matching. The compound target is                        space delimited, targets other than globs are preceded                        with an identifier matching the specific targets                        argument type: salt &apos;G@os:RedHat and webser* or                        E@database.*&apos;.    -I, --pillar        Instead of using shell globs to evaluate the target                        use a pillar value to identify targets, the syntax for                        the target is the pillar key followed by a glob                        expression: &quot;role:production*&quot;.    -J, --pillar-pcre   Instead of using shell globs to evaluate the target                        use a pillar value to identify targets, the syntax for                        the target is the pillar key followed by a pcre                        regular expression: &quot;role:prod.*&quot;.    -S, --ipcidr        Match based on Subnet (CIDR notation) or IP address.  Additional Target Options:    Additional options for minion targeting.    --delimiter=DELIMITER                        Change the default delimiter for matching in multi-                        level data structures. Default: &apos;:&apos;.  External Authentication:    -a EAUTH, --auth=EAUTH, --eauth=EAUTH, --external-auth=EAUTH                        Specify an external authentication system to use.    -T, --make-token    Generate and save an authentication token for re-use.                        The token is generated and made available for the                        period defined in the Salt Master.    --username=USERNAME                        Username for external authentication.    --password=PASSWORD                        Password for external authentication.  Output Options:    Configure your preferred output format.    --out=OUTPUT, --output=OUTPUT                        Print the output from the &apos;salt&apos; command using the                        specified outputter.    --out-indent=OUTPUT_INDENT, --output-indent=OUTPUT_INDENT                        Print the output indented by the provided value in                        spaces. Negative values disables indentation. Only                        applicable in outputters that support indentation.    --out-file=OUTPUT_FILE, --output-file=OUTPUT_FILE                        Write the output to the specified file.    --out-file-append, --output-file-append                        Append the output to the specified file.    --no-color, --no-colour                        Disable all colored output.    --force-color, --force-colour                        Force colored output.    --state-output=STATE_OUTPUT, --state_output=STATE_OUTPUT                        Override the configured state_output value for minion                        output. One of &apos;full&apos;, &apos;terse&apos;, &apos;mixed&apos;, &apos;changes&apos; or                        &apos;filter&apos;. Default: &apos;none&apos;.    --state-verbose=STATE_VERBOSE, --state_verbose=STATE_VERBOSE                        Override the configured state_verbose value for minion                        output. Set to True or False. Default: none.You can find additional help about salt issuing &quot;man salt&quot; or onhttp://docs.saltstack.com[root@master ~]# </code></pre><h4 id="minion端"><a href="#minion端" class="headerlink" title="minion端"></a>minion端</h4><pre><code>[root@slave ~]# rpm -ql salt-minion/etc/salt/minion/etc/salt/minion.d/etc/salt/pki/minion/etc/salt/proxy/usr/bin/salt-call/usr/bin/salt-minion/usr/bin/salt-proxy/usr/lib/systemd/system/salt-minion.service/usr/lib/systemd/system/salt-proxy@.service/usr/share/man/man1/salt-call.1.gz/usr/share/man/man1/salt-minion.1.gz/usr/share/man/man1/salt-proxy.1.gz</code></pre><p>Minio端主要介绍salt-call命令，因为salt-call命令的output和log相关参数与salt命令一样，这里就不对salt-call这两个参数进行讲解了，大家可以参照salt命令的output与log的相关参数</p><p><strong>salt-call命令语法</strong></p><pre><code>Usage: salt-call [options] &lt;function&gt; [arguments]</code></pre><ul><li>option:选项</li><li>target</li></ul><p><strong>salt-call命令相关重要参数</strong></p><ul><li><p>-c CONFIG_DIR, –config-dir=CONFIG_DIR 指定配置文件目录（默认为/etc/salt）</p></li><li><p>–master=MASTER       Specify the master to use 指定master信息</p></li><li><p>-d, –doc, –documentation   查看指定模块或者所有模块文档</p></li></ul><p><strong>命令输出如下：</strong></p><pre><code>[root@slave ~]# salt-call  -hUsage: salt-call [options] &lt;function&gt; [arguments]salt-call is used to execute module functions locally on a Salt MinionOptions:  --version             show program&apos;s version number and exit  -V, --versions-report                        Show program&apos;s dependencies version number and exit.  -h, --help            show this help message and exit  --saltfile=SALTFILE   Specify the path to a Saltfile. If not passed, one                        will be searched for in the current working directory.  -c CONFIG_DIR, --config-dir=CONFIG_DIR                        Pass in an alternative configuration directory.                        Default: &apos;/etc/salt&apos;.  --cachedir=CACHEDIR   Cache Directory  --args-stdin          Read additional options and/or arguments from stdin.                        Each entry is newline separated.  --hard-crash          Raise any original exception rather than exiting                        gracefully. Default: False.  --no-parse=argname1,argname2,...                        Comma-separated list of named CLI arguments (i.e.                        argname=value) which should not be parsed as Python                        data types  -g, --grains          Return the information generated by the salt grains.  -m MODULE_DIRS, --module-dirs=MODULE_DIRS                        Specify an additional directory to pull modules from.                        Multiple directories can be provided by passing `-m                        /--module-dirs` multiple times.  -d, --doc, --documentation                        Return the documentation for the specified module or                        for all modules if none are specified.  --master=MASTER       Specify the master to use. The minion must be                        authenticated with the master. If this option is                        omitted, the master options from the minion config                        will be used. If multi masters are set up the first                        listed master that responds will be used.  --return=RETURNER     Set salt-call to pass the return data to one or many                        returner interfaces.  --local               Run salt-call locally, as if there was no master                        running.  --file-root=FILE_ROOT                        Set this directory as the base file root.  --pillar-root=PILLAR_ROOT                        Set this directory as the base pillar root.  --states-dir=STATES_DIR                        Set this directory to search for additional states.  --retcode-passthrough                        Exit with the salt call retcode and not the salt                        binary retcode.  --metadata            Print out the execution metadata as well as the                        return. This will print out the outputter data, the                        return code, etc.  --set-metadata=METADATA                        Pass metadata into Salt, used to search jobs.  --id=ID               Specify the minion id to use. If this option is                        omitted, the id option from the minion config will be                        used.  --skip-grains         Do not load grains.  --refresh-grains-cache                        Force a refresh of the grains cache.  -t AUTH_TIMEOUT, --timeout=AUTH_TIMEOUT                        Change the timeout, if applicable, for the running                        command. Default: 60.  --output-diff         Report only those states that have changed.  Logging Options:    Logging options which override any settings defined on the    configuration files.    -l LOG_LEVEL, --log-level=LOG_LEVEL                        Console logging log level. One of &apos;all&apos;, &apos;garbage&apos;,                        &apos;trace&apos;, &apos;debug&apos;, &apos;profile&apos;, &apos;info&apos;, &apos;warning&apos;,                        &apos;error&apos;, &apos;critical&apos;, &apos;quiet&apos;. Default: &apos;warning&apos;.    --log-file=LOG_FILE                        Log file path. Default: &apos;/var/log/salt/minion&apos;.    --log-file-level=LOG_LEVEL_LOGFILE                        Logfile logging log level. One of &apos;all&apos;, &apos;garbage&apos;,                        &apos;trace&apos;, &apos;debug&apos;, &apos;profile&apos;, &apos;info&apos;, &apos;warning&apos;,                        &apos;error&apos;, &apos;critical&apos;, &apos;quiet&apos;. Default: &apos;warning&apos;.  Output Options:    Configure your preferred output format.    --out=OUTPUT, --output=OUTPUT                        Print the output from the &apos;salt-call&apos; command using                        the specified outputter.    --out-indent=OUTPUT_INDENT, --output-indent=OUTPUT_INDENT                        Print the output indented by the provided value in                        spaces. Negative values disables indentation. Only                        applicable in outputters that support indentation.    --out-file=OUTPUT_FILE, --output-file=OUTPUT_FILE                        Write the output to the specified file.    --out-file-append, --output-file-append                        Append the output to the specified file.    --no-color, --no-colour                        Disable all colored output.    --force-color, --force-colour                        Force colored output.    --state-output=STATE_OUTPUT, --state_output=STATE_OUTPUT                        Override the configured state_output value for minion                        output. One of &apos;full&apos;, &apos;terse&apos;, &apos;mixed&apos;, &apos;changes&apos; or                        &apos;filter&apos;. Default: &apos;none&apos;.    --state-verbose=STATE_VERBOSE, --state_verbose=STATE_VERBOSE                        Override the configured state_verbose value for minion                        output. Set to True or False. Default: none.  Profiling support:    --profiling-path=PROFILING_PATH                        Folder that will hold all stats generations path.                        Default: &apos;/tmp/stats&apos;.    --enable-profiling  Enable generating profiling stats. See also:                        --profiling-path.You can find additional help about salt-call issuing &quot;man salt-call&quot; or onhttp://docs.saltstack.com[root@slave ~]# </code></pre><h2 id="SaltStack配置文件"><a href="#SaltStack配置文件" class="headerlink" title="SaltStack配置文件"></a>SaltStack配置文件</h2><p>saltstack的配置文件分别为：</p><ul><li>Master： /etc/salt/master</li><li>Minion： /etc/salt/minion</li></ul><p>这两部分的内容详细可以看书</p><h3 id="master配置文件"><a href="#master配置文件" class="headerlink" title="master配置文件"></a>master配置文件</h3><p>这里只列出几个比较重要的参数</p><ul><li>#max_open_files: 100000    默认注释，根据master和minion的数量进行适当的调整</li><li>#timeout: 5    默认注释，根据master和minion的网络状况进行适当的调整</li><li>#auto_accept: False</li><li>#autosign_file: /etc/salt/autosign.conf  默认注释，这两个auto参数在大规模部署minion的时候可以设置自动签证（配置其中一个就可以生效）</li><li>master_tops和所有以external开头的参数-这些参数是saltstack与外部系统进行整合的相关配置参数</li></ul><h3 id="minion配置文件"><a href="#minion配置文件" class="headerlink" title="minion配置文件"></a>minion配置文件</h3><hr><h1 id="SaltStack组件"><a href="#SaltStack组件" class="headerlink" title="SaltStack组件"></a>SaltStack组件</h1>]]></content>
    
    <summary type="html">
    
      SaltStack技术入门与实践
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="运维自动化" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E8%BF%90%E7%BB%B4%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
      <category term="SaltStack" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E8%BF%90%E7%BB%B4%E8%87%AA%E5%8A%A8%E5%8C%96/SaltStack/"/>
    
    
      <category term="SaltStack" scheme="http://yoursite.com/tags/SaltStack/"/>
    
  </entry>
  
  <entry>
    <title>zabbix清理历史数据</title>
    <link href="http://yoursite.com/2018/05/17/zabbix%E6%B8%85%E7%90%86%E5%8E%86%E5%8F%B2%E6%95%B0%E6%8D%AE/"/>
    <id>http://yoursite.com/2018/05/17/zabbix清理历史数据/</id>
    <published>2018-05-17T11:00:59.000Z</published>
    <updated>2018-05-17T11:00:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>参考文献：</strong></p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>zabbix一般都是这几个表太大， history， history_uint，history_log</p><p>zabbix里面的时间是用的时间戳方式记录，我们可以转换一下，然后根据时间戳来删除；</p><p>比如要删除2014年的1月1号以前的数据，先将标准时间转换为时间戳</p><pre><code># date +%s -d &quot;2018-05-15 00:00:01&quot;1526313601</code></pre><h1 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h1><h2 id="停止应用"><a href="#停止应用" class="headerlink" title="停止应用"></a>停止应用</h2><p><strong>停止zabbix_server</strong></p><p>[root@dwb-dev1 ~]$ /etc/init.d/zabbix_server stop</p><h2 id="清理数据"><a href="#清理数据" class="headerlink" title="清理数据"></a>清理数据</h2><p><strong>启动mysql</strong></p><pre><code>/bin/sh /usr/bin/mysqld_safe --datadir=/var/lib/mysql --socket=/var/lib/mysql/mysql.sock --pid-file=/var/run/mysqld/mysqld.pid --basedir=/usr --user=mysql/usr/libexec/mysqld --basedir=/usr --datadir=/var/lib/mysql --user=mysql --log-error=/var/log/mysqld.log --pid-file=/var/run/mysqld/mysqld.pid --socket=/var/lib/mysql/mysql.sockmysql&gt; DELETE FROM history_uint WHERE clock &lt; 1526313601;mysql&gt; delete from history  where clock &lt; 1526313601;mysql&gt; optimize table history;mysql&gt; optimize table history_uint;注：执行过优化命令之后可能会需要很长的一段时间，中间不要中断，否则容易丢失数据。</code></pre><h2 id="启动应用"><a href="#启动应用" class="headerlink" title="启动应用"></a>启动应用</h2><p>在数据库中给pt用户进行授权</p><p><strong>删除3个月之前的数据</strong></p><pre><code>pt-archiver --source h=192.168.1.202,P=3306,D=zabbix,t=history,u=pt,p=123456 --no-check-charset --where &apos;clock &lt; unix_timestamp(date_sub(curdate(),interval 3 month))&apos; --limit=500 --commit-each --sleep-coef=0.1 --nosafe-auto-increment --noversion-check --why-quit --purge --statistics --bulk-delete --progress=100000 &gt;&gt; ./tmp.log[root@master004-qa ~]# cat tmp.log TIME                ELAPSED   COUNT2018-05-21T10:02:53       0       02018-05-21T11:37:33    5679  1000002018-05-21T12:31:14    8900  2000002018-05-21T12:38:00    9307  3000002018-05-21T13:03:57   10863  313744Started at 2018-05-21T10:02:53, ended at 2018-05-21T13:40:20Source: D=zabbix,P=3306,h=192.168.1.202,p=...,t=history,u=ptSELECT 313744INSERT 0DELETE 313675Action             Count       Time        Pctselect               629 11701.8659      89.69bulk_deleting        628  1310.4642      10.04commit               629    30.3126       0.23other                  0     4.7184       0.04Exiting because there are no more rows.[root@master004-qa ~]# </code></pre><p><strong>释放空间</strong></p><pre><code>pt-online-schema-change --alter &quot;engine=innodb&quot; --print --charset utf8 --chunk-time 1.000000 --max-load Threads_running=50 --recurse=1 --check-interval 5.000000 --alter-foreign-keys-method=none --force --execute --statistics --max-lag 3.000000 --noversion-check --recursion-method=processlist --progress percentage,1 --user=pt --password=123456 --host=192.168.1.202 --port=3306 D=zabbix,t=history</code></pre><p><strong>创建主键</strong></p><pre><code>mysql -A zabbix -e &quot;alter table history add column id bigint auto_increment primary key first&quot; </code></pre>]]></content>
    
    <summary type="html">
    
      zabbix清理历史数据
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="运维监控体系" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E8%BF%90%E7%BB%B4%E7%9B%91%E6%8E%A7%E4%BD%93%E7%B3%BB/"/>
    
      <category term="zabbix" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E8%BF%90%E7%BB%B4%E7%9B%91%E6%8E%A7%E4%BD%93%E7%B3%BB/zabbix/"/>
    
    
      <category term="zabbix" scheme="http://yoursite.com/tags/zabbix/"/>
    
  </entry>
  
  <entry>
    <title>RDS</title>
    <link href="http://yoursite.com/2018/05/14/RDS/"/>
    <id>http://yoursite.com/2018/05/14/RDS/</id>
    <published>2018-05-14T03:36:33.000Z</published>
    <updated>2018-05-14T03:36:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.alibabacloud.com/help/zh/product/26090.htm" target="_blank" rel="noopener">官方文档</a></p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>阿里云关系型数据库（Relational Database Service，简称 RDS）是一种稳定可靠、可弹性伸缩的在线数据库服务。基于阿里云分布式文件系统和SSD盘高性能存储，RDS 支持 MySQL、SQL Server、PostgreSQL 和 PPAS（Postgre Plus Advanced Server，一种高度兼容 Oracle 的数据库）引擎，并且提供了容灾、备份、恢复、监控、迁移等方面的全套解决方案，彻底解决数据库运维的烦恼。</p><h2 id="RDS的特点"><a href="#RDS的特点" class="headerlink" title="RDS的特点"></a>RDS的特点</h2><p>云数据库RDS作为一个公共的关系型数据库，高可用和高安全是其首要优势，其次才是高性能，因为没人会使用既不稳定又不安全的服务。RDS的优势主要体现在如下几点：</p><ul><li>RDS提供了主备双节点的实例，双节点可以在同一地域的不同可用区，MySQL实例的双节点还可以在不同地域，当主实例出现故障时可快速切换到备实例，保障了RDS的稳定性。</li></ul><ul><li>RDS在数据的存取上加入了中间层，所有请求都会经过中间层，而且有SQL注入的请求都会被中间层拦截掉。在底层数据写入上，RDS采用了最高安全级别的写入，保证在主机异常掉电的情况下数据不会出现丢失。以此来保障数据库的高安全性。</li></ul><p>RDS源码团队持续对MySQL进行源码优化，在标准的基准测试中性能和稳定性上都是高于社区版本的。</p><p>关于这部分内容可以查看：<a href="https://www.alibabacloud.com/help/zh/doc-detail/55823.htm?spm=a2c63.p38356.a3.4.563d5e74FcHTfi" target="_blank" rel="noopener">对比ECS自建数据库与RDS性能时的注意事项</a></p><h2 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h2><p><strong>数据库账号</strong></p><p>当用户创建实例后，RDS并不会为用户创建任何初始的数据库账号。</p><p>有如下两种方式来创建数据库帐号：</p><ul><li><p>用户可以通过控制台或者API来创建普通数据库账号，并设置数据库级别的读写权限。</p></li><li><p>如果用户需要更细粒度的权限控制，比如表、视图，字段级别的权限，也可以通过控制台或者API先创建高权限数据库账号，并使用数据库客户端和高权限数据库账号来创建普通数据库账号。高权限数据库账号可以为普通数据库账号设置表级别的读写权限。</p></li></ul><blockquote><p>说明：通过高权限数据库账号创建的普通数据库账号，无法通过控制台或者API进行管理。</p></blockquote><p><strong>IP白名单</strong></p><p>虽然RDS不支持ECS的安全组功能，但是RDS提供了IP白名单来实现网络安全访问控制。</p><p>默认情况下，RDS实例被设置为不允许任何IP访问，即127.0.0.1。</p><p>用户可以通过控制台的数据安全性模块或者API来添加IP白名单规则。IP白名单的更新无需重启RDS实例，因此不会影响用户的使用。</p><p>IP白名单可以设置多个分组，每个分组可配置1000个IP或IP段。</p><p>设置白名单后，只有以下服务器才能访问RDS实例：</p><ul><li>白名单中 IP 地址所属的服务器</li></ul><ul><li>白名单中 ECS 安全组内的 ECS 实例</li></ul><p>注意事项：</p><ul><li>系统会给每个实例创建一个默认的default白名单分组，该白名单分组只能被修改或清空，但不能被删除。</li></ul><ul><li>对于新建的RDS实例，系统默认会将回送地址127.0.0.1添加到default白名单分组中，IP地址127.0.0.1代表禁止所有IP地址或IP段访问该RDS实例。所以，在您设置白名单时，需要先将127.0.0.1删除，然后再添加您允许访问该RDS实例的IP地址或IP段。</li></ul><ul><li>若将白名单设置为%或者0.0.0.0/0，代表允许任何IP访问RDS实例。该设置将极大降低数据库的安全性，如非必要请勿使用。</li></ul><p><strong>安全组</strong></p><ul><li>目前仅杭州、青岛、香港地域支持 ECS 安全组。</li></ul><ul><li>目前仅支持添加一个安全组。</li></ul><ul><li>对白名单中的 ECS 安全组的更新将实时应用到白名单中。</li></ul><h2 id="系统安全"><a href="#系统安全" class="headerlink" title="系统安全"></a>系统安全</h2><ul><li><p>RDS 处于多层防火墙的保护之下，可以有力地抗击各种恶意攻击，保证数据的安全。</p></li><li><p>RDS 服务器不允许直接登录，只开放特定的数据库服务所需要的端口。</p></li><li><p>RDS 服务器不允许主动向外发起连接，只能接受被动访问。</p></li></ul><h2 id="数据链路服务"><a href="#数据链路服务" class="headerlink" title="数据链路服务"></a>数据链路服务</h2><p>阿里云数据库提供全数据链路服务，包括 DNS、负载均衡、Proxy 等。因为 RDS 使用原生的 DB Engine，对数据库的操作高度类似，基本没有学习成本。</p><p><strong>DNS</strong></p><p>DNS 模块提供域名到 IP 的动态解析功能，以便规避 RDS 实例 IP 地址改变带来的影响。在连接池中设置域名后，即使对应的IP地址发生了变化，仍然可以正常访问 RDS 实例。</p><p>例如，某 RDS 实例的域名为 test.rds.aliyun.com，对应的 IP 地址为 10.10.10.1。某程序连接池中设置为 test.rds.aliyun.com 或 10.10.10.1 都可以正常访问 RDS 实例。</p><p>一旦该 RDS 实例发生了可用区迁移或者版本升级后，IP 地址可能变为 10.10.10.2。如果程序连接池中设置的是域名 test.rds.aliyun.com，则仍然可以正常访问 RDS 实例。但是如果程序连接池中设置的是IP地址 10.10.10.1，就无法访问 RDS 实例了。</p><p><strong>负载均衡</strong></p><p>负载均衡 模块提供实例 IP 地址（包括内网 IP 和外网 IP），以便屏蔽物理服务器变化带来的影响。</p><p>例如，某 RDS 实例的内网 IP 地址为 10.1.1.1，对应的 Proxy 或者 DB Engine 运行在 192.168.0.1 上。在正常情况下，负载均衡 模块会将访问 10.1.1.1 的流量重定向到 192.168.0.1 上。当 192.168.0.1 发生了故障，处于热备状态的 192.168.0.2 接替了 192.168.0.1 的工作。此时 负载均衡 模块会将访问 10.1.1.1 的流量重定向到 192.168.0.2 上，RDS 实例仍旧正常提供服务。</p><p><strong>Proxy</strong></p><p>Proxy 模块提供数据路由、流量探测和会话保持等功能。</p><ul><li>数据路由功能：支持大数据场景下的分布式复杂查询聚合和相应的容量管理。</li><li>流量探测功能：降低 SQL 注入的风险，在必要情况下支持 SQL 日志的回溯。</li><li>会话保持功能：解决故障场景下的数据库连接中断问题。</li></ul><h2 id="高可用服务"><a href="#高可用服务" class="headerlink" title="高可用服务"></a>高可用服务</h2><p>高可用服务由 <strong><code>Detection、Repair、Notice</code></strong> 等模块组成，主要保障<strong><code>数据链路服务</code></strong>的可用性，除此之外还负责处理数据库内部的异常。</p><p>另外，RDS 还通过迁移到支持多可用区的地域和采用适当的高可用策略，提升 RDS 的高可用服务。</p><p><strong>Detection</strong></p><blockquote><p>Detection 模块负责检测 DB Engine 的主节点和备节点是否提供了正常的服务。通过间隔为 8~10 秒的心跳信息，HA 节点可以轻易获得主节点的健康情况，结合备节点的健康情况和其它 HA 节点的心跳信息，Detection 模块可以排除网络抖动等异常引入的误判风险，在 30 秒内完成异常切换操作。</p></blockquote><p><strong>Repair</strong></p><p>Repair 模块负责维护 DB Engine 的主节点和备节点之间的复制关系，还会修复主节点或者备节点在日常运行中出现的错误。</p><p>例如：</p><ul><li>主备复制异常断开的自动修复</li><li>主备节点表级别损坏的自动修复</li><li>主备节点 Crash 的现场保存和自动修复</li></ul><p><strong>Notice</strong></p><p>Notice 模块负责将主备节点的状态变动通知到 负载均衡 或者 Proxy，保证用户访问正确的节点。</p><p>例如：Detection 模块发现主节点异常，并通知 Repair 模块进行修复。Repair 模块进行了尝试后无法修复主节点，通知 Notice 进行流量切换。Notice 模块将切换请求转发至 负载均衡 或者Proxy，此时用户流量全部指向备节点。与此同时，Repair 在别的物理服务器上重建了新的备节点，并将变动同步给 Detection 模块。Detection 模块开始重新检测实例的健康状态。</p><p><strong>多可用区</strong></p><p>RDS在特定地域提供了多可用区部署的能力，也就是将RDS的主备实例分别部署于同一地域的不同可用区。相对于单可用区 RDS 实例，多可用区 RDS 实例可以承受更高级别的灾难。</p><p>目前多可用区 RDS 不额外收取任何费用，用户可以直接在已开通多可用区的地域购买多可用区 RDS 实例，也可以通过跨可用区迁移将单可用区 RDS 实例转化成多可用区 RDS 实例。</p><p>注意： 因为多可用区之间存在一定的网络延迟，因此多可用区 RDS 实例在采用半同步数据复制方案的时候，对于单个更新的响应时间会比单可用区实例长。这种情况最好通过提高并发量的方式来实现整体吞吐量的提高。</p><p><strong>高可用策略</strong></p><p>高可用策略是根据用户自身业务的特点，采用服务优先级和数据复制方式之间的不同组合，以组合出适合自身业务特点的高可用策略。</p><p>服务优先级有以下两个级别：</p><ul><li><p>RTO（Recovery Time Objective）优先：数据库应该尽快恢复服务，即可用时间最长。对于数据库在线时间要求比较高的用户应该使用 RTO 优先策略。</p></li><li><p>RPO（Recovery Point Objective）优先：数据库应该尽可能保障数据的可靠性，即数据丢失量最少。对于数据一致性要求比较高的用户应该使用 RPO 优先策略。</p></li></ul><p>数据复制方式有以下三种方式：</p><ul><li><p>异步复制（Async）：应用发起更新（含增加、删除、修改操作）请求，Master 完成相应操作后立即响应应用，Master 向 Slave 异步复制数据。因此异步复制方式下，Slave 不可用不影响主库上的操作，而 Master 不可用有较小概率会引起数据不一致。</p></li><li><p>强同步复制（Sync）：应用发起更新（含增加、删除、修改操作）请求，Master 完成操作后向 Slave 复制数据，Slave 接收到数据后向 Master 返回成功信息，Master 接到 Slave 的反馈后再响应应用。Master 向 Slave 复制数据是同步进行的，因此 Slave 不可用会影响 Master 上的操作，而 Master 不可用不会引起数据不一致。</p></li><li><p>半同步复制（Semi-Sync）：正常情况下数据复制方式采用强同步复制方式，当 Master 向 Slave 复制数据出现异常的时候（Slave 不可用或者双节点间的网络异常），Master 会暂停对应用的响应，直到复制方式超时退化成异步复制。如果允许应用在此时更新数据，则 Master 不可用会引起数据不一致。当双节点间的数据复制恢复正常（Slave 恢复或者网络恢复），异步复制会恢复成强同步复制。恢复成强同步复制的时间取决于半同步复制的实现方式，阿里云数据库 MySQL 5.5 版和 MySQL 5.6 版有所不同。</p></li></ul><h1 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h1><h2 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h2><h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><p>阿里云上的MySQL提供基础版、高可用版和金融版三种版本</p><blockquote><p>基础版一般就是用于个人学习、或开发测试时使用。目前基础版只提供MySQL 5.7版本，并且只提供单节点部署，性价比非常高。基础版采用计算节点与存储分离的实现方式，也就是说假如计算节点宕机，MySQL就不可用啦，但数据都存在云盘里面不会丢，数据一致性还是可以得到保证，不用担心数据丢失。可用性不高这是基础版的最大问题，反正只是用于不重要的场景，生产环境大家是不会选用基础版的。</p><p>高可用版顾名思义，为应用提供了数据库的高可用保障，也就是说至少要用双节点。RDS MySQL高可用版采用一主一备的经典高可用架构，采用基于binlog的数据复制技术维护数据库的可用性和数据一致性。同时，高可用版从性能上也可以保障业务生产环境的需求，配置上采用物理服务器部署，本地SSD硬盘，提供最佳性能，各方面表现均衡。</p><p>最高级的是金融版，针对像金融、证券、保险等行业的核心数据库，他们对数据安全性、可用性要求非常高。金融版采用三节点，实现一主两备的部署架构，通过binlog日志多副本多级别复制，确保数据的强一致性，可提供金融级的数据可靠性和跨机房容灾能力。</p></blockquote><h3 id="规格"><a href="#规格" class="headerlink" title="规格"></a>规格</h3><p>阿里云上MySQL有三种规格类型：通用型、独享型和独占型。</p><blockquote><p>其中通用型和独享型都是在一台物理服务器上划分多个资源隔离的区域，为不同用户提供MySQL数据库实例。他们的不同点在于，通用型对于CPU和存储空间采用了复用的技术。当部署在同一台服务器上的所有MySQL 实例都很繁忙的情况下，有可能会出现实例间的CPU争抢，或存储的争抢；而独享型虽然也是多个数据库实例共享一台物理服务器，但资源隔离策略上确保每个用户都可以独享所分配到的CPU、内存、I/O、存储，不会出现多个实例发生资源争抢的情况。</p><p>最高级别的一种是独占型，是指一个MySQL实例独占一台服务器，会获得最好的性能，当然价格也最贵。最求极致性能但对价格不敏感的客户一般会在重要业务系统采用独占型实例。</p></blockquote><h3 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h3><p>通常，从新购实例到可以开始使用实例，需要完成如下操作：</p><p><img src="http://picture.watchmen.xin/RDS/RDS.png" alt="RDS"></p><h3 id="使用限制"><a href="#使用限制" class="headerlink" title="使用限制"></a>使用限制</h3><h3 id="高权限账号"><a href="#高权限账号" class="headerlink" title="高权限账号"></a>高权限账号</h3><h3 id="数据库连接"><a href="#数据库连接" class="headerlink" title="数据库连接"></a>数据库连接</h3><p>注意：目前只支持同一个可用区的连接，不同可用区无法连接，如果需要跨越可用区，需要进行设置</p><p>目前RDS连接可以使用DMS连接或者第三方工具连接</p><h3 id="跨可用区访问"><a href="#跨可用区访问" class="headerlink" title="跨可用区访问"></a>跨可用区访问</h3><h3 id="管理工具-DMS"><a href="#管理工具-DMS" class="headerlink" title="管理工具-DMS"></a>管理工具-DMS</h3><p>DMS 是一款访问管理云端数据库的Web服务，支持Redis、 MySQL、SQL Server、PostgreSQL和MongoDB等数据源。DMS提供了数据管理、对象管理、数据流转和实例管理四部分功能。DMS使用也非常简单：</p><h3 id="数据迁移-DTS"><a href="#数据迁移-DTS" class="headerlink" title="数据迁移-DTS"></a>数据迁移-DTS</h3><p><strong>相关资料：</strong></p><ul><li><a href="https://www.alibabacloud.com/help/zh/doc-detail/26592.htm?spm=a2c63.l28256.b99.2.7f4a179d8ncgjh" target="_blank" rel="noopener">文档中心</a></li><li><a href="https://help.aliyun.com/product/26590.html" target="_blank" rel="noopener">帮助中心</a></li><li><a href="https://help.aliyun.com/document_detail/26627.html?spm=a2c4g.11186623.6.593.iT6gzz" target="_blank" rel="noopener">ECS自建数据库迁移到RDS</a></li></ul><h4 id="DTS概述"><a href="#DTS概述" class="headerlink" title="DTS概述"></a>DTS概述</h4><p>数据传输(Data Transmission)服务DTS是阿里云提供的一种支持RDBMS(关系型数据库)、NoSQL、OLAP等多种数据源之间数据交互的数据服务。它提供了数据迁移、实时数据订阅及数据实时同步等多种数据传输能力。通过数据传输可实现不停服数据迁移、数据异地灾备、跨境数据同步、缓存更新策略等多种业务应用场景，助您构建安全、可扩展、高可用的数据架构。</p><ul><li>数据传输服务DTS的目标是帮用户将复杂的数据交互工作承担下来，让用户可以专注于上层的业务开发，数据传输服务承诺99.95%的链路稳定性。</li></ul><ul><li>数据传输服务DTS支持多种数据源类型，例如：<ul><li>关系型数据库：Oracle、MySQL、SQLServer、PostgreSQL</li><li>NoSQL: Redis </li><li>OLAP: 分析型数据库AnalyticDB </li></ul></li></ul><p>迁移服务主要帮助用户把数据从本地数据库迁移到阿里云数据库，或者把阿里云数据库的一个实例迁移到另一实例中。阿里云数据库提供了数据传输服务DTS（Data Transfer Service）工具，方便用户快速的迁移数据库。</p><p>DTS是一个云上的数据传输服务，能快速的将本地数据库或者RDS中的实例迁移到另一个RDS实例中。关于DTS简介，请参见DTS产品概述。</p><p>DTS提供了三种迁移模式，分别为结构迁移、全量迁移和增量迁移：</p><ul><li>结构迁移：DTS会将迁移对象的结构定义迁移到目标实例，目前支持结构迁移的对象有表、视图、触发器、存储过程和存储函数。</li></ul><ul><li>全量迁移：DTS会将源数据库迁移对象已有数据全部迁移到目标实例中。</li></ul><blockquote><p>注意：在全量迁移过程中，为了保证数据一致性，无主键的非事务表会被锁定。锁定期间这些表无法写入，锁定时长依赖于这些表的数据量大小。在这些无主键非事务表迁移完成后，锁才会释放。</p></blockquote><ul><li>增量迁移：DTS会将迁移过程中数据变更同步到目标实例。</li></ul><p>,</p><blockquote><p>注意：如果迁移期间进行了DDL操作，这些结构变更不会同步到目标实例。</p></blockquote><h4 id="源及目标"><a href="#源及目标" class="headerlink" title="源及目标"></a>源及目标</h4><p><strong>数据迁移支持的源实例类型包括:</strong></p><p>(1) RDS实例</p><p>(2) 本地自建数据库</p><p>(3) ECS自建数据库</p><p><strong>数据迁移支持的目标实例包括：</strong></p><p>(1) RDS实例</p><p>(2) ECS自建数据库</p><p>(3) Redis实例</p><h4 id="Mysql迁移限制"><a href="#Mysql迁移限制" class="headerlink" title="Mysql迁移限制"></a>Mysql迁移限制</h4><p>对于本地 MySQL-&gt;RDS for MySQL 的数据迁移，DTS 支持结构迁移、全量数据迁移及增量数据迁移，各迁移类型的功能及限制如下：</p><ul><li>迁移过程中，不支持 DDL 操作。</li><li>结构迁移不支持 event 的迁移。</li><li>如果使用了对象名映射功能后，依赖这个对象的其他对象可能迁移失败。</li><li>当选择增量迁移时，源端的本地 MySQL 实例需要按照要求开启 binlog。</li><li>当选择增量迁移时，源库的 binlog_format 需要设置为 row。</li><li>当选择增量迁移且源 MySQL 实例如果为 5.6 或以上版本时，它的 binlog_row_image 必须为 full。</li></ul><h4 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h4><p>数据实时同步功能旨在帮助用户实现两个数据源之间的数据实时同步。通过数据实时同步功能可实现数据异地灾备、本地数据灾备、跨境数据同步及在线离线数据打通(OLTP-&gt;OLAP数据同步)等多种业务场景。</p>]]></content>
    
    <summary type="html">
    
      RDS知识
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="公有云产品" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%85%AC%E6%9C%89%E4%BA%91%E4%BA%A7%E5%93%81/"/>
    
      <category term="阿里云" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%85%AC%E6%9C%89%E4%BA%91%E4%BA%A7%E5%93%81/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
    
      <category term="RDS" scheme="http://yoursite.com/tags/RDS/"/>
    
  </entry>
  
  <entry>
    <title>HTTP请求</title>
    <link href="http://yoursite.com/2018/05/13/HTTP%E8%AF%B7%E6%B1%82/"/>
    <id>http://yoursite.com/2018/05/13/HTTP请求/</id>
    <published>2018-05-13T11:44:23.000Z</published>
    <updated>2018-05-13T11:44:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文转载自：<a href="https://www.cnblogs.com/yin-jingyu/archive/2011/08/01/2123548.html" target="_blank" rel="noopener">HTTP深入浅出 http请求</a></p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>HTTP(HyperText Transfer Protocol)是一套计算机通过网络进行通信的<strong><code>规则</code></strong>。</p><p>计算机专家设计出HTTP，使HTTP客户（如Web浏览器）能够从HTTP服务器(Web服务器)请求信息和服务，HTTP目前协议的版本是1.1。</p><p>HTTP是一种<strong><code>无状态</code></strong>的协议，无状态是指Web浏览器和Web服务器之间不需要建立持久的连接，这意味着当一个客户端向服务器端发出请求，然后Web服务器返回响应(response)，连接就被关闭了，在服务器端不保留连接的有关信息.HTTP遵循请求(Request)/应答(Response)模型。Web浏览器向Web服务器发送请求，Web服务器处理请求并返回适当的应答。所有HTTP连接都被构造成一套请求和应答。</p><p>HTTP使用内容类型，是指Web服务器向Web浏览器返回的文件都有与之相关的类型。所有这些类型在MIME　Internet邮件协议上模型化，即Web服务器告诉Web浏览器该文件所具有的种类，是HTML文档、GIF格式图像、声音文件还是独立的应用程序。大多数Web浏览器都拥有一系列的可配置的辅助应用程序，它们告诉浏览器应该如何处理Web服务器发送过来的各种内容类型。</p><h1 id="通信过程"><a href="#通信过程" class="headerlink" title="通信过程"></a>通信过程</h1><p>在一次完整的HTTP通信过程中，Web浏览器与Web服务器之间将完成下列7个步骤：</p><p><strong>1. 建立TCP连接</strong></p><blockquote><p>在HTTP工作开始之前，Web浏览器首先要通过网络与Web服务器建立连接，该连接是通过TCP来完成的，该协议与IP协议共同构建Internet，即著名的TCP/IP协议族，因此Internet又被称作是TCP/IP网络。HTTP是比TCP更高层次的应用层协议，根据规则，只有低层协议建立之后才能，才能进行更层协议的连接，因此，首先要建立TCP连接，一般TCP连接的端口号是80</p></blockquote><p><strong>2. Web浏览器向Web服务器发送请求命令</strong></p><blockquote><p>一旦建立了TCP连接，Web浏览器就会向Web服务器发送请求命令</p><p>例如：GET/sample/hello.jsp HTTP/1.1</p></blockquote><p><strong>3. Web浏览器发送请求头信息</strong></p><blockquote><p>浏览器发送其请求命令之后，还要以头信息的形式向Web服务器发送一些别的信息，之后浏览器发送了一空白行来通知服务器，它已经结束了该头信息的发送。</p></blockquote><p><strong>4. Web服务器应答</strong></p><blockquote><p>客户机向服务器发出请求后，服务器会客户机回送应答，</p><p>HTTP/1.1 200 OK</p><p>应答的第一部分是协议的版本号和应答状态码</p></blockquote><p><strong>5. Web服务器发送应答头信息</strong></p><blockquote><p>正如客户端会随同请求发送关于自身的信息一样，服务器也会随同应答向用户发送关于它自己的数据及被请求的文档。</p></blockquote><p><strong>6. Web服务器向浏览器发送数据</strong></p><blockquote><p>Web服务器向浏览器发送头信息后，它会发送一个空白行来表示头信息的发送到此为结束，接着，它就以Content-Type应答头信息所描述的格式发送用户所请求的实际数据</p></blockquote><p><strong>7. Web服务器关闭TCP连接</strong></p><blockquote><p>一般情况下，一旦Web服务器向浏览器发送了请求数据，它就要关闭TCP连接，然后如果浏览器或者服务器在其头信息加入了这行代码<br><strong><code>Connection:keep-alive</code></strong></p><p>添加之后，TCP连接在发送后将仍然保持打开状态，于是，浏览器可以继续通过相同的连接发送请求。保持连接节省了为每个请求建立新连接所需的时间，还节约了网络带宽。</p></blockquote><h1 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h1><h2 id="HTTP请求格式"><a href="#HTTP请求格式" class="headerlink" title="HTTP请求格式"></a>HTTP请求格式</h2><p>当浏览器向Web服务器发出请求时，它向服务器传递了一个数据块，也就是请求信息，HTTP请求信息由3部分组成：</p><ul><li>请求方法URI协议/版本</li></ul><ul><li>请求头(Request Header)</li></ul><ul><li>请求正文</li></ul><p>下面是一个HTTP请求的例子：</p><pre><code>GET/sample.jspHTTP/1.1Accept:image/gif.image/jpeg,*/*Accept-Language:zh-cnConnection:Keep-AliveHost:localhostUser-Agent:Mozila/4.0(compatible;MSIE5.01;Window NT5.0)Accept-Encoding:gzip,deflateusername=jinqiao&amp;password=1234</code></pre><p><strong>说明：</strong></p><p>（1）请求方法URI协议/版本</p><p>请求的第一行是“方法URL议/版本”：GET/sample.jsp HTTP/1.1</p><blockquote><p>以上代码中“GET”代表请求方法，“/sample.jsp”表示URI，“HTTP/1.1代表协议和协议的版本。</p><p>根据HTTP标准，HTTP请求可以使用多种请求方法。例如：HTTP1.1支持7种请求方法：GET、POST、HEAD、OPTIONS、PUT、DELETE和TARCE。在Internet应用中，最常用的方法是GET和POST。</p><p>URL完整地指定了要访问的网络资源，通常只要给出相对于服务器的根目录的相对目录即可，因此总是以“/”开头，最后，协议版本声明了通信过程中使用HTTP的版本。</p></blockquote><p>（2）请求头(Request Header)</p><p>请求头包含许多有关的客户端环境和请求正文的有用信息。例如，请求头可以声明浏览器所用的语言，请求正文的长度等。</p><pre><code>Accept:image/gif.image/jpeg.*/*Accept-Language:zh-cnConnection:Keep-AliveHost:localhostUser-Agent:Mozila/4.0(compatible:MSIE5.01:Windows NT5.0)Accept-Encoding:gzip,deflate.</code></pre><p>（3）请求正文</p><p>请求头和请求正文之间是一个空行，这个行非常重要，它表示请求头已经结束，接下来的是请求正文。</p><p>请求正文中可以包含客户提交的查询字符串信息：username=jinqiao&amp;password=1234</p><p>在以上的例子的HTTP请求中，请求的正文只有一行内容。当然，在实际应用中，HTTP请求正文可以包含更多的内容。</p><p>HTTP请求方法我这里只讨论GET方法与POST方法</p><ul><li>GET方法<blockquote><p>GET方法是默认的HTTP请求方法，我们日常用GET方法来提交表单数据，然而用GET方法提交的表单数据只经过了简单的编码，同时它将作为URL的一部分向Web服务器发送，因此，如果使用GET方法来提交表单数据就存在着安全隐患上。例如<br>Http://127.0.0.1/login.jsp?Name=zhangshi&amp;Age=30&amp;Submit=%cc%E+%BD%BB<br>从上面的URL请求中，很容易就可以辩认出表单提交的内容。（？之后的内容）另外由于GET方法提交的数据是作为URL请求的一部分所以提交的数据量不能太大</p></blockquote></li></ul><ul><li>POST方法</li></ul><blockquote><p>POST方法是GET方法的一个替代方法，它主要是向Web服务器提交表单数据，尤其是大批量的数据。POST方法克服了GET方法的一些缺点。通过POST方法提交表单数据时，数据不是作为URL请求的一部分而是作为标准数据传送给Web服务器，这就克服了GET方法中的信息无法保密和数据量太小的缺点。因此，出于安全的考虑以及对用户隐私的尊重，通常表单提交时采用POST方法。</p><p>从编程的角度来讲，如果用户通过GET方法提交数据，则数据存放在QUERY＿STRING环境变量中，而POST方法提交的数据则可以从标准输入流中获取。</p></blockquote><h2 id="HTTP响应"><a href="#HTTP响应" class="headerlink" title="HTTP响应"></a>HTTP响应</h2><p>HTTP应答与HTTP请求相似，HTTP响应也由3个部分构成，分别是：</p><ul><li>协议状态版本代码描述</li><li>响应头(Response Header)</li><li>响应正文</li></ul><p>下面是一个HTTP响应的例子：</p><pre><code>HTTP/1.1 200 OKServer:Apache Tomcat/5.0.12Date:Mon,6Oct2003 13:23:42 GMTContent-Length:112&lt;html&gt;&lt;head&gt;&lt;title&gt;HTTP响应示例&lt;title&gt;&lt;/head&gt;&lt;body&gt;Hello HTTP!&lt;/body&gt;&lt;/html&gt;</code></pre><p>（1）协议状态版本代码描述</p><blockquote><p>协议状态代码描述HTTP响应的第一行类似于HTTP请求的第一行，它表示通信所用的协议是HTTP1.1服务器已经成功的处理了客户端发出的请求（200表示成功）:</p></blockquote><pre><code>HTTP/1.1 200 OK</code></pre><p>（2）响应头</p><blockquote><p>响应头(Response Header)响应头也和请求头一样包含许多有用的信息，例如服务器类型、日期时间、内容类型和长度等：</p></blockquote><pre><code>　　 Server:Apache Tomcat/5.0.12Date:Mon,6Oct2003 13:13:33 GMTContent-Type:text/htmlLast-Moified:Mon,6 Oct 2003 13:23:42 GMTContent-Length:112</code></pre><p>（3）响应正文</p><blockquote><p>响应正文响应正文就是服务器返回的HTML页面：</p></blockquote><pre><code>　　&lt;html&gt;&lt;head&gt;&lt;title&gt;HTTP响应示例&lt;title&gt;&lt;/head&gt;&lt;body&gt;Hello HTTP!&lt;/body&gt;&lt;/html&gt;</code></pre><p><strong>响应头和正文之间也必须用空行分隔。　</strong>　</p><h2 id="HTTP应答码"><a href="#HTTP应答码" class="headerlink" title="HTTP应答码"></a>HTTP应答码</h2><p>　HTTP应答码也称为状态码，它反映了Web服务器处理HTTP请求状态。HTTP应答码由3位数字构成，其中首位数字定义了应答码的类型：</p><pre><code>　　　1XX－信息类(Information),表示收到Web浏览器请求，正在进一步的处理中　　　2XX－成功类（Successful）,表示用户请求被正确接收，理解和处理例如：200 OK3XX-重定向类(Redirection),表示请求没有成功，客户必须采取进一步的动作。4XX-客户端错误(Client Error)，表示客户端提交的请求有错误 例如：404 NOT Found，意味着请求中所引用的文档不存在。5XX-服务器错误(Server Error)表示服务器不能完成对请求的处理：如 500</code></pre><h2 id="常见请求方法"><a href="#常见请求方法" class="headerlink" title="常见请求方法"></a>常见请求方法</h2><ul><li>GET 通过请求URI得到资源</li></ul><ul><li>POST<br>用于添加新的内容</li></ul><ul><li>PUT<br>用于修改某个内容</li></ul><ul><li>DELETE<br>删除某个内容</li></ul><ul><li>CONNECT,<br>用于代理进行传输，如使用SSL</li></ul><ul><li>OPTIONS<br>询问可以执行哪些方法</li></ul><ul><li>PATCH,<br>部分文档更改</li></ul><ul><li>PROPFIND, (wedav)<br>查看属性</li></ul><ul><li>PROPPATCH, (wedav)<br>设置属性</li></ul><ul><li>MKCOL, (wedav)<br>创建集合（文件夹）</li></ul><ul><li>COPY, (wedav)<br>拷贝</li></ul><ul><li>MOVE, (wedav)<br>移动</li></ul><ul><li>LOCK, (wedav)<br>加锁</li></ul><ul><li>UNLOCK (wedav)<br>解锁</li></ul><ul><li>TRACE<br>用于远程诊断服务器</li></ul><ul><li>HEAD<br>类似于GET, 但是不返回body信息，用于检查对象是否存在，以及得到对象的元数据</li></ul>]]></content>
    
    <summary type="html">
    
      HTTP深入浅出之http请求
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="网络知识" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86/"/>
    
      <category term="HTTP请求" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86/HTTP%E8%AF%B7%E6%B1%82/"/>
    
    
      <category term="HTTP请求" scheme="http://yoursite.com/tags/HTTP%E8%AF%B7%E6%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper常用命令</title>
    <link href="http://yoursite.com/2018/05/02/Zookeeper%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/05/02/Zookeeper常用命令/</id>
    <published>2018-05-02T11:43:32.000Z</published>
    <updated>2018-05-02T11:43:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="zk客户端命令"><a href="#zk客户端命令" class="headerlink" title="zk客户端命令"></a>zk客户端命令</h1><p>zookeeper命令行工具类似于Linux的shell环境，使用它我们可以简单的对zookeeper进行访问、数据创建、数据修改等操作</p><p><strong>语法：</strong></p><pre><code>$ sh zkCli.sh -server 127.0.0.1:2181</code></pre><p><strong>一些简单操作：</strong></p><ul><li>显示根目录下、文件： ls / 使用 ls 命令来查看当前 ZooKeeper 中所包含的内容</li></ul><ul><li>显示根目录下、文件： ls2 / 查看当前节点数据并能看到更新次数等数据</li></ul><ul><li>创建文件，并设置初始内容： create /zk “test” 创建一个新的 znode节点“ zk ”以及与它关联的字符串</li></ul><ul><li>获取文件内容： get /zk 确认 znode 是否包含我们所创建的字符串</li></ul><ul><li>修改文件内容： set /zk “zkbak” 对 zk 所关联的字符串进行设置</li></ul><ul><li>删除文件： delete /zk 将刚才创建的 znode 删除</li></ul><ul><li>退出客户端： quit</li></ul><ul><li>帮助命令： help</li></ul><p><strong>四字命令：</strong></p><p>ZooKeeper 支持某些特定的四字命令字母与其的交互。它们大多是查询命令，用来获取 ZooKeeper 服务的当前状态及相关信息。用户在客户端可以通过 telnet 或 nc 向 ZooKeeper 提交相应的命令</p><ul><li>echo stat|nc 127.0.0.1 2181 来查看哪个节点被选择作为follower或者leader</li></ul><ul><li>echo ruok|nc 127.0.0.1 2181 测试是否启动了该Server，若回复imok表示已经启动。</li></ul><ul><li>echo dump| nc 127.0.0.1 2181 ,列出未经处理的会话和临时节点。</li></ul><ul><li>echo kill | nc 127.0.0.1 2181 ,关掉server</li></ul><ul><li>echo conf | nc 127.0.0.1 2181 ,输出相关服务配置的详细信息。</li></ul><ul><li>echo cons | nc 127.0.0.1 2181 ,列出所有连接到服务器的客户端的完全的连接 / 会话的详细信息。</li></ul><ul><li>echo envi |nc 127.0.0.1 2181 ,输出关于服务环境的详细信息（区别于 conf 命令）。</li></ul><ul><li>echo reqs | nc 127.0.0.1 2181 ,列出未经处理的请求。</li></ul><ul><li>echo wchs | nc 127.0.0.1 2181 ,列出服务器 watch 的详细信息。</li></ul><ul><li>echo wchc | nc 127.0.0.1 2181 ,通过 session 列出服务器 watch 的详细信息，它的输出是一个与 watch 相关的会话的列表。</li></ul><ul><li>echo wchp | nc 127.0.0.1 2181 ,通过路径列出服务器 watch 的详细信息。它输出一个与 session 相关的路径。</li></ul>]]></content>
    
    <summary type="html">
    
      Zookeeper常用命令
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="大数据" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="大数据相关组件" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/"/>
    
      <category term="Zookeeper" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/Zookeeper/"/>
    
    
      <category term="Zookeeper常用命令" scheme="http://yoursite.com/tags/Zookeeper%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>MySQL普通用户无法本地登录的解决方法及MySQL的用户认证算法</title>
    <link href="http://yoursite.com/2018/05/02/MySQL%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7%E6%97%A0%E6%B3%95%E6%9C%AC%E5%9C%B0%E7%99%BB%E5%BD%95%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%E5%8F%8AMySQL%E7%9A%84%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2018/05/02/MySQL普通用户无法本地登录的解决方法及MySQL的用户认证算法/</id>
    <published>2018-05-02T10:00:00.000Z</published>
    <updated>2018-05-02T10:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>参考文献：</strong></p><ul><li><a href="http://www.cnblogs.com/linuxnote/p/3780244.html" target="_blank" rel="noopener">MySQL普通用户无法本地登录的解决方法及MySQL的用户认证算法</a></li></ul><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在启动cachecloud项目的时候，发现日志中出现大量的连接数据库报错</p><p>我的授权命令为：</p><pre><code>mysql&gt; grant all privileges on cache_cloud.* to &apos;cachecloud&apos;@&apos;%&apos; identified by &apos;Cache_cloud123&apos;;Query OK, 0 rows affected (0.00 sec)</code></pre><p>这样的配置，按道理来说，是不应该出现连不上的（%代表任意的主机来源，并且已经排查了防火墙等因素）</p><p>在本地登录发现发现存在如下问题：</p><p><img src="http://picture.watchmen.xin/mysql/cachecloud.png" alt=""></p><p>当输入之前设置的密码时，将会一直提示：“ERROR 1045 (28000): Access denied”，而当我们不输入密码，也就是说输入密码为空时则能正常进入数据库。</p><p>我们使用USER()和CURRENT_USER()两个函数查看所使用的用户。</p><pre><code>mysql&gt; SELECT USER(), CURRENT_USER();+----------------------+----------------+| USER()               | CURRENT_USER() |+----------------------+----------------+| cachecloud@localhost | @localhost     |+----------------------+----------------+1 row in set (0.00 sec)mysql&gt; </code></pre><blockquote><p>USER()函数返回你在客户端登陆时指定的用户名和主机名。</p><p>CURRENT_USER()函数返回的是MySQL使用授权表中的哪个用户来认证你的登录请求。</p></blockquote><p>这里发现，之前设置的授权规则并没有生效，是数据库使用的是’’@’localhost’这个来源信息来进行登录认证，而’’@’localhost’这个匿名用户是没有密码的，因此我输入空密码登录成功了。但是登录后，所对应的用户的匿名用户。</p><p><strong>一般在MySQL在安装完毕后，我们使用mysql_install_db这个脚本生成<font color="red"><code>授权表</code></font>，会默认创建’’@’localhost’这个匿名用户。正是因为这个匿名用户，影响了其他用户从本地登录的认证。</strong></p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>那么MySQL是如何进行用户身份认证呢？</p><p>MySQL的简要认证算法如下：</p><ul><li>当用户从客户端请求登陆时，MySQL将授权表中的条目与客户端所提供的条目进行比较，包括用户的用户名，密码和主机。</li></ul><ul><li>授权表中的Host字段是可以使用通配符作为模式进行匹配的，如test.example.com, %.example.com, %.com和%都可以匹配test.example.com这个主机。</li></ul><ul><li>授权表中的User字段不允许使用模式匹配，但是可以有一个空字符的用户名代表匿名用户，并且空字符串可以匹配所有的用户名，就像通配符一样。</li></ul><ul><li>当user表中的Host和User有多个值可以匹配客户端提供的主机和用户名时，MySQL将user表读入内存，并且按照一定规则排序，按照排序规则读取到的第一个匹配客户端用户名和主机名的条目对客户端进行身份验证。</li></ul><p><strong>排序规则：</strong></p><ul><li>对于Host字段，按照匹配的精确程度进行排序，越精确的排序越前，例如当匹配test.example.com这个主机时, %.example.com比%.com更精确，而test.example.com比%.example.com更精确。</li></ul><ul><li>对于User字段，非空的字符串用户名比空字符串匹配的用户名排序更靠前。</li></ul><ul><li>User和Host字段都有多个匹配值，MySQL使用主机名排序最前的条目，在主机名字段相同时再选取用户名排序更前的条目。</li></ul><ul><li>因此，如果User和Host字段都有多个匹配值，主机名最精确匹配的条目被用户对用户进行认证。</li></ul><p>了解了这个规则之后，我们就知道为什么cachecloud登录失败了。</p><p>在使用该用户进行本机登录的时候，mysql中有2个匹配条目</p><ol><li>‘cachecloud’@’%’ </li><li>‘’@’localhost’</li></ol><p>匿名用户能够匹配的原因上面说过，空字符串可以匹配所有的用户名，就像通配符一样。</p><p>根据MySQL认证时的排序规则，第一个条目的用户名排序更前，第二个条目的主机名更精确，排序更前。</p><p>而MySQL会优先使用主机名排序第一的条目进行身份认证，因此’’@’localhost’被用户对客户端进行认证。因此，只有使用匿名用户的空密码才能登录进数据库。就会出现刚才上面的情况了。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>删除匿名用户【仅仅是为了安全也有这个必要】</p><p><strong>为什么root用户不会受影响，而只有普通用户不能从本地登录？</strong></p><p>因为mysql_install_db脚本会在授权表中生成’root’@’localhost’这个账户。同样的，使用root登录MySQL时，’root’@’localhost’和’’@’localhost’都能匹配登录的账户，但是根据排序规则，主机名相同，而用户名非空字符串优先，因此’roo’@’localhost’这个条目的排序更靠前。使用root本地登录是不会被匿名用户遮盖。</p><pre><code>[root@qa1-common004 ~]# mysql -u root -p Enter password: Welcome to the MySQL monitor.  Commands end with ; or \g.Your MySQL connection id is 942Server version: 5.6.40 MySQL Community Server (GPL)Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.mysql&gt; mysql&gt; select user,host from mysql.user;+------------+---------------------------+| user       | host                      |+------------+---------------------------+| cachecloud | %                         || root       | 127.0.0.1                 || root       | ::1                       ||            | localhost                 || root       | localhost                 ||            | qa1-common004.ecs.east1-b || root       | qa1-common004.ecs.east1-b |+------------+---------------------------+7 rows in set (0.00 sec)mysql&gt; delete from mysql.user where user=&apos;&apos;;　Query OK, 2 rows affected (0.00 sec)mysql&gt; select user,host from mysql.user;　+------------+---------------------------+| user       | host                      |+------------+---------------------------+| cachecloud | %                         || root       | 127.0.0.1                 || root       | ::1                       || root       | localhost                 || root       | qa1-common004.ecs.east1-b |+------------+---------------------------+5 rows in set (0.00 sec)mysql&gt; flush privileges;Query OK, 0 rows affected (0.00 sec)mysql&gt; exit</code></pre><p>退出之后再次登录，问题得到解决。</p>]]></content>
    
    <summary type="html">
    
      MySQL普通用户无法本地登录的解决方法及MySQL的用户认证算法
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="数据库" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
      <category term="MySQL问题" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Mysql密码设置修改及恢复</title>
    <link href="http://yoursite.com/2018/05/02/Mysql%E5%AF%86%E7%A0%81%E8%AE%BE%E7%BD%AE%E4%BF%AE%E6%94%B9%E5%8F%8A%E6%81%A2%E5%A4%8D/"/>
    <id>http://yoursite.com/2018/05/02/Mysql密码设置修改及恢复/</id>
    <published>2018-05-02T06:24:22.000Z</published>
    <updated>2018-05-02T06:24:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mysql-5-6版本"><a href="#mysql-5-6版本" class="headerlink" title="mysql 5.6版本"></a>mysql 5.6版本</h2><p>mysql 5.6版本中，安装完毕之后不会设置初始密码，服务启动之后，直接输入mysql即可进入数据库</p><p><strong>安装之后的第一次密码设置</strong></p><pre><code># mysql  在终端直接输入mysql进入数据库mysql&gt; set password = password(&apos;Mysql_password123&apos;);mysql&gt; flush privileges;</code></pre><p><strong>修改密码</strong></p><p><strong>忘记密码之后的恢复</strong></p>]]></content>
    
    <summary type="html">
    
      Mysql密码设置修改及恢复
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="数据库" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
      <category term="Mysql密码" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/Mysql%E5%AF%86%E7%A0%81/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Linux下JDK的安装配置</title>
    <link href="http://yoursite.com/2018/04/28/Linux%E4%B8%8BJDK%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/04/28/Linux下JDK的安装配置/</id>
    <published>2018-04-28T03:28:39.000Z</published>
    <updated>2018-04-28T03:28:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Linux中JDK的配置主要分为以下几个步骤：</p><ul><li><p>下载</p></li><li><p>解压</p></li><li><p>软链接</p></li><li><p>配置系统/用户环境变量</p></li></ul><h2 id="下载："><a href="#下载：" class="headerlink" title="下载："></a>下载：</h2><p>官方下载链接：<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">下载</a></p><p>JAVA环境的配置主要分为两种，一种是由root用户操作，针对所有用户全局生效的配置，一种是由具体普通用户操作，仅针对该用户生效的配置</p><p>因此，以下的配置根据实际需求。</p><h2 id="全局生效-管理员权限操作"><a href="#全局生效-管理员权限操作" class="headerlink" title="全局生效-管理员权限操作"></a>全局生效-管理员权限操作</h2><p><strong>解压+软链接</strong></p><pre><code># tar -zxvf jdk-7u75-linux-x64.tar.gz -C /usr/local/# cd /usr/local/# ln -s /usr/local/jdk1.7.0_75/  /usr/local/JDK        </code></pre><p>创建软链接目的：灵活的版本升级切换</p><p><strong>配置系统环境变量：</strong></p><pre><code># vim /etc/profile  在文件末尾添加以下内容export JAVA_HOME=/usr/local/JDKexport JRE_HOME=$JAVA_HOME/jreexport CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/libexport PATH=$JAVA_HOME/bin:$JRE_HOME/bin::$CLASSPATH:$PATH# source /etc/profile</code></pre><h2 id="用户局部生效-用户环境变量"><a href="#用户局部生效-用户环境变量" class="headerlink" title="用户局部生效-用户环境变量**"></a>用户局部生效-用户环境变量**</h2><p>注意提示符的变化，这里以appdev用户为例</p><p><strong>解压+软链接</strong></p><pre><code>$ tar -zxvf jdk-7u75-linux-x64.tar.gz$ ln -s /home/appdev/jdk1.7.0_75/  /home/appdev/JDK        </code></pre><p>创建软链接目的：灵活的版本升级切换</p><p><strong>配置系统环境变量：</strong></p><pre><code>$ vim .bash_profile  在文件末尾添加以下内容export JAVA_HOME=/home/appdev/JDKexport JRE_HOME=$JAVA_HOME/jreexport CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/libexport PATH=$JAVA_HOME/bin:$JRE_HOME/bin::$CLASSPATH:$PATH$ source .bash_profile</code></pre>]]></content>
    
    <summary type="html">
    
      基础环境配置之JDK
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="基础环境配置" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
      <category term="JDK" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/JDK/"/>
    
    
      <category term="JDK" scheme="http://yoursite.com/tags/JDK/"/>
    
  </entry>
  
  <entry>
    <title>Cachecloud-Redis云平台</title>
    <link href="http://yoursite.com/2018/04/28/Cachecloud/"/>
    <id>http://yoursite.com/2018/04/28/Cachecloud/</id>
    <published>2018-04-28T02:45:56.000Z</published>
    <updated>2018-04-28T02:45:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Cachecloud介绍"><a href="#Cachecloud介绍" class="headerlink" title="Cachecloud介绍"></a>Cachecloud介绍</h1><p>有关cachecloud的一些基础知识，官方都有非常详细的文档，这里不再花费篇幅进行复述，下面是相关的资料链接，请自行查看。</p><ul><li>github官网：    <a href="https://github.com/sohutv/cachecloud" target="_blank" rel="noopener">https://github.com/sohutv/cachecloud</a></li><li>Wiki:            <a href="https://github.com/sohutv/cachecloud/wiki" target="_blank" rel="noopener">https://github.com/sohutv/cachecloud/wiki</a></li><li>博客：        <a href="https://cachecloud.github.io/" target="_blank" rel="noopener">https://cachecloud.github.io/</a></li><li>官方视频：  <a href="http://my.tv.sohu.com/pl/9100280/index.shtml" target="_blank" rel="noopener">http://my.tv.sohu.com/pl/9100280/index.shtml</a></li></ul><p><strong>简介：</strong></p><blockquote><p>CacheCloud提供一个Redis云管理平台：实现多种类型(Redis Standalone、Redis Sentinel、Redis Cluster)自动部署、解决Redis实例碎片化现象、提供完善统计、监控、运维功能、减少开发人员的运维成本和误操作，提高机器的利用率，提供灵活的伸缩性，提供方便的接入客户端。</p></blockquote><p><strong>提供的功能：</strong></p><ul><li>监控统计：    提供了机器、应用、实例下各个维度数据的监控和统计界面。</li><li>一键开启：    Redis Standalone、Redis Sentinel、Redis Cluster三种类型的应用，无需手动配置初始化。</li><li>Failover：    支持哨兵,集群的高可用模式。</li><li>伸缩：    提供完善的垂直和水平在线伸缩功能。</li><li>完善运维： 提供自动运维和简化运维操作功能，避免纯手工运维出错。</li><li>方便的客户端 方便快捷的客户端接入。</li><li>元数据管理： 提供机器、应用、实例、用户信息管理。</li><li>流程化： 提供申请，运维，伸缩，修改等完善的处理流程</li><li>一键导入： 一键导入已经存在Redis </li></ul><p><strong>须知：</strong></p><ul><li>Redis集群、redis哨兵集群、Redis单实例等在CacheCloud中都是以应用的形式存在，一个应用对应一个appid</li><li>一个redis集群是一个应用，分配一个appid（不管其中有几个节点）</li><li>一个哨兵集群是一个应用，分配一个appid（不管其中有几个主从节点和哨兵节点）</li><li>一个单实例是一个应用，分配一个appid</li></ul><p><strong>如何使用：</strong></p><p>我们在平台上的执行任何操作都需要<code>**账号**</code>，创建的单节点、哨兵、集群等都是以<strong><code>用户申请的应用</code></strong>形式存在的。普通用户的主要工单有</p><ul><li>注册用户申请</li><li>应用申请</li><li>应用扩容</li><li>应用配置修改</li></ul><p>管理员的界面可操作的选项较多，此处不做详细说明。</p><p><strong>客户端如何连接：</strong></p><p>客户端在第一次启动的时候去CacheCloud通过appId拿到Redis的节点信息，之后不会与CacheCloud打交道了。</p><p>流程图如下所示：</p><p><img src="http://picture.watchmen.xin/cachecloud/client.png" alt="客户端连接"></p><h1 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h1><p>这里只说单机环境，高可用环境将在下面章节说明：<a href="">CacheCloud高可用架构</a></p><p><strong>环境要求：</strong></p><ul><li>JDK 7+</li><li>Maven 3+</li><li>MySQL 5.5+</li><li>Redis 3+</li></ul><h2 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h2><h3 id="JDK-Maven"><a href="#JDK-Maven" class="headerlink" title="JDK+Maven"></a>JDK+Maven</h3><p><strong>JDK：</strong></p><p>步骤：</p><ul><li>下载</li><li>解压</li><li>软链接</li><li>配置系统环境变量</li></ul><p>操作如下：</p><pre><code>[root@qa1-common004 local]# java -version java version &quot;1.8.0_77&quot;Java(TM) SE Runtime Environment (build 1.8.0_77-b03)Java HotSpot(TM) 64-Bit Server VM (build 25.77-b03, mixed mode)[root@qa1-common004 local]# which java/usr/local/jdk/bin/java[root@qa1-common004 local]# ll /usr/local/jdklrwxrwxrwx 1 root root 11 Apr 17 17:01 /usr/local/jdk -&gt; jdk1.8.0_77</code></pre><p>这里我使用的是1.8版本。</p><p>详细操作请看文章：<a href="">Linux下JDK的安装配置</a></p><p><strong>Maven</strong></p><p>步骤：</p><ul><li>下载  <a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">下载链接</a></li><li>解压</li><li>软链接</li><li>配置系统环境变量</li></ul><p>操作如下：</p><pre><code># wget http://www-eu.apache.org/dist/maven/maven-3/3.5.3/binaries/apache-maven-3.5.3-bin.tar.gz# tar -zxvf apache-maven-3.5.3-bin.tar.gz -C /usr/local/# cd /usr/local/# ln -s /usr/local/apache-maven-3.5.3/ /usr/local/maven# vim /etc/profile  在文件末尾添加以下内容，保存退出M3_HOME=/usr/local/mavenexport PATH=$M3_HOME/bin:$PATH[root@host-192-168-8-37 ~]# source /etc/profile</code></pre><h3 id="下载CacheCloud项目"><a href="#下载CacheCloud项目" class="headerlink" title="下载CacheCloud项目"></a>下载CacheCloud项目</h3><pre><code># yum -y install git# git clone https://github.com/sohutv/cachecloud.git# ls cachecloud/cachecloud-open-client  cachecloud-open-common  cachecloud-open-web  LICENSE  pom.xml  README.md  script</code></pre><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><p>这里安装mysql5.7版本</p><p><strong>配置yum源并安装</strong></p><p>centos6.8 【6.8安装5.6版本，安装5.7时涉及依赖关系过多】</p><pre><code># wget http://repo.mysql.com/mysql-community-release-el6-5.noarch.rpm# rpm -ivh mysql-community-release-el6-5.noarch.rpm# yum -y install  mysql-community-server</code></pre><p>centos 7.x 【5.7版本】</p><pre><code># wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm# rpm -ivh mysql57-community-release-el7-11.noarch.rpm# yum -y install mysql-server</code></pre><p><strong>修改mysql配置文件</strong></p><pre><code># vim /etc/my.cnf[mysqld]character-set-server=utf8 </code></pre><p><strong>启动</strong></p><pre><code># /etc/init.d/mysqld start</code></pre><h4 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h4><p><strong>创建数据库</strong></p><pre><code>mysql&gt; create database cache_cloud default charset utf8;Query OK, 1 row affected (0.00 sec)</code></pre><p><strong>创建cachecloud用户</strong></p><pre><code>mysql&gt; grant all privileges on cache_cloud.* to &apos;cachecloud&apos;@&apos;%&apos; identified by &apos;Cache_cloud123&apos;;Query OK, 0 rows affected (0.00 sec)</code></pre><p><strong>导入初始化数据</strong><br>注意，这里已经不是在数据库中了</p><pre><code>[root@qa1-common004 script]# pwd/root/software/cachecloud/script[root@qa1-common004 script]# mysql -u root -p cache_cloud &lt; cachecloud.sql Enter password: </code></pre><h2 id="修改cachecloud配置"><a href="#修改cachecloud配置" class="headerlink" title="修改cachecloud配置"></a>修改cachecloud配置</h2><p><strong>数据库设置</strong></p><pre><code>[root@qa1-common004 swap]# pwd/root/software/cachecloud/cachecloud-open-web/src/main/swap[root@qa1-common004 swap]# cat online.properties cachecloud.db.url = jdbc:mysql://172.24.64.132:3306/cache_cloud?useUnicode=true&amp;amp;characterEncoding=UTF-8cachecloud.db.user = cachecloudcachecloud.db.password = Cache_cloud123 cachecloud.maxPoolSize = 20isClustered = trueisDebug = falsespring-file=classpath:spring/spring-online.xmllog_base=/opt/cachecloud-web/logsweb.port=8585log.level=WARN</code></pre><p>注意这里需要提前在数据库中删除匿名用户</p><p><strong>开启机器监控功能</strong></p><pre><code># pwd/root/software/cachecloud/cachecloud-open-web/src/main/java/com/sohu/cache/schedule/jobs# vim ServerJob.java    将稳中的注释去掉，修改之后的文件如下所示：</code></pre><p><img src="http://picture.watchmen.xin/cachecloud/machine.png" alt=""></p><p>如果公司已经有完善的监控，那么不建议开启机器监控，能够一定程度上减小数据库的压力。</p><h2 id="cachecloud构建及启动"><a href="#cachecloud构建及启动" class="headerlink" title="cachecloud构建及启动"></a>cachecloud构建及启动</h2><p><strong>项目构建</strong></p><p>在cachecloud的根目录下执行以下maven命令，该命令会进行项目的构建</p><pre><code>[root@qa1-common004 cachecloud]# pwd/root/software/cachecloud[root@qa1-common004 cachecloud]#[root@host-192-168-8-37 cachecloud]# mvn clean compile install -Ponline[root@host-192-168-8-37 cachecloud]# cd script/ [root@host-192-168-8-37 script]# sh deploy.sh /root/software/</code></pre><p><strong>启动</strong></p><pre><code># sh /opt/cachecloud-web/start.sh</code></pre><p>启动成功之后的web页面如下图所示：</p><p><img src="http://picture.watchmen.xin/cachecloud/web.png" alt="web"></p><h1 id="实际使用"><a href="#实际使用" class="headerlink" title="实际使用"></a>实际使用</h1><h2 id="redis数据节点初始化"><a href="#redis数据节点初始化" class="headerlink" title="redis数据节点初始化"></a>redis数据节点初始化</h2><p>执行初始化脚本</p><pre><code>sh cachecloud-init.sh cachecloud</code></pre><h2 id="添加主机"><a href="#添加主机" class="headerlink" title="添加主机"></a>添加主机</h2><h2 id="redis应用模板配置"><a href="#redis应用模板配置" class="headerlink" title="redis应用模板配置"></a>redis应用模板配置</h2><p><strong>注意：</strong>在部署redis相关应用之前，一定要先进行模板的配置，因为默认配置下，redis的守护进程模式为关系，保护模式也是开启的</p><p><strong>修改配置：</strong></p><ul><li>配置名称：daemonize；配置值：yes;配置说明：是否守护进程</li></ul><p><strong>新增配置：</strong></p><ul><li><p>配置名称：protected-mode；配置值：no;配置说明：保护模式</p></li><li><p>配置名称：bind；配置值：0.0.0.0;配置说明：绑定ip</p></li></ul><font color="red"> 注意：哨兵的配置模板中只需要新增protected-mode参数即可。</font><h2 id="部署哨兵应用"><a href="#部署哨兵应用" class="headerlink" title="部署哨兵应用"></a>部署哨兵应用</h2><h2 id="导入已经存在的redis实例"><a href="#导入已经存在的redis实例" class="headerlink" title="导入已经存在的redis实例"></a>导入已经存在的redis实例</h2><h3 id="redis哨兵"><a href="#redis哨兵" class="headerlink" title="redis哨兵"></a>redis哨兵</h3><h1 id="cachecloud使用优化"><a href="#cachecloud使用优化" class="headerlink" title="cachecloud使用优化"></a>cachecloud使用优化</h1><p><strong>哨兵复用问题：</strong></p><p>使用cachecloud部署哨兵集群时，每次生成的哨兵节点都是不一样的，这种情况，会造成一定的资源浪费（每一对主从都需要至少3个哨兵节点，对服务器的端口资源、内存资源等都会造成一定的浪费）</p><p>因此，我们采取复用哨兵节点的方式来实现redis的主从高可用</p><p>实现步骤：</p><ul><li><ol><li>哨兵模板中设置端口，将端口固定，为了后续的配置方便</li></ol></li><li><ol><li>手动创建主从节点</li></ol></li><li><ol><li>哨兵中添加新建的主从节点</li></ol></li><li><ol><li>在cachecloud平台上导入这个应用</li></ol></li></ul><p>相当于其实是导入redis哨兵的方式</p><p>哨兵配置：</p><pre><code>redis-cli -p 6388 sentinel monitor master-test-qa1 172.24.64.134 6385 2&amp;&amp;redis-cli -p 6388 SENTINEL set master-test-qa1 auth-pass redis123&amp;&amp;redis-cli -p 6388 sentinel set master-test-qa1 down-after-milliseconds 20000&amp;&amp;redis-cli -p 6388 sentinel set master-test-qa1 failover-timeout 60000</code></pre><p><strong>关闭master节点的持久化</strong></p><p>AOF持久化：appendonly  配置为no</p><h1 id="cachecloud坑-CacheCloud安装部署及使用常见问题及注意事项"><a href="#cachecloud坑-CacheCloud安装部署及使用常见问题及注意事项" class="headerlink" title="cachecloud坑- CacheCloud安装部署及使用常见问题及注意事项"></a>cachecloud坑- CacheCloud安装部署及使用常见问题及注意事项</h1><ul><li><p><strong>数据库版本问题：</strong> 如果使用mysql5.7，则需要进行针对sql文件做一些设置（only_full_group_by模式设置等）</p></li><li><p><strong>cachecloud平台乱码问题：</strong> 需要修改online.properties配置文件中的连接串（使用这种方式：jdbc:mysql://127.0.0.1:3306/cache_cloud?useUnicode=true&amp;characterEncoding=UTF-8）</p></li><li><p><strong>cachecloud后台配置模板：</strong>默认配置下，redis没有开启守护进程运行方式、开启了保护模式等，需要做一些配置修改之后才可以正常启动</p></li><li><p><strong>机器监控数据无法展示问题：</strong>除了在程序文件中去掉相应的代码注释，还需要将cachecloud-open-web/nmon下指定系统版本的nmon文件放到/opt/cachecloud/soft/目录下</p></li><li><p><strong>密码配置问题：</strong>密码配置栏中，输入密码之后，还需要点击更新才可以生效</p></li><li><p><strong>Jedis支持redis版本问题：</strong>Jedis暂时无法稳定支持redis4.x版本，因此涉及到的集群水平扩容等功能是无法实现的（集群创建等还是可以支持的），因此我们建议使用3版本，后续关注Jedis的版本发布情况。</p></li><li><p><strong>应用导入时提示：节点不是存活的</strong> cachecloud节点上需要安装redis，因为他会使用redis-cli 去ping指定的节点，没有返回pong时，则会报错</p></li><li><p><strong>哨兵导入问题：</strong> 如果哨兵是复用的，也就是说一组哨兵节点监听了多对主从节点，那么在导入的时候回出现问题，目前导入功能只支持一个mastername</p></li><li><p><strong>主机名设置问题：</strong>  注意hosts文件需要进行配置</p></li></ul>]]></content>
    
    <summary type="html">
    
      本文主要讲述由搜狐视频开源在github上的Redis云平台产品-Cachecloud的安装部署、使用、优化等相关知识。
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="数据库" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="Redis" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/"/>
    
    
      <category term="cachecloud" scheme="http://yoursite.com/tags/cachecloud/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile编写</title>
    <link href="http://yoursite.com/2018/04/28/Dockerfile%E7%BC%96%E5%86%99/"/>
    <id>http://yoursite.com/2018/04/28/Dockerfile编写/</id>
    <published>2018-04-28T02:42:14.000Z</published>
    <updated>2018-04-28T02:42:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>在docker中，创建镜像的方法主要有三种：</p><ul><li>基于已有镜像的容器创建</li><li>基于本地模板导入</li><li>基于dockerfile创建</li></ul><p>dockerfile是一个文本格式的配置文件，用户可以使用dockerfile来快速创建自定义镜像。</p>]]></content>
    
    <summary type="html">
    
      本章节主要讲述dockerfile相关知识
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="虚拟化" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="Docker" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E8%99%9A%E6%8B%9F%E5%8C%96/Docker/"/>
    
    
      <category term="dockerfile" scheme="http://yoursite.com/tags/dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Docker基础知识</title>
    <link href="http://yoursite.com/2018/04/28/Docker%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2018/04/28/Docker基础知识/</id>
    <published>2018-04-28T02:40:40.000Z</published>
    <updated>2018-04-28T02:40:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1>]]></content>
    
    <summary type="html">
    
      Docker基础知识
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="虚拟化" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="Docker" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E8%99%9A%E6%8B%9F%E5%8C%96/Docker/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo</title>
    <link href="http://yoursite.com/2018/04/26/Dubbo/"/>
    <id>http://yoursite.com/2018/04/26/Dubbo/</id>
    <published>2018-04-26T03:49:32.000Z</published>
    <updated>2018-04-26T03:49:32.000Z</updated>
    
    <summary type="html">
    
      dubbo
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="分布式" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="Dubbo" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%88%86%E5%B8%83%E5%BC%8F/Dubbo/"/>
    
    
      <category term="dubbo" scheme="http://yoursite.com/tags/dubbo/"/>
    
  </entry>
  
</feed>
