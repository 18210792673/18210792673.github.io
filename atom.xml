<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Watchmen1992&#39;s Blog</title>
  
  <subtitle>锦瑟年华当与书香为度，是为不负天地人生。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-17T11:00:59.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>XiaoHua WANG</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>zabbix清理历史数据</title>
    <link href="http://yoursite.com/2018/05/17/zabbix%E6%B8%85%E7%90%86%E5%8E%86%E5%8F%B2%E6%95%B0%E6%8D%AE/"/>
    <id>http://yoursite.com/2018/05/17/zabbix清理历史数据/</id>
    <published>2018-05-17T11:00:59.000Z</published>
    <updated>2018-05-17T11:00:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>参考文献：</strong></p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>zabbix一般都是这几个表太大， history， history_uint，history_log</p><p>zabbix里面的时间是用的时间戳方式记录，我们可以转换一下，然后根据时间戳来删除；</p><p>比如要删除2014年的1月1号以前的数据，先将标准时间转换为时间戳</p><pre><code># date +%s -d &quot;2018-05-15 00:00:01&quot;1526313601</code></pre><h1 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h1><h2 id="停止应用"><a href="#停止应用" class="headerlink" title="停止应用"></a>停止应用</h2><p><strong>停止zabbix_server</strong></p><p>[root@dwb-dev1 ~]$ /etc/init.d/zabbix_server stop</p><h2 id="清理数据"><a href="#清理数据" class="headerlink" title="清理数据"></a>清理数据</h2><p><strong>启动mysql</strong></p><pre><code>/bin/sh /usr/bin/mysqld_safe --datadir=/var/lib/mysql --socket=/var/lib/mysql/mysql.sock --pid-file=/var/run/mysqld/mysqld.pid --basedir=/usr --user=mysql/usr/libexec/mysqld --basedir=/usr --datadir=/var/lib/mysql --user=mysql --log-error=/var/log/mysqld.log --pid-file=/var/run/mysqld/mysqld.pid --socket=/var/lib/mysql/mysql.sockmysql&gt; DELETE FROM history_uint WHERE clock &lt; 1526313601;mysql&gt; delete from history  where clock &lt; 1526313601;mysql&gt; optimize table history;mysql&gt; optimize table history_uint;注：执行过优化命令之后可能会需要很长的一段时间，中间不要中断，否则容易丢失数据。</code></pre><h2 id="启动应用"><a href="#启动应用" class="headerlink" title="启动应用"></a>启动应用</h2><p><strong>启动zabbix_server</strong></p><p>rider-contract-service</p><p>app465<br>app476 </p>]]></content>
    
    <summary type="html">
    
      zabbix清理历史数据
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="运维监控体系" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E8%BF%90%E7%BB%B4%E7%9B%91%E6%8E%A7%E4%BD%93%E7%B3%BB/"/>
    
      <category term="zabbix" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E8%BF%90%E7%BB%B4%E7%9B%91%E6%8E%A7%E4%BD%93%E7%B3%BB/zabbix/"/>
    
    
      <category term="zabbix" scheme="http://yoursite.com/tags/zabbix/"/>
    
  </entry>
  
  <entry>
    <title>RDS</title>
    <link href="http://yoursite.com/2018/05/14/RDS/"/>
    <id>http://yoursite.com/2018/05/14/RDS/</id>
    <published>2018-05-14T03:36:33.000Z</published>
    <updated>2018-05-14T03:36:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.alibabacloud.com/help/zh/product/26090.htm" target="_blank" rel="noopener">官方文档</a></p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>阿里云关系型数据库（Relational Database Service，简称 RDS）是一种稳定可靠、可弹性伸缩的在线数据库服务。基于阿里云分布式文件系统和SSD盘高性能存储，RDS 支持 MySQL、SQL Server、PostgreSQL 和 PPAS（Postgre Plus Advanced Server，一种高度兼容 Oracle 的数据库）引擎，并且提供了容灾、备份、恢复、监控、迁移等方面的全套解决方案，彻底解决数据库运维的烦恼。</p><h2 id="RDS的特点"><a href="#RDS的特点" class="headerlink" title="RDS的特点"></a>RDS的特点</h2><p>云数据库RDS作为一个公共的关系型数据库，高可用和高安全是其首要优势，其次才是高性能，因为没人会使用既不稳定又不安全的服务。RDS的优势主要体现在如下几点：</p><ul><li>RDS提供了主备双节点的实例，双节点可以在同一地域的不同可用区，MySQL实例的双节点还可以在不同地域，当主实例出现故障时可快速切换到备实例，保障了RDS的稳定性。</li></ul><ul><li>RDS在数据的存取上加入了中间层，所有请求都会经过中间层，而且有SQL注入的请求都会被中间层拦截掉。在底层数据写入上，RDS采用了最高安全级别的写入，保证在主机异常掉电的情况下数据不会出现丢失。以此来保障数据库的高安全性。</li></ul><p>RDS源码团队持续对MySQL进行源码优化，在标准的基准测试中性能和稳定性上都是高于社区版本的。</p><p>关于这部分内容可以查看：<a href="https://www.alibabacloud.com/help/zh/doc-detail/55823.htm?spm=a2c63.p38356.a3.4.563d5e74FcHTfi" target="_blank" rel="noopener">对比ECS自建数据库与RDS性能时的注意事项</a></p><h2 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h2><p><strong>数据库账号</strong></p><p>当用户创建实例后，RDS并不会为用户创建任何初始的数据库账号。</p><p>有如下两种方式来创建数据库帐号：</p><ul><li><p>用户可以通过控制台或者API来创建普通数据库账号，并设置数据库级别的读写权限。</p></li><li><p>如果用户需要更细粒度的权限控制，比如表、视图，字段级别的权限，也可以通过控制台或者API先创建高权限数据库账号，并使用数据库客户端和高权限数据库账号来创建普通数据库账号。高权限数据库账号可以为普通数据库账号设置表级别的读写权限。</p></li></ul><blockquote><p>说明：通过高权限数据库账号创建的普通数据库账号，无法通过控制台或者API进行管理。</p></blockquote><p><strong>IP白名单</strong></p><p>虽然RDS不支持ECS的安全组功能，但是RDS提供了IP白名单来实现网络安全访问控制。</p><p>默认情况下，RDS实例被设置为不允许任何IP访问，即127.0.0.1。</p><p>用户可以通过控制台的数据安全性模块或者API来添加IP白名单规则。IP白名单的更新无需重启RDS实例，因此不会影响用户的使用。</p><p>IP白名单可以设置多个分组，每个分组可配置1000个IP或IP段。</p><p>设置白名单后，只有以下服务器才能访问RDS实例：</p><ul><li>白名单中 IP 地址所属的服务器</li></ul><ul><li>白名单中 ECS 安全组内的 ECS 实例</li></ul><p>注意事项：</p><ul><li>系统会给每个实例创建一个默认的default白名单分组，该白名单分组只能被修改或清空，但不能被删除。</li></ul><ul><li>对于新建的RDS实例，系统默认会将回送地址127.0.0.1添加到default白名单分组中，IP地址127.0.0.1代表禁止所有IP地址或IP段访问该RDS实例。所以，在您设置白名单时，需要先将127.0.0.1删除，然后再添加您允许访问该RDS实例的IP地址或IP段。</li></ul><ul><li>若将白名单设置为%或者0.0.0.0/0，代表允许任何IP访问RDS实例。该设置将极大降低数据库的安全性，如非必要请勿使用。</li></ul><p><strong>安全组</strong></p><ul><li>目前仅杭州、青岛、香港地域支持 ECS 安全组。</li></ul><ul><li>目前仅支持添加一个安全组。</li></ul><ul><li>对白名单中的 ECS 安全组的更新将实时应用到白名单中。</li></ul><h2 id="系统安全"><a href="#系统安全" class="headerlink" title="系统安全"></a>系统安全</h2><ul><li><p>RDS 处于多层防火墙的保护之下，可以有力地抗击各种恶意攻击，保证数据的安全。</p></li><li><p>RDS 服务器不允许直接登录，只开放特定的数据库服务所需要的端口。</p></li><li><p>RDS 服务器不允许主动向外发起连接，只能接受被动访问。</p></li></ul><h2 id="数据链路服务"><a href="#数据链路服务" class="headerlink" title="数据链路服务"></a>数据链路服务</h2><p>阿里云数据库提供全数据链路服务，包括 DNS、负载均衡、Proxy 等。因为 RDS 使用原生的 DB Engine，对数据库的操作高度类似，基本没有学习成本。</p><p><strong>DNS</strong></p><p>DNS 模块提供域名到 IP 的动态解析功能，以便规避 RDS 实例 IP 地址改变带来的影响。在连接池中设置域名后，即使对应的IP地址发生了变化，仍然可以正常访问 RDS 实例。</p><p>例如，某 RDS 实例的域名为 test.rds.aliyun.com，对应的 IP 地址为 10.10.10.1。某程序连接池中设置为 test.rds.aliyun.com 或 10.10.10.1 都可以正常访问 RDS 实例。</p><p>一旦该 RDS 实例发生了可用区迁移或者版本升级后，IP 地址可能变为 10.10.10.2。如果程序连接池中设置的是域名 test.rds.aliyun.com，则仍然可以正常访问 RDS 实例。但是如果程序连接池中设置的是IP地址 10.10.10.1，就无法访问 RDS 实例了。</p><p><strong>负载均衡</strong></p><p>负载均衡 模块提供实例 IP 地址（包括内网 IP 和外网 IP），以便屏蔽物理服务器变化带来的影响。</p><p>例如，某 RDS 实例的内网 IP 地址为 10.1.1.1，对应的 Proxy 或者 DB Engine 运行在 192.168.0.1 上。在正常情况下，负载均衡 模块会将访问 10.1.1.1 的流量重定向到 192.168.0.1 上。当 192.168.0.1 发生了故障，处于热备状态的 192.168.0.2 接替了 192.168.0.1 的工作。此时 负载均衡 模块会将访问 10.1.1.1 的流量重定向到 192.168.0.2 上，RDS 实例仍旧正常提供服务。</p><p><strong>Proxy</strong></p><p>Proxy 模块提供数据路由、流量探测和会话保持等功能。</p><ul><li>数据路由功能：支持大数据场景下的分布式复杂查询聚合和相应的容量管理。</li><li>流量探测功能：降低 SQL 注入的风险，在必要情况下支持 SQL 日志的回溯。</li><li>会话保持功能：解决故障场景下的数据库连接中断问题。</li></ul><h2 id="高可用服务"><a href="#高可用服务" class="headerlink" title="高可用服务"></a>高可用服务</h2><p>高可用服务由 <strong><code>Detection、Repair、Notice</code></strong> 等模块组成，主要保障<strong><code>数据链路服务</code></strong>的可用性，除此之外还负责处理数据库内部的异常。</p><p>另外，RDS 还通过迁移到支持多可用区的地域和采用适当的高可用策略，提升 RDS 的高可用服务。</p><p><strong>Detection</strong></p><blockquote><p>Detection 模块负责检测 DB Engine 的主节点和备节点是否提供了正常的服务。通过间隔为 8~10 秒的心跳信息，HA 节点可以轻易获得主节点的健康情况，结合备节点的健康情况和其它 HA 节点的心跳信息，Detection 模块可以排除网络抖动等异常引入的误判风险，在 30 秒内完成异常切换操作。</p></blockquote><p><strong>Repair</strong></p><p>Repair 模块负责维护 DB Engine 的主节点和备节点之间的复制关系，还会修复主节点或者备节点在日常运行中出现的错误。</p><p>例如：</p><ul><li>主备复制异常断开的自动修复</li><li>主备节点表级别损坏的自动修复</li><li>主备节点 Crash 的现场保存和自动修复</li></ul><p><strong>Notice</strong></p><p>Notice 模块负责将主备节点的状态变动通知到 负载均衡 或者 Proxy，保证用户访问正确的节点。</p><p>例如：Detection 模块发现主节点异常，并通知 Repair 模块进行修复。Repair 模块进行了尝试后无法修复主节点，通知 Notice 进行流量切换。Notice 模块将切换请求转发至 负载均衡 或者Proxy，此时用户流量全部指向备节点。与此同时，Repair 在别的物理服务器上重建了新的备节点，并将变动同步给 Detection 模块。Detection 模块开始重新检测实例的健康状态。</p><p><strong>多可用区</strong></p><p>RDS在特定地域提供了多可用区部署的能力，也就是将RDS的主备实例分别部署于同一地域的不同可用区。相对于单可用区 RDS 实例，多可用区 RDS 实例可以承受更高级别的灾难。</p><p>目前多可用区 RDS 不额外收取任何费用，用户可以直接在已开通多可用区的地域购买多可用区 RDS 实例，也可以通过跨可用区迁移将单可用区 RDS 实例转化成多可用区 RDS 实例。</p><p>注意： 因为多可用区之间存在一定的网络延迟，因此多可用区 RDS 实例在采用半同步数据复制方案的时候，对于单个更新的响应时间会比单可用区实例长。这种情况最好通过提高并发量的方式来实现整体吞吐量的提高。</p><p><strong>高可用策略</strong></p><p>高可用策略是根据用户自身业务的特点，采用服务优先级和数据复制方式之间的不同组合，以组合出适合自身业务特点的高可用策略。</p><p>服务优先级有以下两个级别：</p><ul><li><p>RTO（Recovery Time Objective）优先：数据库应该尽快恢复服务，即可用时间最长。对于数据库在线时间要求比较高的用户应该使用 RTO 优先策略。</p></li><li><p>RPO（Recovery Point Objective）优先：数据库应该尽可能保障数据的可靠性，即数据丢失量最少。对于数据一致性要求比较高的用户应该使用 RPO 优先策略。</p></li></ul><p>数据复制方式有以下三种方式：</p><ul><li><p>异步复制（Async）：应用发起更新（含增加、删除、修改操作）请求，Master 完成相应操作后立即响应应用，Master 向 Slave 异步复制数据。因此异步复制方式下，Slave 不可用不影响主库上的操作，而 Master 不可用有较小概率会引起数据不一致。</p></li><li><p>强同步复制（Sync）：应用发起更新（含增加、删除、修改操作）请求，Master 完成操作后向 Slave 复制数据，Slave 接收到数据后向 Master 返回成功信息，Master 接到 Slave 的反馈后再响应应用。Master 向 Slave 复制数据是同步进行的，因此 Slave 不可用会影响 Master 上的操作，而 Master 不可用不会引起数据不一致。</p></li><li><p>半同步复制（Semi-Sync）：正常情况下数据复制方式采用强同步复制方式，当 Master 向 Slave 复制数据出现异常的时候（Slave 不可用或者双节点间的网络异常），Master 会暂停对应用的响应，直到复制方式超时退化成异步复制。如果允许应用在此时更新数据，则 Master 不可用会引起数据不一致。当双节点间的数据复制恢复正常（Slave 恢复或者网络恢复），异步复制会恢复成强同步复制。恢复成强同步复制的时间取决于半同步复制的实现方式，阿里云数据库 MySQL 5.5 版和 MySQL 5.6 版有所不同。</p></li></ul><h1 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h1><h2 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h2><h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><p>阿里云上的MySQL提供基础版、高可用版和金融版三种版本</p><blockquote><p>基础版一般就是用于个人学习、或开发测试时使用。目前基础版只提供MySQL 5.7版本，并且只提供单节点部署，性价比非常高。基础版采用计算节点与存储分离的实现方式，也就是说假如计算节点宕机，MySQL就不可用啦，但数据都存在云盘里面不会丢，数据一致性还是可以得到保证，不用担心数据丢失。可用性不高这是基础版的最大问题，反正只是用于不重要的场景，生产环境大家是不会选用基础版的。</p><p>高可用版顾名思义，为应用提供了数据库的高可用保障，也就是说至少要用双节点。RDS MySQL高可用版采用一主一备的经典高可用架构，采用基于binlog的数据复制技术维护数据库的可用性和数据一致性。同时，高可用版从性能上也可以保障业务生产环境的需求，配置上采用物理服务器部署，本地SSD硬盘，提供最佳性能，各方面表现均衡。</p><p>最高级的是金融版，针对像金融、证券、保险等行业的核心数据库，他们对数据安全性、可用性要求非常高。金融版采用三节点，实现一主两备的部署架构，通过binlog日志多副本多级别复制，确保数据的强一致性，可提供金融级的数据可靠性和跨机房容灾能力。</p></blockquote><h3 id="规格"><a href="#规格" class="headerlink" title="规格"></a>规格</h3><p>阿里云上MySQL有三种规格类型：通用型、独享型和独占型。</p><blockquote><p>其中通用型和独享型都是在一台物理服务器上划分多个资源隔离的区域，为不同用户提供MySQL数据库实例。他们的不同点在于，通用型对于CPU和存储空间采用了复用的技术。当部署在同一台服务器上的所有MySQL 实例都很繁忙的情况下，有可能会出现实例间的CPU争抢，或存储的争抢；而独享型虽然也是多个数据库实例共享一台物理服务器，但资源隔离策略上确保每个用户都可以独享所分配到的CPU、内存、I/O、存储，不会出现多个实例发生资源争抢的情况。</p><p>最高级别的一种是独占型，是指一个MySQL实例独占一台服务器，会获得最好的性能，当然价格也最贵。最求极致性能但对价格不敏感的客户一般会在重要业务系统采用独占型实例。</p></blockquote><h3 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h3><p>通常，从新购实例到可以开始使用实例，需要完成如下操作：</p><p><img src="http://picture.watchmen.xin/RDS/RDS.png" alt="RDS"></p><h3 id="使用限制"><a href="#使用限制" class="headerlink" title="使用限制"></a>使用限制</h3><h3 id="高权限账号"><a href="#高权限账号" class="headerlink" title="高权限账号"></a>高权限账号</h3><h3 id="数据库连接"><a href="#数据库连接" class="headerlink" title="数据库连接"></a>数据库连接</h3><p>注意：目前只支持同一个可用区的连接，不同可用区无法连接，如果需要跨越可用区，需要进行设置</p><p>目前RDS连接可以使用DMS连接或者第三方工具连接</p><h3 id="跨可用区访问"><a href="#跨可用区访问" class="headerlink" title="跨可用区访问"></a>跨可用区访问</h3><h3 id="管理工具-DMS"><a href="#管理工具-DMS" class="headerlink" title="管理工具-DMS"></a>管理工具-DMS</h3><p>DMS 是一款访问管理云端数据库的Web服务，支持Redis、 MySQL、SQL Server、PostgreSQL和MongoDB等数据源。DMS提供了数据管理、对象管理、数据流转和实例管理四部分功能。DMS使用也非常简单：</p><h3 id="数据迁移-DTS"><a href="#数据迁移-DTS" class="headerlink" title="数据迁移-DTS"></a>数据迁移-DTS</h3><p><strong>相关资料：</strong></p><ul><li><a href="https://www.alibabacloud.com/help/zh/doc-detail/26592.htm?spm=a2c63.l28256.b99.2.7f4a179d8ncgjh" target="_blank" rel="noopener">文档中心</a></li><li><a href="https://help.aliyun.com/product/26590.html" target="_blank" rel="noopener">帮助中心</a></li><li><a href="https://help.aliyun.com/document_detail/26627.html?spm=a2c4g.11186623.6.593.iT6gzz" target="_blank" rel="noopener">ECS自建数据库迁移到RDS</a></li></ul><h4 id="DTS概述"><a href="#DTS概述" class="headerlink" title="DTS概述"></a>DTS概述</h4><p>数据传输(Data Transmission)服务DTS是阿里云提供的一种支持RDBMS(关系型数据库)、NoSQL、OLAP等多种数据源之间数据交互的数据服务。它提供了数据迁移、实时数据订阅及数据实时同步等多种数据传输能力。通过数据传输可实现不停服数据迁移、数据异地灾备、跨境数据同步、缓存更新策略等多种业务应用场景，助您构建安全、可扩展、高可用的数据架构。</p><ul><li>数据传输服务DTS的目标是帮用户将复杂的数据交互工作承担下来，让用户可以专注于上层的业务开发，数据传输服务承诺99.95%的链路稳定性。</li></ul><ul><li>数据传输服务DTS支持多种数据源类型，例如：<ul><li>关系型数据库：Oracle、MySQL、SQLServer、PostgreSQL</li><li>NoSQL: Redis </li><li>OLAP: 分析型数据库AnalyticDB </li></ul></li></ul><p>迁移服务主要帮助用户把数据从本地数据库迁移到阿里云数据库，或者把阿里云数据库的一个实例迁移到另一实例中。阿里云数据库提供了数据传输服务DTS（Data Transfer Service）工具，方便用户快速的迁移数据库。</p><p>DTS是一个云上的数据传输服务，能快速的将本地数据库或者RDS中的实例迁移到另一个RDS实例中。关于DTS简介，请参见DTS产品概述。</p><p>DTS提供了三种迁移模式，分别为结构迁移、全量迁移和增量迁移：</p><ul><li>结构迁移：DTS会将迁移对象的结构定义迁移到目标实例，目前支持结构迁移的对象有表、视图、触发器、存储过程和存储函数。</li></ul><ul><li>全量迁移：DTS会将源数据库迁移对象已有数据全部迁移到目标实例中。</li></ul><blockquote><p>注意：在全量迁移过程中，为了保证数据一致性，无主键的非事务表会被锁定。锁定期间这些表无法写入，锁定时长依赖于这些表的数据量大小。在这些无主键非事务表迁移完成后，锁才会释放。</p></blockquote><ul><li>增量迁移：DTS会将迁移过程中数据变更同步到目标实例。</li></ul><p>,</p><blockquote><p>注意：如果迁移期间进行了DDL操作，这些结构变更不会同步到目标实例。</p></blockquote><h4 id="源及目标"><a href="#源及目标" class="headerlink" title="源及目标"></a>源及目标</h4><p><strong>数据迁移支持的源实例类型包括:</strong></p><p>(1) RDS实例</p><p>(2) 本地自建数据库</p><p>(3) ECS自建数据库</p><p><strong>数据迁移支持的目标实例包括：</strong></p><p>(1) RDS实例</p><p>(2) ECS自建数据库</p><p>(3) Redis实例</p><h4 id="Mysql迁移限制"><a href="#Mysql迁移限制" class="headerlink" title="Mysql迁移限制"></a>Mysql迁移限制</h4><p>对于本地 MySQL-&gt;RDS for MySQL 的数据迁移，DTS 支持结构迁移、全量数据迁移及增量数据迁移，各迁移类型的功能及限制如下：</p><ul><li>迁移过程中，不支持 DDL 操作。</li><li>结构迁移不支持 event 的迁移。</li><li>如果使用了对象名映射功能后，依赖这个对象的其他对象可能迁移失败。</li><li>当选择增量迁移时，源端的本地 MySQL 实例需要按照要求开启 binlog。</li><li>当选择增量迁移时，源库的 binlog_format 需要设置为 row。</li><li>当选择增量迁移且源 MySQL 实例如果为 5.6 或以上版本时，它的 binlog_row_image 必须为 full。</li></ul><h4 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h4><p>数据实时同步功能旨在帮助用户实现两个数据源之间的数据实时同步。通过数据实时同步功能可实现数据异地灾备、本地数据灾备、跨境数据同步及在线离线数据打通(OLTP-&gt;OLAP数据同步)等多种业务场景。</p>]]></content>
    
    <summary type="html">
    
      RDS知识
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="公有云产品" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%85%AC%E6%9C%89%E4%BA%91%E4%BA%A7%E5%93%81/"/>
    
      <category term="阿里云" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%85%AC%E6%9C%89%E4%BA%91%E4%BA%A7%E5%93%81/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
    
      <category term="RDS" scheme="http://yoursite.com/tags/RDS/"/>
    
  </entry>
  
  <entry>
    <title>HTTP请求</title>
    <link href="http://yoursite.com/2018/05/13/HTTP%E8%AF%B7%E6%B1%82/"/>
    <id>http://yoursite.com/2018/05/13/HTTP请求/</id>
    <published>2018-05-13T11:44:23.000Z</published>
    <updated>2018-05-13T11:44:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文转载自：<a href="https://www.cnblogs.com/yin-jingyu/archive/2011/08/01/2123548.html" target="_blank" rel="noopener">HTTP深入浅出 http请求</a></p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>HTTP(HyperText Transfer Protocol)是一套计算机通过网络进行通信的<strong><code>规则</code></strong>。</p><p>计算机专家设计出HTTP，使HTTP客户（如Web浏览器）能够从HTTP服务器(Web服务器)请求信息和服务，HTTP目前协议的版本是1.1。</p><p>HTTP是一种<strong><code>无状态</code></strong>的协议，无状态是指Web浏览器和Web服务器之间不需要建立持久的连接，这意味着当一个客户端向服务器端发出请求，然后Web服务器返回响应(response)，连接就被关闭了，在服务器端不保留连接的有关信息.HTTP遵循请求(Request)/应答(Response)模型。Web浏览器向Web服务器发送请求，Web服务器处理请求并返回适当的应答。所有HTTP连接都被构造成一套请求和应答。</p><p>HTTP使用内容类型，是指Web服务器向Web浏览器返回的文件都有与之相关的类型。所有这些类型在MIME　Internet邮件协议上模型化，即Web服务器告诉Web浏览器该文件所具有的种类，是HTML文档、GIF格式图像、声音文件还是独立的应用程序。大多数Web浏览器都拥有一系列的可配置的辅助应用程序，它们告诉浏览器应该如何处理Web服务器发送过来的各种内容类型。</p><h1 id="通信过程"><a href="#通信过程" class="headerlink" title="通信过程"></a>通信过程</h1><p>在一次完整的HTTP通信过程中，Web浏览器与Web服务器之间将完成下列7个步骤：</p><p><strong>1. 建立TCP连接</strong></p><blockquote><p>在HTTP工作开始之前，Web浏览器首先要通过网络与Web服务器建立连接，该连接是通过TCP来完成的，该协议与IP协议共同构建Internet，即著名的TCP/IP协议族，因此Internet又被称作是TCP/IP网络。HTTP是比TCP更高层次的应用层协议，根据规则，只有低层协议建立之后才能，才能进行更层协议的连接，因此，首先要建立TCP连接，一般TCP连接的端口号是80</p></blockquote><p><strong>2. Web浏览器向Web服务器发送请求命令</strong></p><blockquote><p>一旦建立了TCP连接，Web浏览器就会向Web服务器发送请求命令</p><p>例如：GET/sample/hello.jsp HTTP/1.1</p></blockquote><p><strong>3. Web浏览器发送请求头信息</strong></p><blockquote><p>浏览器发送其请求命令之后，还要以头信息的形式向Web服务器发送一些别的信息，之后浏览器发送了一空白行来通知服务器，它已经结束了该头信息的发送。</p></blockquote><p><strong>4. Web服务器应答</strong></p><blockquote><p>客户机向服务器发出请求后，服务器会客户机回送应答，</p><p>HTTP/1.1 200 OK</p><p>应答的第一部分是协议的版本号和应答状态码</p></blockquote><p><strong>5. Web服务器发送应答头信息</strong></p><blockquote><p>正如客户端会随同请求发送关于自身的信息一样，服务器也会随同应答向用户发送关于它自己的数据及被请求的文档。</p></blockquote><p><strong>6. Web服务器向浏览器发送数据</strong></p><blockquote><p>Web服务器向浏览器发送头信息后，它会发送一个空白行来表示头信息的发送到此为结束，接着，它就以Content-Type应答头信息所描述的格式发送用户所请求的实际数据</p></blockquote><p><strong>7. Web服务器关闭TCP连接</strong></p><blockquote><p>一般情况下，一旦Web服务器向浏览器发送了请求数据，它就要关闭TCP连接，然后如果浏览器或者服务器在其头信息加入了这行代码<br><strong><code>Connection:keep-alive</code></strong></p><p>添加之后，TCP连接在发送后将仍然保持打开状态，于是，浏览器可以继续通过相同的连接发送请求。保持连接节省了为每个请求建立新连接所需的时间，还节约了网络带宽。</p></blockquote><h1 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h1><h2 id="HTTP请求格式"><a href="#HTTP请求格式" class="headerlink" title="HTTP请求格式"></a>HTTP请求格式</h2><p>当浏览器向Web服务器发出请求时，它向服务器传递了一个数据块，也就是请求信息，HTTP请求信息由3部分组成：</p><ul><li>请求方法URI协议/版本</li></ul><ul><li>请求头(Request Header)</li></ul><ul><li>请求正文</li></ul><p>下面是一个HTTP请求的例子：</p><pre><code>GET/sample.jspHTTP/1.1Accept:image/gif.image/jpeg,*/*Accept-Language:zh-cnConnection:Keep-AliveHost:localhostUser-Agent:Mozila/4.0(compatible;MSIE5.01;Window NT5.0)Accept-Encoding:gzip,deflateusername=jinqiao&amp;password=1234</code></pre><p><strong>说明：</strong></p><p>（1）请求方法URI协议/版本</p><p>请求的第一行是“方法URL议/版本”：GET/sample.jsp HTTP/1.1</p><blockquote><p>以上代码中“GET”代表请求方法，“/sample.jsp”表示URI，“HTTP/1.1代表协议和协议的版本。</p><p>根据HTTP标准，HTTP请求可以使用多种请求方法。例如：HTTP1.1支持7种请求方法：GET、POST、HEAD、OPTIONS、PUT、DELETE和TARCE。在Internet应用中，最常用的方法是GET和POST。</p><p>URL完整地指定了要访问的网络资源，通常只要给出相对于服务器的根目录的相对目录即可，因此总是以“/”开头，最后，协议版本声明了通信过程中使用HTTP的版本。</p></blockquote><p>（2）请求头(Request Header)</p><p>请求头包含许多有关的客户端环境和请求正文的有用信息。例如，请求头可以声明浏览器所用的语言，请求正文的长度等。</p><pre><code>Accept:image/gif.image/jpeg.*/*Accept-Language:zh-cnConnection:Keep-AliveHost:localhostUser-Agent:Mozila/4.0(compatible:MSIE5.01:Windows NT5.0)Accept-Encoding:gzip,deflate.</code></pre><p>（3）请求正文</p><p>请求头和请求正文之间是一个空行，这个行非常重要，它表示请求头已经结束，接下来的是请求正文。</p><p>请求正文中可以包含客户提交的查询字符串信息：username=jinqiao&amp;password=1234</p><p>在以上的例子的HTTP请求中，请求的正文只有一行内容。当然，在实际应用中，HTTP请求正文可以包含更多的内容。</p><p>HTTP请求方法我这里只讨论GET方法与POST方法</p><ul><li>GET方法<blockquote><p>GET方法是默认的HTTP请求方法，我们日常用GET方法来提交表单数据，然而用GET方法提交的表单数据只经过了简单的编码，同时它将作为URL的一部分向Web服务器发送，因此，如果使用GET方法来提交表单数据就存在着安全隐患上。例如<br>Http://127.0.0.1/login.jsp?Name=zhangshi&amp;Age=30&amp;Submit=%cc%E+%BD%BB<br>从上面的URL请求中，很容易就可以辩认出表单提交的内容。（？之后的内容）另外由于GET方法提交的数据是作为URL请求的一部分所以提交的数据量不能太大</p></blockquote></li></ul><ul><li>POST方法</li></ul><blockquote><p>POST方法是GET方法的一个替代方法，它主要是向Web服务器提交表单数据，尤其是大批量的数据。POST方法克服了GET方法的一些缺点。通过POST方法提交表单数据时，数据不是作为URL请求的一部分而是作为标准数据传送给Web服务器，这就克服了GET方法中的信息无法保密和数据量太小的缺点。因此，出于安全的考虑以及对用户隐私的尊重，通常表单提交时采用POST方法。</p><p>从编程的角度来讲，如果用户通过GET方法提交数据，则数据存放在QUERY＿STRING环境变量中，而POST方法提交的数据则可以从标准输入流中获取。</p></blockquote><h2 id="HTTP响应"><a href="#HTTP响应" class="headerlink" title="HTTP响应"></a>HTTP响应</h2><p>HTTP应答与HTTP请求相似，HTTP响应也由3个部分构成，分别是：</p><ul><li>协议状态版本代码描述</li><li>响应头(Response Header)</li><li>响应正文</li></ul><p>下面是一个HTTP响应的例子：</p><pre><code>HTTP/1.1 200 OKServer:Apache Tomcat/5.0.12Date:Mon,6Oct2003 13:23:42 GMTContent-Length:112&lt;html&gt;&lt;head&gt;&lt;title&gt;HTTP响应示例&lt;title&gt;&lt;/head&gt;&lt;body&gt;Hello HTTP!&lt;/body&gt;&lt;/html&gt;</code></pre><p>（1）协议状态版本代码描述</p><blockquote><p>协议状态代码描述HTTP响应的第一行类似于HTTP请求的第一行，它表示通信所用的协议是HTTP1.1服务器已经成功的处理了客户端发出的请求（200表示成功）:</p></blockquote><pre><code>HTTP/1.1 200 OK</code></pre><p>（2）响应头</p><blockquote><p>响应头(Response Header)响应头也和请求头一样包含许多有用的信息，例如服务器类型、日期时间、内容类型和长度等：</p></blockquote><pre><code>　　 Server:Apache Tomcat/5.0.12Date:Mon,6Oct2003 13:13:33 GMTContent-Type:text/htmlLast-Moified:Mon,6 Oct 2003 13:23:42 GMTContent-Length:112</code></pre><p>（3）响应正文</p><blockquote><p>响应正文响应正文就是服务器返回的HTML页面：</p></blockquote><pre><code>　　&lt;html&gt;&lt;head&gt;&lt;title&gt;HTTP响应示例&lt;title&gt;&lt;/head&gt;&lt;body&gt;Hello HTTP!&lt;/body&gt;&lt;/html&gt;</code></pre><p><strong>响应头和正文之间也必须用空行分隔。　</strong>　</p><h2 id="HTTP应答码"><a href="#HTTP应答码" class="headerlink" title="HTTP应答码"></a>HTTP应答码</h2><p>　HTTP应答码也称为状态码，它反映了Web服务器处理HTTP请求状态。HTTP应答码由3位数字构成，其中首位数字定义了应答码的类型：</p><pre><code>　　　1XX－信息类(Information),表示收到Web浏览器请求，正在进一步的处理中　　　2XX－成功类（Successful）,表示用户请求被正确接收，理解和处理例如：200 OK3XX-重定向类(Redirection),表示请求没有成功，客户必须采取进一步的动作。4XX-客户端错误(Client Error)，表示客户端提交的请求有错误 例如：404 NOT Found，意味着请求中所引用的文档不存在。5XX-服务器错误(Server Error)表示服务器不能完成对请求的处理：如 500</code></pre><h2 id="常见请求方法"><a href="#常见请求方法" class="headerlink" title="常见请求方法"></a>常见请求方法</h2><ul><li>GET 通过请求URI得到资源</li></ul><ul><li>POST<br>用于添加新的内容</li></ul><ul><li>PUT<br>用于修改某个内容</li></ul><ul><li>DELETE<br>删除某个内容</li></ul><ul><li>CONNECT,<br>用于代理进行传输，如使用SSL</li></ul><ul><li>OPTIONS<br>询问可以执行哪些方法</li></ul><ul><li>PATCH,<br>部分文档更改</li></ul><ul><li>PROPFIND, (wedav)<br>查看属性</li></ul><ul><li>PROPPATCH, (wedav)<br>设置属性</li></ul><ul><li>MKCOL, (wedav)<br>创建集合（文件夹）</li></ul><ul><li>COPY, (wedav)<br>拷贝</li></ul><ul><li>MOVE, (wedav)<br>移动</li></ul><ul><li>LOCK, (wedav)<br>加锁</li></ul><ul><li>UNLOCK (wedav)<br>解锁</li></ul><ul><li>TRACE<br>用于远程诊断服务器</li></ul><ul><li>HEAD<br>类似于GET, 但是不返回body信息，用于检查对象是否存在，以及得到对象的元数据</li></ul>]]></content>
    
    <summary type="html">
    
      HTTP深入浅出之http请求
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="网络知识" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86/"/>
    
      <category term="HTTP请求" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86/HTTP%E8%AF%B7%E6%B1%82/"/>
    
    
      <category term="HTTP请求" scheme="http://yoursite.com/tags/HTTP%E8%AF%B7%E6%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper常用命令</title>
    <link href="http://yoursite.com/2018/05/02/Zookeeper%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/05/02/Zookeeper常用命令/</id>
    <published>2018-05-02T11:43:32.000Z</published>
    <updated>2018-05-02T11:43:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="zk客户端命令"><a href="#zk客户端命令" class="headerlink" title="zk客户端命令"></a>zk客户端命令</h1><p>zookeeper命令行工具类似于Linux的shell环境，使用它我们可以简单的对zookeeper进行访问、数据创建、数据修改等操作</p><p><strong>语法：</strong></p><pre><code>$ sh zkCli.sh -server 127.0.0.1:2181</code></pre><p><strong>一些简单操作：</strong></p><ul><li>显示根目录下、文件： ls / 使用 ls 命令来查看当前 ZooKeeper 中所包含的内容</li></ul><ul><li>显示根目录下、文件： ls2 / 查看当前节点数据并能看到更新次数等数据</li></ul><ul><li>创建文件，并设置初始内容： create /zk “test” 创建一个新的 znode节点“ zk ”以及与它关联的字符串</li></ul><ul><li>获取文件内容： get /zk 确认 znode 是否包含我们所创建的字符串</li></ul><ul><li>修改文件内容： set /zk “zkbak” 对 zk 所关联的字符串进行设置</li></ul><ul><li>删除文件： delete /zk 将刚才创建的 znode 删除</li></ul><ul><li>退出客户端： quit</li></ul><ul><li>帮助命令： help</li></ul><p><strong>四字命令：</strong></p><p>ZooKeeper 支持某些特定的四字命令字母与其的交互。它们大多是查询命令，用来获取 ZooKeeper 服务的当前状态及相关信息。用户在客户端可以通过 telnet 或 nc 向 ZooKeeper 提交相应的命令</p><ul><li>echo stat|nc 127.0.0.1 2181 来查看哪个节点被选择作为follower或者leader</li></ul><ul><li>echo ruok|nc 127.0.0.1 2181 测试是否启动了该Server，若回复imok表示已经启动。</li></ul><ul><li>echo dump| nc 127.0.0.1 2181 ,列出未经处理的会话和临时节点。</li></ul><ul><li>echo kill | nc 127.0.0.1 2181 ,关掉server</li></ul><ul><li>echo conf | nc 127.0.0.1 2181 ,输出相关服务配置的详细信息。</li></ul><ul><li>echo cons | nc 127.0.0.1 2181 ,列出所有连接到服务器的客户端的完全的连接 / 会话的详细信息。</li></ul><ul><li>echo envi |nc 127.0.0.1 2181 ,输出关于服务环境的详细信息（区别于 conf 命令）。</li></ul><ul><li>echo reqs | nc 127.0.0.1 2181 ,列出未经处理的请求。</li></ul><ul><li>echo wchs | nc 127.0.0.1 2181 ,列出服务器 watch 的详细信息。</li></ul><ul><li>echo wchc | nc 127.0.0.1 2181 ,通过 session 列出服务器 watch 的详细信息，它的输出是一个与 watch 相关的会话的列表。</li></ul><ul><li>echo wchp | nc 127.0.0.1 2181 ,通过路径列出服务器 watch 的详细信息。它输出一个与 session 相关的路径。</li></ul>]]></content>
    
    <summary type="html">
    
      Zookeeper常用命令
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="大数据" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="大数据相关组件" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/"/>
    
      <category term="Zookeeper" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/Zookeeper/"/>
    
    
      <category term="Zookeeper常用命令" scheme="http://yoursite.com/tags/Zookeeper%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>MySQL普通用户无法本地登录的解决方法及MySQL的用户认证算法</title>
    <link href="http://yoursite.com/2018/05/02/MySQL%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7%E6%97%A0%E6%B3%95%E6%9C%AC%E5%9C%B0%E7%99%BB%E5%BD%95%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%E5%8F%8AMySQL%E7%9A%84%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2018/05/02/MySQL普通用户无法本地登录的解决方法及MySQL的用户认证算法/</id>
    <published>2018-05-02T10:00:00.000Z</published>
    <updated>2018-05-02T10:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>参考文献：</strong></p><ul><li><a href="http://www.cnblogs.com/linuxnote/p/3780244.html" target="_blank" rel="noopener">MySQL普通用户无法本地登录的解决方法及MySQL的用户认证算法</a></li></ul><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在启动cachecloud项目的时候，发现日志中出现大量的连接数据库报错</p><p>我的授权命令为：</p><pre><code>mysql&gt; grant all privileges on cache_cloud.* to &apos;cachecloud&apos;@&apos;%&apos; identified by &apos;Cache_cloud123&apos;;Query OK, 0 rows affected (0.00 sec)</code></pre><p>这样的配置，按道理来说，是不应该出现连不上的（%代表任意的主机来源，并且已经排查了防火墙等因素）</p><p>在本地登录发现发现存在如下问题：</p><p><img src="http://picture.watchmen.xin/mysql/cachecloud.png" alt=""></p><p>当输入之前设置的密码时，将会一直提示：“ERROR 1045 (28000): Access denied”，而当我们不输入密码，也就是说输入密码为空时则能正常进入数据库。</p><p>我们使用USER()和CURRENT_USER()两个函数查看所使用的用户。</p><pre><code>mysql&gt; SELECT USER(), CURRENT_USER();+----------------------+----------------+| USER()               | CURRENT_USER() |+----------------------+----------------+| cachecloud@localhost | @localhost     |+----------------------+----------------+1 row in set (0.00 sec)mysql&gt; </code></pre><blockquote><p>USER()函数返回你在客户端登陆时指定的用户名和主机名。</p><p>CURRENT_USER()函数返回的是MySQL使用授权表中的哪个用户来认证你的登录请求。</p></blockquote><p>这里发现，之前设置的授权规则并没有生效，是数据库使用的是’’@’localhost’这个来源信息来进行登录认证，而’’@’localhost’这个匿名用户是没有密码的，因此我输入空密码登录成功了。但是登录后，所对应的用户的匿名用户。</p><p><strong>一般在MySQL在安装完毕后，我们使用mysql_install_db这个脚本生成<font color="red"><code>授权表</code></font>，会默认创建’’@’localhost’这个匿名用户。正是因为这个匿名用户，影响了其他用户从本地登录的认证。</strong></p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>那么MySQL是如何进行用户身份认证呢？</p><p>MySQL的简要认证算法如下：</p><ul><li>当用户从客户端请求登陆时，MySQL将授权表中的条目与客户端所提供的条目进行比较，包括用户的用户名，密码和主机。</li></ul><ul><li>授权表中的Host字段是可以使用通配符作为模式进行匹配的，如test.example.com, %.example.com, %.com和%都可以匹配test.example.com这个主机。</li></ul><ul><li>授权表中的User字段不允许使用模式匹配，但是可以有一个空字符的用户名代表匿名用户，并且空字符串可以匹配所有的用户名，就像通配符一样。</li></ul><ul><li>当user表中的Host和User有多个值可以匹配客户端提供的主机和用户名时，MySQL将user表读入内存，并且按照一定规则排序，按照排序规则读取到的第一个匹配客户端用户名和主机名的条目对客户端进行身份验证。</li></ul><p><strong>排序规则：</strong></p><ul><li>对于Host字段，按照匹配的精确程度进行排序，越精确的排序越前，例如当匹配test.example.com这个主机时, %.example.com比%.com更精确，而test.example.com比%.example.com更精确。</li></ul><ul><li>对于User字段，非空的字符串用户名比空字符串匹配的用户名排序更靠前。</li></ul><ul><li>User和Host字段都有多个匹配值，MySQL使用主机名排序最前的条目，在主机名字段相同时再选取用户名排序更前的条目。</li></ul><ul><li>因此，如果User和Host字段都有多个匹配值，主机名最精确匹配的条目被用户对用户进行认证。</li></ul><p>了解了这个规则之后，我们就知道为什么cachecloud登录失败了。</p><p>在使用该用户进行本机登录的时候，mysql中有2个匹配条目</p><ol><li>‘cachecloud’@’%’ </li><li>‘’@’localhost’</li></ol><p>匿名用户能够匹配的原因上面说过，空字符串可以匹配所有的用户名，就像通配符一样。</p><p>根据MySQL认证时的排序规则，第一个条目的用户名排序更前，第二个条目的主机名更精确，排序更前。</p><p>而MySQL会优先使用主机名排序第一的条目进行身份认证，因此’’@’localhost’被用户对客户端进行认证。因此，只有使用匿名用户的空密码才能登录进数据库。就会出现刚才上面的情况了。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>删除匿名用户【仅仅是为了安全也有这个必要】</p><p><strong>为什么root用户不会受影响，而只有普通用户不能从本地登录？</strong></p><p>因为mysql_install_db脚本会在授权表中生成’root’@’localhost’这个账户。同样的，使用root登录MySQL时，’root’@’localhost’和’’@’localhost’都能匹配登录的账户，但是根据排序规则，主机名相同，而用户名非空字符串优先，因此’roo’@’localhost’这个条目的排序更靠前。使用root本地登录是不会被匿名用户遮盖。</p><pre><code>[root@qa1-common004 ~]# mysql -u root -p Enter password: Welcome to the MySQL monitor.  Commands end with ; or \g.Your MySQL connection id is 942Server version: 5.6.40 MySQL Community Server (GPL)Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.mysql&gt; mysql&gt; select user,host from mysql.user;+------------+---------------------------+| user       | host                      |+------------+---------------------------+| cachecloud | %                         || root       | 127.0.0.1                 || root       | ::1                       ||            | localhost                 || root       | localhost                 ||            | qa1-common004.ecs.east1-b || root       | qa1-common004.ecs.east1-b |+------------+---------------------------+7 rows in set (0.00 sec)mysql&gt; delete from mysql.user where user=&apos;&apos;;　Query OK, 2 rows affected (0.00 sec)mysql&gt; select user,host from mysql.user;　+------------+---------------------------+| user       | host                      |+------------+---------------------------+| cachecloud | %                         || root       | 127.0.0.1                 || root       | ::1                       || root       | localhost                 || root       | qa1-common004.ecs.east1-b |+------------+---------------------------+5 rows in set (0.00 sec)mysql&gt; flush privileges;Query OK, 0 rows affected (0.00 sec)mysql&gt; exit</code></pre><p>退出之后再次登录，问题得到解决。</p>]]></content>
    
    <summary type="html">
    
      MySQL普通用户无法本地登录的解决方法及MySQL的用户认证算法
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="数据库" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
      <category term="MySQL问题" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Mysql密码设置修改及恢复</title>
    <link href="http://yoursite.com/2018/05/02/Mysql%E5%AF%86%E7%A0%81%E8%AE%BE%E7%BD%AE%E4%BF%AE%E6%94%B9%E5%8F%8A%E6%81%A2%E5%A4%8D/"/>
    <id>http://yoursite.com/2018/05/02/Mysql密码设置修改及恢复/</id>
    <published>2018-05-02T06:24:22.000Z</published>
    <updated>2018-05-02T06:24:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mysql-5-6版本"><a href="#mysql-5-6版本" class="headerlink" title="mysql 5.6版本"></a>mysql 5.6版本</h2><p>mysql 5.6版本中，安装完毕之后不会设置初始密码，服务启动之后，直接输入mysql即可进入数据库</p><p><strong>安装之后的第一次密码设置</strong></p><pre><code># mysql  在终端直接输入mysql进入数据库mysql&gt; set password = password(&apos;Mysql_password123&apos;);mysql&gt; flush privileges;</code></pre><p><strong>修改密码</strong></p><p><strong>忘记密码之后的恢复</strong></p>]]></content>
    
    <summary type="html">
    
      Mysql密码设置修改及恢复
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="数据库" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
      <category term="Mysql密码" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/Mysql%E5%AF%86%E7%A0%81/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Linux下JDK的安装配置</title>
    <link href="http://yoursite.com/2018/04/28/Linux%E4%B8%8BJDK%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/04/28/Linux下JDK的安装配置/</id>
    <published>2018-04-28T03:28:39.000Z</published>
    <updated>2018-04-28T03:28:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Linux中JDK的配置主要分为以下几个步骤：</p><ul><li><p>下载</p></li><li><p>解压</p></li><li><p>软链接</p></li><li><p>配置系统/用户环境变量</p></li></ul><h2 id="下载："><a href="#下载：" class="headerlink" title="下载："></a>下载：</h2><p>官方下载链接：<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">下载</a></p><p>JAVA环境的配置主要分为两种，一种是由root用户操作，针对所有用户全局生效的配置，一种是由具体普通用户操作，仅针对该用户生效的配置</p><p>因此，以下的配置根据实际需求。</p><h2 id="全局生效-管理员权限操作"><a href="#全局生效-管理员权限操作" class="headerlink" title="全局生效-管理员权限操作"></a>全局生效-管理员权限操作</h2><p><strong>解压+软链接</strong></p><pre><code># tar -zxvf jdk-7u75-linux-x64.tar.gz -C /usr/local/# cd /usr/local/# ln -s /usr/local/jdk1.7.0_75/  /usr/local/JDK        </code></pre><p>创建软链接目的：灵活的版本升级切换</p><p><strong>配置系统环境变量：</strong></p><pre><code># vim /etc/profile  在文件末尾添加以下内容export JAVA_HOME=/usr/local/JDKexport JRE_HOME=$JAVA_HOME/jreexport CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/libexport PATH=$JAVA_HOME/bin:$JRE_HOME/bin::$CLASSPATH:$PATH# source /etc/profile</code></pre><h2 id="用户局部生效-用户环境变量"><a href="#用户局部生效-用户环境变量" class="headerlink" title="用户局部生效-用户环境变量**"></a>用户局部生效-用户环境变量**</h2><p>注意提示符的变化，这里以appdev用户为例</p><p><strong>解压+软链接</strong></p><pre><code>$ tar -zxvf jdk-7u75-linux-x64.tar.gz$ ln -s /home/appdev/jdk1.7.0_75/  /home/appdev/JDK        </code></pre><p>创建软链接目的：灵活的版本升级切换</p><p><strong>配置系统环境变量：</strong></p><pre><code>$ vim .bash_profile  在文件末尾添加以下内容export JAVA_HOME=/home/appdev/JDKexport JRE_HOME=$JAVA_HOME/jreexport CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/libexport PATH=$JAVA_HOME/bin:$JRE_HOME/bin::$CLASSPATH:$PATH$ source .bash_profile</code></pre>]]></content>
    
    <summary type="html">
    
      基础环境配置之JDK
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="基础环境配置" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
      <category term="JDK" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/JDK/"/>
    
    
      <category term="JDK" scheme="http://yoursite.com/tags/JDK/"/>
    
  </entry>
  
  <entry>
    <title>Cachecloud-Redis云平台</title>
    <link href="http://yoursite.com/2018/04/28/Cachecloud/"/>
    <id>http://yoursite.com/2018/04/28/Cachecloud/</id>
    <published>2018-04-28T02:45:56.000Z</published>
    <updated>2018-04-28T02:45:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Cachecloud介绍"><a href="#Cachecloud介绍" class="headerlink" title="Cachecloud介绍"></a>Cachecloud介绍</h1><p>有关cachecloud的一些基础知识，官方都有非常详细的文档，这里不再花费篇幅进行复述，下面是相关的资料链接，请自行查看。</p><ul><li>github官网：    <a href="https://github.com/sohutv/cachecloud" target="_blank" rel="noopener">https://github.com/sohutv/cachecloud</a></li><li>Wiki:            <a href="https://github.com/sohutv/cachecloud/wiki" target="_blank" rel="noopener">https://github.com/sohutv/cachecloud/wiki</a></li><li>博客：        <a href="https://cachecloud.github.io/" target="_blank" rel="noopener">https://cachecloud.github.io/</a></li><li>官方视频：  <a href="http://my.tv.sohu.com/pl/9100280/index.shtml" target="_blank" rel="noopener">http://my.tv.sohu.com/pl/9100280/index.shtml</a></li></ul><p><strong>简介：</strong></p><blockquote><p>CacheCloud提供一个Redis云管理平台：实现多种类型(Redis Standalone、Redis Sentinel、Redis Cluster)自动部署、解决Redis实例碎片化现象、提供完善统计、监控、运维功能、减少开发人员的运维成本和误操作，提高机器的利用率，提供灵活的伸缩性，提供方便的接入客户端。</p></blockquote><p><strong>提供的功能：</strong></p><ul><li>监控统计：    提供了机器、应用、实例下各个维度数据的监控和统计界面。</li><li>一键开启：    Redis Standalone、Redis Sentinel、Redis Cluster三种类型的应用，无需手动配置初始化。</li><li>Failover：    支持哨兵,集群的高可用模式。</li><li>伸缩：    提供完善的垂直和水平在线伸缩功能。</li><li>完善运维： 提供自动运维和简化运维操作功能，避免纯手工运维出错。</li><li>方便的客户端 方便快捷的客户端接入。</li><li>元数据管理： 提供机器、应用、实例、用户信息管理。</li><li>流程化： 提供申请，运维，伸缩，修改等完善的处理流程</li><li>一键导入： 一键导入已经存在Redis </li></ul><p><strong>须知：</strong></p><ul><li>Redis集群、redis哨兵集群、Redis单实例等在CacheCloud中都是以应用的形式存在，一个应用对应一个appid</li><li>一个redis集群是一个应用，分配一个appid（不管其中有几个节点）</li><li>一个哨兵集群是一个应用，分配一个appid（不管其中有几个主从节点和哨兵节点）</li><li>一个单实例是一个应用，分配一个appid</li></ul><p><strong>如何使用：</strong></p><p>我们在平台上的执行任何操作都需要<code>**账号**</code>，创建的单节点、哨兵、集群等都是以<strong><code>用户申请的应用</code></strong>形式存在的。普通用户的主要工单有</p><ul><li>注册用户申请</li><li>应用申请</li><li>应用扩容</li><li>应用配置修改</li></ul><p>管理员的界面可操作的选项较多，此处不做详细说明。</p><p><strong>客户端如何连接：</strong></p><p>客户端在第一次启动的时候去CacheCloud通过appId拿到Redis的节点信息，之后不会与CacheCloud打交道了。</p><p>流程图如下所示：</p><p><img src="http://picture.watchmen.xin/cachecloud/client.png" alt="客户端连接"></p><h1 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h1><p>这里只说单机环境，高可用环境将在下面章节说明：<a href="">CacheCloud高可用架构</a></p><p><strong>环境要求：</strong></p><ul><li>JDK 7+</li><li>Maven 3+</li><li>MySQL 5.5+</li><li>Redis 3+</li></ul><h2 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h2><h3 id="JDK-Maven"><a href="#JDK-Maven" class="headerlink" title="JDK+Maven"></a>JDK+Maven</h3><p><strong>JDK：</strong></p><p>步骤：</p><ul><li>下载</li><li>解压</li><li>软链接</li><li>配置系统环境变量</li></ul><p>操作如下：</p><pre><code>[root@qa1-common004 local]# java -version java version &quot;1.8.0_77&quot;Java(TM) SE Runtime Environment (build 1.8.0_77-b03)Java HotSpot(TM) 64-Bit Server VM (build 25.77-b03, mixed mode)[root@qa1-common004 local]# which java/usr/local/jdk/bin/java[root@qa1-common004 local]# ll /usr/local/jdklrwxrwxrwx 1 root root 11 Apr 17 17:01 /usr/local/jdk -&gt; jdk1.8.0_77</code></pre><p>这里我使用的是1.8版本。</p><p>详细操作请看文章：<a href="">Linux下JDK的安装配置</a></p><p><strong>Maven</strong></p><p>步骤：</p><ul><li>下载  <a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">下载链接</a></li><li>解压</li><li>软链接</li><li>配置系统环境变量</li></ul><p>操作如下：</p><pre><code># wget http://www-eu.apache.org/dist/maven/maven-3/3.5.3/binaries/apache-maven-3.5.3-bin.tar.gz# tar -zxvf apache-maven-3.5.3-bin.tar.gz -C /usr/local/# cd /usr/local/# ln -s /usr/local/apache-maven-3.5.3/ /usr/local/maven# vim /etc/profile  在文件末尾添加以下内容，保存退出M3_HOME=/usr/local/mavenexport PATH=$M3_HOME/bin:$PATH[root@host-192-168-8-37 ~]# source /etc/profile</code></pre><h3 id="下载CacheCloud项目"><a href="#下载CacheCloud项目" class="headerlink" title="下载CacheCloud项目"></a>下载CacheCloud项目</h3><pre><code># yum -y install git# git clone https://github.com/sohutv/cachecloud.git# ls cachecloud/cachecloud-open-client  cachecloud-open-common  cachecloud-open-web  LICENSE  pom.xml  README.md  script</code></pre><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><p>这里安装mysql5.7版本</p><p><strong>配置yum源并安装</strong></p><p>centos6.8 【6.8安装5.6版本，安装5.7时涉及依赖关系过多】</p><pre><code># wget http://repo.mysql.com/mysql-community-release-el6-5.noarch.rpm# rpm -ivh mysql-community-release-el6-5.noarch.rpm# yum -y install  mysql-community-server</code></pre><p>centos 7.x 【5.7版本】</p><pre><code># wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm# rpm -ivh mysql57-community-release-el7-11.noarch.rpm# yum -y install mysql-server</code></pre><p><strong>修改mysql配置文件</strong></p><pre><code># vim /etc/my.cnf[mysqld]character-set-server=utf8 </code></pre><p><strong>启动</strong></p><pre><code># /etc/init.d/mysqld start</code></pre><h4 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h4><p><strong>创建数据库</strong></p><pre><code>mysql&gt; create database cache_cloud default charset utf8;Query OK, 1 row affected (0.00 sec)</code></pre><p><strong>创建cachecloud用户</strong></p><pre><code>mysql&gt; grant all privileges on cache_cloud.* to &apos;cachecloud&apos;@&apos;%&apos; identified by &apos;Cache_cloud123&apos;;Query OK, 0 rows affected (0.00 sec)</code></pre><p><strong>导入初始化数据</strong><br>注意，这里已经不是在数据库中了</p><pre><code>[root@qa1-common004 script]# pwd/root/software/cachecloud/script[root@qa1-common004 script]# mysql -u root -p cache_cloud &lt; cachecloud.sql Enter password: </code></pre><h2 id="修改cachecloud配置"><a href="#修改cachecloud配置" class="headerlink" title="修改cachecloud配置"></a>修改cachecloud配置</h2><p><strong>数据库设置</strong></p><pre><code>[root@qa1-common004 swap]# pwd/root/software/cachecloud/cachecloud-open-web/src/main/swap[root@qa1-common004 swap]# cat online.properties cachecloud.db.url = jdbc:mysql://172.24.64.132:3306/cache_cloud?useUnicode=true&amp;amp;characterEncoding=UTF-8cachecloud.db.user = cachecloudcachecloud.db.password = Cache_cloud123 cachecloud.maxPoolSize = 20isClustered = trueisDebug = falsespring-file=classpath:spring/spring-online.xmllog_base=/opt/cachecloud-web/logsweb.port=8585log.level=WARN</code></pre><p>注意这里需要提前在数据库中删除匿名用户</p><p><strong>开启机器监控功能</strong></p><pre><code># pwd/root/software/cachecloud/cachecloud-open-web/src/main/java/com/sohu/cache/schedule/jobs# vim ServerJob.java    将稳中的注释去掉，修改之后的文件如下所示：</code></pre><p><img src="http://picture.watchmen.xin/cachecloud/machine.png" alt=""></p><p>如果公司已经有完善的监控，那么不建议开启机器监控，能够一定程度上减小数据库的压力。</p><h2 id="cachecloud构建及启动"><a href="#cachecloud构建及启动" class="headerlink" title="cachecloud构建及启动"></a>cachecloud构建及启动</h2><p><strong>项目构建</strong></p><p>在cachecloud的根目录下执行以下maven命令，该命令会进行项目的构建</p><pre><code>[root@qa1-common004 cachecloud]# pwd/root/software/cachecloud[root@qa1-common004 cachecloud]#[root@host-192-168-8-37 cachecloud]# mvn clean compile install -Ponline[root@host-192-168-8-37 cachecloud]# cd script/ [root@host-192-168-8-37 script]# sh deploy.sh /root/software/</code></pre><p><strong>启动</strong></p><pre><code># sh /opt/cachecloud-web/start.sh</code></pre><p>启动成功之后的web页面如下图所示：</p><p><img src="http://picture.watchmen.xin/cachecloud/web.png" alt="web"></p><h1 id="实际使用"><a href="#实际使用" class="headerlink" title="实际使用"></a>实际使用</h1><h2 id="redis数据节点初始化"><a href="#redis数据节点初始化" class="headerlink" title="redis数据节点初始化"></a>redis数据节点初始化</h2><p>执行初始化脚本</p><pre><code>sh cachecloud-init.sh cachecloud</code></pre><h2 id="添加主机"><a href="#添加主机" class="headerlink" title="添加主机"></a>添加主机</h2><h2 id="redis应用模板配置"><a href="#redis应用模板配置" class="headerlink" title="redis应用模板配置"></a>redis应用模板配置</h2><p><strong>注意：</strong>在部署redis相关应用之前，一定要先进行模板的配置，因为默认配置下，redis的守护进程模式为关系，保护模式也是开启的</p><p><strong>修改配置：</strong></p><ul><li>配置名称：daemonize；配置值：yes;配置说明：是否守护进程</li></ul><p><strong>新增配置：</strong></p><ul><li><p>配置名称：protected-mode；配置值：no;配置说明：保护模式</p></li><li><p>配置名称：bind；配置值：0.0.0.0;配置说明：绑定ip</p></li></ul><font color="red"> 注意：哨兵的配置模板中只需要新增protected-mode参数即可。</font><h2 id="部署哨兵应用"><a href="#部署哨兵应用" class="headerlink" title="部署哨兵应用"></a>部署哨兵应用</h2><h2 id="导入已经存在的redis实例"><a href="#导入已经存在的redis实例" class="headerlink" title="导入已经存在的redis实例"></a>导入已经存在的redis实例</h2><h3 id="redis哨兵"><a href="#redis哨兵" class="headerlink" title="redis哨兵"></a>redis哨兵</h3><h1 id="cachecloud使用优化"><a href="#cachecloud使用优化" class="headerlink" title="cachecloud使用优化"></a>cachecloud使用优化</h1><p><strong>哨兵复用问题：</strong></p><p>使用cachecloud部署哨兵集群时，每次生成的哨兵节点都是不一样的，这种情况，会造成一定的资源浪费（每一对主从都需要至少3个哨兵节点，对服务器的端口资源、内存资源等都会造成一定的浪费）</p><p>因此，我们采取复用哨兵节点的方式来实现redis的主从高可用</p><p>实现步骤：</p><ul><li><ol><li>哨兵模板中设置端口，将端口固定，为了后续的配置方便</li></ol></li><li><ol><li>手动创建主从节点</li></ol></li><li><ol><li>哨兵中添加新建的主从节点</li></ol></li><li><ol><li>在cachecloud平台上导入这个应用</li></ol></li></ul><p>相当于其实是导入redis哨兵的方式</p><p>哨兵配置：</p><pre><code>redis-cli -p 6388 sentinel monitor master-test-qa1 172.24.64.134 6385 2&amp;&amp;redis-cli -p 6388 SENTINEL set master-test-qa1 auth-pass redis123&amp;&amp;redis-cli -p 6388 sentinel set master-test-qa1 down-after-milliseconds 20000&amp;&amp;redis-cli -p 6388 sentinel set master-test-qa1 failover-timeout 60000</code></pre><p><strong>关闭master节点的持久化</strong></p><p>AOF持久化：appendonly  配置为no</p><h1 id="cachecloud坑-CacheCloud安装部署及使用常见问题及注意事项"><a href="#cachecloud坑-CacheCloud安装部署及使用常见问题及注意事项" class="headerlink" title="cachecloud坑- CacheCloud安装部署及使用常见问题及注意事项"></a>cachecloud坑- CacheCloud安装部署及使用常见问题及注意事项</h1><ul><li><p><strong>数据库版本问题：</strong> 如果使用mysql5.7，则需要进行针对sql文件做一些设置（only_full_group_by模式设置等）</p></li><li><p><strong>cachecloud平台乱码问题：</strong> 需要修改online.properties配置文件中的连接串（使用这种方式：jdbc:mysql://127.0.0.1:3306/cache_cloud?useUnicode=true&amp;characterEncoding=UTF-8）</p></li><li><p><strong>cachecloud后台配置模板：</strong>默认配置下，redis没有开启守护进程运行方式、开启了保护模式等，需要做一些配置修改之后才可以正常启动</p></li><li><p><strong>机器监控数据无法展示问题：</strong>除了在程序文件中去掉相应的代码注释，还需要将cachecloud-open-web/nmon下指定系统版本的nmon文件放到/opt/cachecloud/soft/目录下</p></li><li><p><strong>密码配置问题：</strong>密码配置栏中，输入密码之后，还需要点击更新才可以生效</p></li><li><p><strong>Jedis支持redis版本问题：</strong>Jedis暂时无法稳定支持redis4.x版本，因此涉及到的集群水平扩容等功能是无法实现的（集群创建等还是可以支持的），因此我们建议使用3版本，后续关注Jedis的版本发布情况。</p></li><li><p><strong>应用导入时提示：节点不是存活的</strong> cachecloud节点上需要安装redis，因为他会使用redis-cli 去ping指定的节点，没有返回pong时，则会报错</p></li><li><p><strong>哨兵导入问题：</strong> 如果哨兵是复用的，也就是说一组哨兵节点监听了多对主从节点，那么在导入的时候回出现问题，目前导入功能只支持一个mastername</p></li><li><p><strong>主机名设置问题：</strong>  注意hosts文件需要进行配置</p></li></ul>]]></content>
    
    <summary type="html">
    
      本文主要讲述由搜狐视频开源在github上的Redis云平台产品-Cachecloud的安装部署、使用、优化等相关知识。
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="数据库" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="Redis" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/"/>
    
    
      <category term="cachecloud" scheme="http://yoursite.com/tags/cachecloud/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile编写</title>
    <link href="http://yoursite.com/2018/04/28/Dockerfile%E7%BC%96%E5%86%99/"/>
    <id>http://yoursite.com/2018/04/28/Dockerfile编写/</id>
    <published>2018-04-28T02:42:14.000Z</published>
    <updated>2018-04-28T02:42:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>在docker中，创建镜像的方法主要有三种：</p><ul><li>基于已有镜像的容器创建</li><li>基于本地模板导入</li><li>基于dockerfile创建</li></ul><p>dockerfile是一个文本格式的配置文件，用户可以使用dockerfile来快速创建自定义镜像。</p>]]></content>
    
    <summary type="html">
    
      本章节主要讲述dockerfile相关知识
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="虚拟化" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="Docker" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E8%99%9A%E6%8B%9F%E5%8C%96/Docker/"/>
    
    
      <category term="dockerfile" scheme="http://yoursite.com/tags/dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Docker基础知识</title>
    <link href="http://yoursite.com/2018/04/28/Docker%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2018/04/28/Docker基础知识/</id>
    <published>2018-04-28T02:40:40.000Z</published>
    <updated>2018-04-28T02:40:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1>]]></content>
    
    <summary type="html">
    
      Docker基础知识
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="虚拟化" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="Docker" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E8%99%9A%E6%8B%9F%E5%8C%96/Docker/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo</title>
    <link href="http://yoursite.com/2018/04/26/Dubbo/"/>
    <id>http://yoursite.com/2018/04/26/Dubbo/</id>
    <published>2018-04-26T03:49:32.000Z</published>
    <updated>2018-04-26T03:49:32.000Z</updated>
    
    <summary type="html">
    
      dubbo
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="分布式" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="Dubbo" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%88%86%E5%B8%83%E5%BC%8F/Dubbo/"/>
    
    
      <category term="dubbo" scheme="http://yoursite.com/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>RPC框架</title>
    <link href="http://yoursite.com/2018/04/26/RPC%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2018/04/26/RPC框架/</id>
    <published>2018-04-26T03:48:01.000Z</published>
    <updated>2018-04-26T03:48:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考文献：</p><ul><li><a href="https://www.zhihu.com/question/25536695" target="_blank" rel="noopener">知乎</a></li></ul><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>远程过程调用（英语：Remote Procedure Call，缩写为 RPC）是一个计算机通信协议。该协议允许运行于一台计算机的程序调用另一台计算机的子程序，而程序员无需额外地为这个交互作用编程。如果涉及的软件采用面向对象编程，那么远程过程调用亦可称作远程调用或远程方法调用，例：Java RMI。</p><p>RPC就是要像调用本地的函数一样去调远程函数。</p><p><strong>传统的本地调用方式：</strong></p><ul><li>代码文件中定义和调用</li><li>或者import的方式导入模块之后再进行调用</li></ul><p>而远程调用，指的是，我们要调用执行的函数是在远程的机器上的，</p>]]></content>
    
    <summary type="html">
    
      RPC相关知识
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="分布式" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="RPC" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%88%86%E5%B8%83%E5%BC%8F/RPC/"/>
    
    
      <category term="RPC" scheme="http://yoursite.com/tags/RPC/"/>
    
  </entry>
  
  <entry>
    <title>HTML</title>
    <link href="http://yoursite.com/2018/04/25/HTML/"/>
    <id>http://yoursite.com/2018/04/25/HTML/</id>
    <published>2018-04-25T15:45:50.000Z</published>
    <updated>2018-04-25T15:45:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><h3 id="段落标识"><a href="#段落标识" class="headerlink" title="段落标识"></a>段落标识</h3><pre><code>标签&lt;p&gt;&lt;/p&gt;标识一整个段落；其中标签&lt;p&gt;指出了段落的开头位置，而标签&lt;/p&gt;指出了段落的结束位置。</code></pre><p><strong>代码为：</strong></p><pre><code>&lt;p&gt;&lt;/p&gt;标识段落；标签&lt;p&gt;指出了段落的开头位置，而标签&lt;/p&gt;指出了段落的结束位置。</code></pre><p><strong>效果：</strong></p><p></p>标识段落；标签<br><p>指出了段落的开头位置，而标签</p>指出了段落的结束位置。<br><br><br>### 颜色标识 ###<br><br><br><strong>代码为：</strong><br><br>    <font color="red">内容</font><br><br><strong>效果：</strong><br><br><font color="red">内容</font><br><br>### 链接 ###<br><br><br><strong>在HTML页面中，链接是使用锚（mao）标签来定义了：</strong><br><br>    格式为： <a href="link_url">link text </a><br><br>这里也就是类似markdown的链接使用方式，也可以说是类似Linux中软链接的方式，可以隐藏后端真实的URL串，并且让对外的链接保持最新也要容易得多。<br><br>实际案例：<br><br>    <p><br>      <a href="{ % url 'learning_logs:index' % }">Learning Log</a><br>    </p>]]></content>
    
    <summary type="html">
    
      HTML相关知识记录
    
    </summary>
    
      <category term="编程语言" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="HTML" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/HTML/"/>
    
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>disconf</title>
    <link href="http://yoursite.com/2018/04/25/disconf/"/>
    <id>http://yoursite.com/2018/04/25/disconf/</id>
    <published>2018-04-25T08:15:14.000Z</published>
    <updated>2018-04-25T08:15:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>官方资料：</p><p><a href="https://github.com/knightliao/disconf" target="_blank" rel="noopener">github主页</a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>disconf专注于各种「分布式系统配置管理」的「通用组件」和「通用平台」, 提供统一的「配置管理服务」</p><p>工作流程如下图所示：</p><p><img src="http://picture.watchmen.xin/disconf/disconf.jpg" alt="disconf"></p><p><strong>实现目标：</strong></p><ul><li>部署极其简单：同一个上线包，无须改动配置，即可在 多个环境中(RD/QA/PRODUCTION) 上线 【每个应用中只需要配置相关的参数即可。】</li></ul><ul><li>部署动态化：更改配置，无需重新打包或重启，即可 实时生效</li></ul><ul><li>统一管理：提供web平台，统一管理 多个环境(RD/QA/PRODUCTION)、多个产品 的所有配置</li></ul><ul><li>核心目标：一个jar包，到处运行,涉及到配置不会存储在项目文件中</li></ul><h1 id="部署及使用"><a href="#部署及使用" class="headerlink" title="部署及使用"></a>部署及使用</h1>]]></content>
    
    <summary type="html">
    
      Distributed Configuration Management Platform(分布式配置管理平台)
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="分布式" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="disconf" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%88%86%E5%B8%83%E5%BC%8F/disconf/"/>
    
    
      <category term="disconf" scheme="http://yoursite.com/tags/disconf/"/>
    
  </entry>
  
  <entry>
    <title>python零碎知识及版本变化记录</title>
    <link href="http://yoursite.com/2018/04/23/python%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86%E5%8F%8A%E7%89%88%E6%9C%AC%E5%8F%98%E5%8C%96%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2018/04/23/python零碎知识及版本变化记录/</id>
    <published>2018-04-23T11:34:40.000Z</published>
    <updated>2018-04-23T11:34:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="零碎知识"><a href="#零碎知识" class="headerlink" title="零碎知识"></a>零碎知识</h1><ul><li>CharField类型必须添加max_length来指定长度上限，如果要想没有限制，则考虑使用TextField类型</li></ul><h1 id="版本变化"><a href="#版本变化" class="headerlink" title="版本变化"></a>版本变化</h1><p>##django##</p><p><strong>外键：</strong></p><p>Django2.0版本之后，创建外键时需要在后面加上on_delete</p><pre><code>topic = models.ForeignKey(Topic) </code></pre><p>应该修改为：</p><pre><code>topic = models.ForeignKey(Topic,on_delete=models.CASCADE)</code></pre><p><strong>django.core.urlresolvers变化</strong></p><p>Django 2.0 removes the django.core.urlresolvers module, which was moved to django.urls in version 1.10. You should change any import to use django.urls instead.</p>]]></content>
    
    <summary type="html">
    
      python零碎知识及版本变化记录
    
    </summary>
    
      <category term="编程语言" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"/>
    
    
      <category term="python版本" scheme="http://yoursite.com/tags/python%E7%89%88%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>运维工作日常问题记录</title>
    <link href="http://yoursite.com/2018/04/23/%E8%BF%90%E7%BB%B4%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%B8%B8%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2018/04/23/运维工作日常问题记录/</id>
    <published>2018-04-23T03:47:55.000Z</published>
    <updated>2018-04-23T03:47:55.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>问题目录：</strong></p><ul><li><ol><li>su: cannot set user id: Resource temporarily unavailable</li></ol></li><li><ol><li>ignoring option PermSize=512m; support was removed in 8.0</li></ol></li><li><ol><li>DTS迁移问题</li></ol></li></ul><hr><h1 id="su-cannot-set-user-id-Resource-temporarily-unavailable"><a href="#su-cannot-set-user-id-Resource-temporarily-unavailable" class="headerlink" title="su: cannot set user id: Resource temporarily unavailable"></a>su: cannot set user id: Resource temporarily unavailable</h1><p><strong>问题描述：</strong></p><blockquote><p>切换用户时提示资源不可用问题解决</p></blockquote><p>切换用户时出现如下提示符：</p><pre><code>[root@qa3-app018 ~]# su - appqasu: cannot set user id: Resource temporarily unavailable</code></pre><p>常见的能够控制用户资源的文件一般有两个，一是/etc/profile,二是/etc/security/limits.conf。</p><p>除此之外，在Centos6.x版本后，还有一个配置文件对ulimit设置生效，就是<code>/etc/security/limits.d/90-nproc.conf</code></p><h3 id="etc-security-limits-conf文件"><a href="#etc-security-limits-conf文件" class="headerlink" title="/etc/security/limits.conf文件"></a>/etc/security/limits.conf文件</h3><p>如下图所示：</p><p><img src="http://picture.watchmen.xin/problems/1.png" alt="图片"></p><p>domain: </p><p>是指限制的对象，可以是个人，也可以是组，组前面要加@符号，也可以设置为除root用户外的 任何人，用*号表示；</p><p>type:</p><p>是指类型，soft是当前系统生效的值，hard是系统可以设置的最大值；</p><p>item:</p><p>项目，是可以对什么项目做限制，如最大进程数，文件最大值；</p><p>value:</p><p>值，所设置的值的大小。</p><p><strong>这里我的设置是：</strong></p><pre><code>root soft nofile 65535root hard nofile 65535* soft nofile 65535* hard nofile 65535</code></pre><p>可以看到是没有问题的</p><h3 id="etc-security-limits-d-90-nproc-conf"><a href="#etc-security-limits-d-90-nproc-conf" class="headerlink" title="/etc/security/limits.d/90-nproc.conf"></a>/etc/security/limits.d/90-nproc.conf</h3><pre><code>[appqa@qa3-app018 ~]$ cat /etc/security/limits.d/90-nproc.conf# Default limit for number of user&apos;s processes to prevent# accidental fork bombs.# See rhbz #432903 for reasoning.*          soft    nproc     1024root       soft    nproc     unlimited</code></pre><p>这这里发现默认最大进程数只有1024</p><p>将1024修改为10240之后，再次执行su即可恢复正常，问题得到解决。</p><hr><h1 id="ignoring-option-PermSize-512m-support-was-removed-in-8-0"><a href="#ignoring-option-PermSize-512m-support-was-removed-in-8-0" class="headerlink" title="ignoring option PermSize=512m; support was removed in 8.0"></a>ignoring option PermSize=512m; support was removed in 8.0</h1><p><strong>问题描述：</strong></p><blockquote><p>java1.8之后持久代被废弃</p></blockquote><p>使用jdk1.8的时候设置了vm参数：-Xmx2048m -XX:PermSize=512m -XX:MaxPermSize=768m -Xss2m<br>此时运行java程序时VM提示如下警告：</p><pre><code>Java HotSpot(TM) 64-Bit Server VM warning: ignoring option PermSize=512m; support was removed in 8.0 Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=768m; support was removed in 8.0</code></pre><p>程序能正常兼容启动，不会产生影响，但这个提示还是引起了注意</p><p><strong>问题原因：</strong></p><p>-XX:PermSize和-XX:MaxPermSize在jdk1.8中被弃用了，使用-XX:MetaspaceSize和-XX:MaxMetaspaceSize替代。 </p><p>所以此时VM参数正确应为：-Xmx2048m -XX:MetaspaceSize=512m -XX:MaxMetaspaceSize=768m -Xss2m</p><p><strong>根本原因：</strong></p><p>在jdk1.8之前之前我们将储存类信息、常量、静态变量的方法区称为持久代(Permanent Generation)，PermSize和MaxPermSize是设置持久代大小的参数。</p><p>但是<strong><code>在jdk1.8中，持久代被完全移除了</code></strong>，所以这两个参数也被移除了，多了一个元数据区(Metadata Space)，所以设置元数据区大小的参数也变成对应的MetaspaceSize和MaxMetaspaceSize了。</p><hr><h1 id="DTS迁移问题"><a href="#DTS迁移问题" class="headerlink" title="DTS迁移问题"></a>DTS迁移问题</h1><p><strong>问题描述：</strong></p><blockquote><p>使用DTS进行迁移的时候，页面不出现数据库等信息。</p></blockquote><p><strong>问题解决：</strong></p><p>前端一个控件缓存的问题。</p><p>显示迁移列表的树形控件是单独引用的，连接上没有添加版本号，浏览器缓存未更新。</p><p>后面我们会再url带上版本信息，强制浏览器重新获取。</p><p>把这个js加上版本号 强制刷新</p><p>不用清缓存 会自动获取新的。<br>这样就不会有问题了</p>]]></content>
    
    <summary type="html">
    
      运维工作日常问题记录
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="运维工作日常问题" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E8%BF%90%E7%BB%B4%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%B8%B8%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="运维问题" scheme="http://yoursite.com/tags/%E8%BF%90%E7%BB%B4%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>python中方法与函数的区别</title>
    <link href="http://yoursite.com/2018/04/22/python%E4%B8%AD%E5%B1%9E%E6%80%A7%E4%B8%8E%E6%96%B9%E6%B3%95%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2018/04/22/python中属性与方法的区别/</id>
    <published>2018-04-22T07:08:05.000Z</published>
    <updated>2018-04-22T07:08:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>定义:</p><ul><li>function(函数) —— A series of statements which returns some value toa caller. It can also be passed zero or more arguments which may beused in the execution of the body.</li></ul><ul><li>method(方法) —— A function which is defined inside a class body. Ifcalled as an attribute of an instance of that class, the methodwill get the instance object as its first argument (which isusually called self).</li></ul><blockquote><p>Function包含一个函数头和一个函数体, 支持0到n个形参</p><p>而Method则是在function的基础上, 多了一层类的关系, 正因为这一层类, 所以区分了 function 和 method.而这个过程是通过 PyMethod_New实现的</p></blockquote><p>也就是说，函数可以脱离于类单独存在，在使用的时候，需要往函数中传入参数（实参）</p><p>而方法是与某个对象紧密联系的，不能脱离于类而存在方法的作用域只是在一个类中，只能在该类实例化后被该类使用</p><p>方法的绑定, 肯定是伴随着class的实例化而发生,我们都知道, 在class里定义方法, 需要显示传入self参数, 因为这个self是代表即将被实例化的对象。</p><p><strong>定义角度：</strong></p><p>从定义的角度上看，我们知道函数(function)就相当于一个数学公式，它理论上不与其它东西关系，它只需要相关的参数就可以。所以普通的在module中定义的称谓函数是很有道理的。</p><p>那么方法的意思就很明确了，它是与某个对象相互关联的，也就是说它的实现与某个对象有关联关系。这就是方法。虽然它的定义方式和函数是一样的。也就是说，在Class定义的函数就是方法。</p><p><strong>总结：</strong></p><pre><code>函数是一段代码，通过名字来进行调用。它能将一些数据（参数）传递进去进行处理，然后返回一些数据（返回值），也可以没有返回值。所有传递给函数的数据都是显式传递的。方法也是一段代码，也通过名字来进行调用，但它跟一个对象相关联。方法和函数大致上是相同的，但有两个主要的不同之处：方法中的数据是隐式传递的；方法可以操作类内部的数据（请记住，对象是类的实例化–类定义了一个数据类型，而对象是该数据类型的一个实例化）</code></pre>]]></content>
    
    <summary type="html">
    
      python中方法与函数的区别
    
    </summary>
    
      <category term="编程语言" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"/>
    
    
      <category term="python方法与函数" scheme="http://yoursite.com/tags/python%E6%96%B9%E6%B3%95%E4%B8%8E%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>湿气的产生及预防治疗</title>
    <link href="http://yoursite.com/2018/04/22/%E6%B9%BF%E6%B0%94%E7%9A%84%E4%BA%A7%E7%94%9F%E5%8F%8A%E9%A2%84%E9%98%B2%E6%B2%BB%E7%96%97/"/>
    <id>http://yoursite.com/2018/04/22/湿气的产生及预防治疗/</id>
    <published>2018-04-22T01:20:34.000Z</published>
    <updated>2018-04-22T01:20:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章结构：</p><ul><li>第一部分：是什么-湿气的概念  &amp;&amp; 为什么-湿气的产生原因</li><li>第二部分：怎么做-如何预防及治疗</li></ul><p>参考文献：</p><ul><li><a href="https://www.zhihu.com/question/20368808" target="_blank" rel="noopener">知乎-湿气是怎么回事，人为什么会有湿气？</a></li><li><a href="https://baike.baidu.com/item/%E6%B9%BF%E6%B0%94/2050090" target="_blank" rel="noopener">湿气（中医理论概念）</a></li></ul><h1 id="1-湿气概念及产生原因"><a href="#1-湿气概念及产生原因" class="headerlink" title=" 1. 湿气概念及产生原因 "></a><font color="red"> 1. 湿气概念及产生原因 </font></h1><h2 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h2><p><strong>1.1.1 湿</strong></p><blockquote><p>我们在日常生活中，感受到湿的时候一般是物体含水量超出一定范围，这个水分可以依附到很多物体上，比如湿巾、湿木头、湿衣服等等（无法正常排出的水）。</p><p>但含水量也不能超过一定限度，依附不住的水就不叫做湿，而是自由的水，比如湿衣服滴下来的水，这就不称为湿。</p></blockquote><p><strong>1.1.2 湿气</strong></p><blockquote><p>湿气是一种中医理论中的概念。通俗的来说，就是人体内有多余的水份无法正常代谢排出，堆积在身体之内，从而影响身体健康。（具体原因可能是个人体质、疾病或生活习惯不良，造成体内水分调控系统失衡）</p><p>就像我们日常生活中所看见的：食物放在潮湿的地方相比干燥的地方，很快就会发霉，类比到人上，当人的湿气较重之后，会产生一系列疾病。</p><p>一般也把湿气称之为：<strong><code>湿邪</code></strong></p></blockquote><p><strong>在致病的风、寒、暑、湿、燥、火这“六淫邪气” 中，中医最怕湿邪。</strong></p><p>湿是最容易渗透的。湿邪从来不孤军奋战，总是要与别的邪气狼狈为奸。</p><p>湿气遇寒则成为寒湿，这就好比冬天的时候，如果气候干燥，不管怎么冷，人都还是能接受的，但如果湿气重，人就很难受了。南方的冬天比北方的冬天更令人难受，就是因为南方湿气比较重，寒湿袭人。</p><p>湿气遇热则成为湿热，这就好比夏天的桑拿天，又热又湿，让人喘不过气来，明显不如烈日当空、气候干燥的时候来得痛快。</p><p>湿气遇风则成为风湿，驱风很容易，但一旦成了风湿，就往往是慢性疾病，一时半会儿治不好了。</p><p>湿气在皮下，就形成肥胖，也是不好处理的健康问题……</p><p>为什么现代人的病那么复杂，那么难治？因为他们体内有湿，体外的邪气总是和体内的湿气里应外合，纠缠不清！以前仅仅盛行于我国西南的川菜，风行全国，就是因为川味是辛辣的，以前只有生活在湿邪比较重的西南一带人需要用它来化解体内的湿气；全国人体内都有湿气了，这就需要辛辣来化解。</p><font color="blue"> <strong>主导湿气的人体器官是：<code>脾</code></strong> </font><blockquote><p>因此，湿气问题的根本原因是各种原因导致的脾功能下降（也有可能是其他器官导致，因为脾在工作时要需要借助胃肝肾等器官），具体见下文。</p></blockquote><h2 id="1-2-产生原因-湿气是怎么来的？"><a href="#1-2-产生原因-湿气是怎么来的？" class="headerlink" title="1.2 产生原因-湿气是怎么来的？"></a>1.2 产生原因-湿气是怎么来的？</h2><p><strong>1.2.1 外在原因</strong></p><blockquote><p>一个是因为外在的环境，也就是湿邪进入到了身体。</p><p>比如长期居住在湿气重的地方，比如淋了雨还不及时擦干，比如晚上洗头没吹干就睡觉，让外界的湿气进入到体内。</p><p>湿气进入身体后常常奔着脾胃去，导致脾的运化能力下降，而这又会容易导致体内生湿。</p></blockquote><p><strong>1.2.2 内因</strong></p><blockquote><p> 另外一个就是饮食习惯差，导致脾运化能力下降而生湿。【饮食不当，伤害脾胃，这是产生湿气的罪归祸首】</p><p>此外夏天的时候狂开空调，狂吃冷饮，硬生生的把要出来的水份给逼回去了。还有缺乏运动，没有及时的增强脾的工作能力。</p><p>脾主运化，吃进来的食物通过它来运化出精微物质，剩下的糟粕排出体外。当因为各种原因导致脾虚、运化能力下降的时候，精微物质就没法完全提炼出来。</p></blockquote><p><strong>1.2.3 原因解析</strong></p><blockquote><p> 从微观的角度讲，物质没有完全被消化时，就成了携带营养物质的“垃圾”，成分复杂且分子比较大，没法被人体吸收，但又不像糟粕那么大块头好分辨，那么容易把它们驱逐。</p><p>它们的分子量和体积远大于水分子，潜伏着，聚集起来，极其容易把周围的水分子吸附住、束缚住，使含水量超出正常的生理水平，于是形成了湿。</p></blockquote><font color="blue"> 脾被湿气困住，更加影响它的运化工作，导致湿气加重。湿一直凝聚不化，时间长了就成为痰，身体出于自保自救，把其中一部分水、二氧化碳和营养垃圾打包成了脂肪。所以中医常说胖人多痰湿，就是这个道理。【So，减肥先去湿气】</font><h2 id="1-3-湿气的特点"><a href="#1-3-湿气的特点" class="headerlink" title="1.3 湿气的特点"></a>1.3 湿气的特点</h2><p><strong>1.3.1 笨重并且混浊</strong></p><blockquote><p>湿气依附在身体某些地方，和身边的物体紧紧结合，难舍难离。物体湿的状态时会比干燥的时候重很多,所以体内有湿气的时候，我们往往觉得身体或头部沉重；湿气浊会导致身体气血流通不畅，长期聚集身体又没法整治它,导致有湿气的地方脏乱差，滋生各种毒害。</p></blockquote><p><strong>1.3.2 难缠粘人</strong></p><blockquote><p>什么东西被湿邪盯上，就好像被缠上了粘液，各种不爽，比如小便不畅，大便黏腻不爽等。此外它还很难去除，经常和你缠缠绵绵，病程较长，比如风湿病、温湿病。</p></blockquote><p><strong>1.3.3 阻遏气机、损伤阳气</strong></p><blockquote><p>湿气本质上属于阴邪，靠着它黏腻难缠的劲头，赖在脏腑经络上不走，导致气机升降无能，于是阳气就没法正常生发了。所以一般被湿邪困住的人，阳气都不太旺，会有脸色淡白，精力不济的现象。</p></blockquote><h2 id="1-4-湿气重的表现"><a href="#1-4-湿气重的表现" class="headerlink" title="1.4 湿气重的表现"></a>1.4 湿气重的表现</h2><ul><li><p>头发爱出油、面部油亮, 小肚子大(常有胀气)，身体浮肿。</p></li><li><p>身体发沉、发重，浑身无力。</p></li><li><p>皮肤上会有湿疹，胃口不好，嘴里发黏。</p></li><li><p>常感到疲倦，精力不集中睡觉打呼噜，痰多，咳嗽,睡觉留口水、口臭、身体有异味，耳内湿（耳禅湿）毛发粗糙，易脱落。</p></li><li><p>舌质很胖，颜色偏淡。症状严重的，舌头边上会有齿痕，这叫“裙边舌”。</p></li><li><p>眼袋下垂，黑圆圈严重，肥胖，减肥后反弹，机能衰退，对房事不感兴趣质量不高等。</p></li><li><p>大便溏稀不成型，正常的大便是光滑的呈圆柱体，每次大便之后，不会粘在光滑的马桶壁上，如果你每次上完厕所，大便冲不干净，那么一定是体内湿气在作怪。而且，湿气会让便秘如影随形。下一次，当你大便的时候，很可能就会出现便秘。</p></li><li><p>等等等等</p></li></ul><p>当湿气演变成为顽固性湿气的时候，身体会出现数十种不适：</p><p><img src="http://picture.watchmen.xin/湿气/1.jpg" alt="湿气"></p><p>以上症状，如果你占了2种以上，要引起注意了，这说明体内有湿气。湿气不除，是引发及恶化疾病的关键。</p><p>并且现代人由于工作强度、压力等都更大，因此运动量也原来越小，体内阴盛阳虚从而湿邪内郁。这也是当前越来越多的年轻人有湿气相关疾病的原因。</p><h1 id="2-如何预防及治疗"><a href="#2-如何预防及治疗" class="headerlink" title="2. 如何预防及治疗 "></a><font color="red">2. 如何预防及治疗 </font></h1><p>在这里，我们将预防和治疗两者结合在一起说明，因为光靠预防不能完全杜绝，或多或少肯定都还是会产生湿气。</p><p>湿气很重，不要只会傻傻拔罐。</p><h2 id="2-1-药物"><a href="#2-1-药物" class="headerlink" title="2.1 药物"></a>2.1 药物</h2><p>目前没有什么比较好的药物，一般采用饮食结合运动的方式来预防和治疗湿气。</p><h2 id="2-2-饮食"><a href="#2-2-饮食" class="headerlink" title="2.2 饮食"></a>2.2 饮食</h2><p>这里只说该吃什么，至于不该吃什么，请看<code>日常生活</code>章节</p><ul><li>薏米赤小豆桂圆粥<ul><li>薏米：性寒。因此要用赤小豆来中和，并且每次的量不宜太多</li><li>赤小豆：性，。注意赤小豆是扁的，红豆是圆的</li><li>桂圆/枣：桂圆甘温。有的人体质偏寒，里面可以加一点温补的食物，像桂圆、大枣都可以</li></ul></li></ul><p>如果着凉感冒了，或是体内有寒，胃中寒痛，食欲不佳，可在薏米赤小豆汤中加几片生姜。生姜性温，能温中祛寒，健脾和胃。</p><p>肾虚的人，可在薏米赤小豆汤中加一些黑豆。因为黑色入肾，豆的形状也跟肾十分相似，以形补形，是补肾的佳品。</p><p>人们常说的脚气病，是典型的湿热下注。可在薏米赤小豆汤中加点碎黄豆，用熬出来的汤泡脚，这是治脚气的一个小秘方。</p><p>学会薏米赤小豆汤的加减变化，使用得当可以对生活中大部分常见病起到很好的治疗效果。</p><p><strong>如下图所示：</strong></p><p><img src="http://picture.watchmen.xin/湿气/2.png" alt="加减法"></p><h2 id="2-3-运动"><a href="#2-3-运动" class="headerlink" title="2.3 运动"></a>2.3 运动</h2><p>现代人动脑多、体力消耗少，加上长期待在密闭空调内，很少流汗，身体调控湿度的能力变差。因此这也为产生湿气创造了条件。</p><p>运动出汗是很好的去湿气方式</p><h2 id="2-4-日常生活"><a href="#2-4-日常生活" class="headerlink" title="2.4 日常生活"></a>2.4 日常生活</h2><p><strong>2.4.1 不宜</strong></p><ul><li>不过食生冷肥甘厚腻甜辛辣，</li><li>避开生冷食物。这里说的生冷食物指的是冷饮、凉拌菜等，而不是水果。【这一点在夏天的时候最为明显，一些人在夏天时喝冷饮、和冰镇啤酒、吃冰镇西瓜、吃凉菜等毫无节制】</li><li>夏天尽量不吹空调</li><li>睡前务必吹干头发</li><li>饮食口味重，日常饮食口味经常过重的话，由于细胞渗透压的作用，浓度低的会向浓度高的一方渗透，力求平衡，从而会使身体处于不正常状态</li><li>不宜久坐，一小时不动两小时不动三小时不动，身体以为你不会动了，它的运行也会慢下来慢下来</li><li>不宜大量吃水果。</li></ul><p><strong>2.4.2 宜</strong></p><ul><li>晚上用热水泡脚。<ul><li>每天晚上坚持用热水泡脚半小时（<strong>注意：时间是半小时</strong>），泡到微微出汗。</li><li>泡脚的同时敲打肘窝、腘和腋窝各5分钟。这三个地方是排湿气的重要部位。腋窝都知道，肘窝就是手肘后面弯曲部位，腘就是膝盖后面弯曲部位。</li></ul></li></ul><ul><li><p>天气好的日子，勤晒衣物和被子，减少病菌，降低生病的可能。</p></li><li><p>夏天时家中易闷热潮湿，每天要适度开窗换气，新鲜的空气可以减少细菌病毒的滋生，以傍晚最适宜。</p></li><li><p>清淡饮食</p></li><li>保持衣物干爽,不要穿潮湿未干的衣服、盖潮湿的被子，被子(垫絮)要经常晒。</li><li>夏天不要贪凉睡地板</li></ul><h2 id="2-5-总结"><a href="#2-5-总结" class="headerlink" title="2.5 总结"></a>2.5 总结</h2><p>食疗、运动最多只能暂时缓解症状，找到自身湿气产生的原因，才能从根上断绝它。</p><p>我们不能怪罪脾胃太虚弱，吃那么多它累死也消化不完啊；不要怪它懒罢工不干活，湿气困着它，它也很无奈；别说它工作不到位，身体消耗少，营养物质只能不断堆积。</p><p>不形成良好的生活习惯，喝再多薏米粥、吃再多健脾祛湿的方药都是白搭！所以与其总是寻医问药寻找除湿气的方法，不如老老实实先好好吃饭、合理饮食、不贪凉不贪酒、加强体育锻炼.多动少吃清淡平衡饮食,这才是正确的姿势。</p>]]></content>
    
    <summary type="html">
    
      湿气是我们日常生活中经常听到的一个概念，在医院看病的时候，医生可能会来上一句：&quot;湿气有点重&quot;，那么到底什么事湿气呢，我们在日常生活中又该如何预防及治疗呢？
    
    </summary>
    
      <category term="个人知识体系" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    
      <category term="极简身体之道" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/%E6%9E%81%E7%AE%80%E8%BA%AB%E4%BD%93%E4%B9%8B%E9%81%93/"/>
    
      <category term="湿气" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/%E6%9E%81%E7%AE%80%E8%BA%AB%E4%BD%93%E4%B9%8B%E9%81%93/%E6%B9%BF%E6%B0%94/"/>
    
    
      <category term="湿气" scheme="http://yoursite.com/tags/%E6%B9%BF%E6%B0%94/"/>
    
  </entry>
  
  <entry>
    <title>X-Pack</title>
    <link href="http://yoursite.com/2018/04/19/X-Pack/"/>
    <id>http://yoursite.com/2018/04/19/X-Pack/</id>
    <published>2018-04-19T03:35:55.000Z</published>
    <updated>2018-04-19T03:35:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考资料：</p><p><a href="https://www.elastic.co/guide/en/x-pack/current/index.html" target="_blank" rel="noopener">官网</a></p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>x-pack是Elastic Stack的扩展包，实现了如下的一系列功能：</p><ul><li>Security</li><li>Monitoring</li><li>Alerting and Notification</li><li>Reporting</li><li>Graph</li><li>Machine Learning</li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1>]]></content>
    
    <summary type="html">
    
      X-Pack从入门到精通
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="大数据" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="大数据相关组件" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/"/>
    
      <category term="X-Pack" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/X-Pack/"/>
    
    
      <category term="X-Pack" scheme="http://yoursite.com/tags/X-Pack/"/>
    
  </entry>
  
  <entry>
    <title>服务器硬件知识</title>
    <link href="http://yoursite.com/2018/04/18/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A1%AC%E4%BB%B6%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2018/04/18/服务器硬件知识/</id>
    <published>2018-04-18T03:38:29.000Z</published>
    <updated>2018-04-18T03:38:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>##</p>]]></content>
    
    <summary type="html">
    
      服务器硬件知识
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="服务器硬件" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A1%AC%E4%BB%B6/"/>
    
      <category term="服务器硬件知识" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A1%AC%E4%BB%B6/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A1%AC%E4%BB%B6%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="服务器硬件" scheme="http://yoursite.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
</feed>
