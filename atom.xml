<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Watchmen1992&#39;s Blog</title>
  
  <subtitle>锦瑟年华当与书香为度，是为不负天地人生。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-01T07:32:57.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>XiaoHua WANG</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>终端常用快捷键</title>
    <link href="http://yoursite.com/2018/04/01/%E7%BB%88%E7%AB%AF%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://yoursite.com/2018/04/01/终端常用快捷键/</id>
    <published>2018-04-01T07:32:57.000Z</published>
    <updated>2018-04-01T07:32:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h1><pre><code>Tab键：    命令、文件名等自动补全功能。Ctrl+a：    光标回到命令行首。 （a：ahead）Ctrl+e：    光标回到命令行尾。 （e：end）Ctrl+b：    光标向行首移动一个字符。 （b：backwards）Ctrl+f：    光标向行尾移动一个字符。 （f：forwards）Ctrl+w：     删除光标处到行首的字符，也就是删除光标前面的所有内容。Ctrl+k：    删除光标处到行尾的字符，也就是删除光标后面的所有内容。Ctrl+u：    删除整个命令行文本字符，删除整行命令。Ctrl+h：    向行首删除一个字符，向前删除一个字符，相当于Backspace。Ctrl+d：    向行尾删除一个字符，向后删除一个字符，相当于Delete。Ctrl+y：    粘贴Ctrl+u，Ctrl+k，Ctrl+w删除的文本。Ctrl+p：     上一个使用的历史命令。 （p：previous）Ctrl+n：     下一个使用的历史命令。（n：next ）Ctrl+t：     交换光标所在字符和其前的字符。Ctrl+i：    相当于Tab键。Shift+Insert：    粘贴鼠标所复制的内容Ctrl+d:     在空命令行的情况下可以退出终端。Shift+c：    删除之后的所有内容并进入编辑模式Ctrl+c：    中断终端中正在执行的任务。Ctrl+z：    使正在运行在终端的任务，运行于后台。 （可用fg恢复到前台）</code></pre><h1 id="非常用快捷键"><a href="#非常用快捷键" class="headerlink" title="非常用快捷键"></a>非常用快捷键</h1><pre><code>Ctrl+s：    使终端发呆，静止，可以使快速输出的终端屏幕停下来。Ctrl+q：    退出Ctrl+s引起的发呆。Ctrl+[ ：    相当于Esc键。Esc键：    连续按3次显示所有的支持的终端命令，相当于Tab键。Ctrl+r：    快速检索历史命令。（r：retrieve）。Ctrl+o：    =Ctrl+m：相当Enter键。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;常用快捷键&quot;&gt;&lt;a href=&quot;#常用快捷键&quot; class=&quot;headerlink&quot; title=&quot;常用快捷键&quot;&gt;&lt;/a&gt;常用快捷键&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;Tab键：    命令、文件名等自动补全功能。
Ctrl+a：    光标回到命令行首。 （a：ah
      
    
    </summary>
    
      <category term="Linux基础知识" scheme="http://yoursite.com/categories/Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="终端常用快捷键" scheme="http://yoursite.com/categories/Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%BB%88%E7%AB%AF%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
    
      <category term="终端常用快捷键" scheme="http://yoursite.com/tags/%E7%BB%88%E7%AB%AF%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
  </entry>
  
  <entry>
    <title>Linux运维工程师面试常见问题</title>
    <link href="http://yoursite.com/2018/03/28/Linux%E8%BF%90%E7%BB%B4%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/03/28/Linux运维工程师面试常见问题/</id>
    <published>2018-03-28T08:22:01.000Z</published>
    <updated>2018-03-28T08:22:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IT基础知识（偏linux）"><a href="#IT基础知识（偏linux）" class="headerlink" title="IT基础知识（偏linux）"></a>IT基础知识（偏linux）</h1><h2 id="redhat、centos、suse、ubuntu等发行版本的区别"><a href="#redhat、centos、suse、ubuntu等发行版本的区别" class="headerlink" title="redhat、centos、suse、ubuntu等发行版本的区别"></a>redhat、centos、suse、ubuntu等发行版本的区别</h2><p>这些发行版本本质上没有什么区别，都是类unix系统。<br>redhat的系统本身是免费的，但是它的服务和一些特定的组件是收费的<br>而centos是redhat社区版本，国内使用较多，社区相当活跃。<br>SUSE也是分为两种，一种企业版本的SLES，一种是opensuse，sles主要是一些金融国企在使用，安全性较好，opensuse是社区版本，suse使用起来和centos相差不多，软件包形式使用源自redhat的rpm，但是管理工具使用的是zypper。<br>ubuntu源自于debain，国外使用的较多，也是相当热门的一个发型版本，在桌面领域有绝对技术优势，适合开发人员使用。</p><h2 id="OSI7层模型和TCP-IP模型的区别联系"><a href="#OSI7层模型和TCP-IP模型的区别联系" class="headerlink" title="OSI7层模型和TCP/IP模型的区别联系"></a>OSI7层模型和TCP/IP模型的区别联系</h2><h3 id="OSI7层模型"><a href="#OSI7层模型" class="headerlink" title="OSI7层模型"></a>OSI7层模型</h3><p>OSI 7层模式主要是由国际标准化组织（ISO）创建的，是一个国际通用的标准，它被开发出作为一个参照标准，用于指导如何设计网络通信系统。说的简单一点就是统一网络设备商的协议标准，实现多网络设备商环境（主机，路由器，交换机等等都是网络设置，都要遵循同一套的通信标准）<br>它一共分为7层，每一层在网络通信数据传输过程中都定义了不同的功能。</p><p>OSI7层模型主要分为(从下到上)：物理层，数据链路层，网络层，传输层，会话层，表示层，应用层。<br>每一层说明：</p><table><thead><tr><th style="text-align:center">layer</th><th style="text-align:left">function</th></tr></thead><tbody><tr><td style="text-align:center">Application</td><td style="text-align:left">data flow；离用户最近的一层，它使一个网络应用能和另一个网络应用相互通信</td></tr><tr><td style="text-align:center">Presentation</td><td style="text-align:left">定义数据格式；数据压缩、加解密等。</td></tr><tr><td style="text-align:center">Session</td><td style="text-align:left">定义如何建立和终止连接，是告诉4层怎么做，4层只管被动的接受然后去做。</td></tr><tr><td style="text-align:center">Transport</td><td style="text-align:left">数据段；将上层的数据流进行分段；建立和终止网络连接；常用于流量控制和数据恢复</td></tr><tr><td style="text-align:center">Network</td><td style="text-align:left">数据包；使用IP地址在Internet上唯一确定一台设备；定义设备路由，寻址</td></tr><tr><td style="text-align:center">Data link</td><td style="text-align:left">数据帧；将上层数据封装成数据帧，其中包含源目MAC地址以及帧校验字段（用于检测传输错误）；它包含2个子层（LLC和MAC）</td></tr><tr><td style="text-align:center">Physical</td><td style="text-align:left">比特流；定义了比特流如何在两台设备之间流通；主要涉及线缆，网卡，</td></tr></tbody></table><p>下面是每一层常见的对应协议</p><table><thead><tr><th style="text-align:center">layer</th><th style="text-align:left">protocol</th></tr></thead><tbody><tr><td style="text-align:center">Application</td><td style="text-align:left">HTTP,FTP,Telnet,SMTP,SNMP</td></tr><tr><td style="text-align:center">Presentation</td><td style="text-align:left">MIME,TIFF,GIF,JPEG,PICT,ASCII,EBCDIC,encryption,MPEG,MIDI,HTML</td></tr><tr><td style="text-align:center">Session</td><td style="text-align:left">SSl/TLS,NetBIOS,RPC</td></tr><tr><td style="text-align:center">Transport</td><td style="text-align:left">TCP,UDP</td></tr><tr><td style="text-align:center">Network</td><td style="text-align:left">IP,ICMP,ARP,RARP</td></tr><tr><td style="text-align:center">Data link</td><td style="text-align:left">PPP,HDLC,IEEE 802.3/802.2,FDDI,ATM,IEEE 802.5/802.2</td></tr><tr><td style="text-align:center">Physical</td><td style="text-align:left">Ethernet</td></tr></tbody></table><h3 id="TCP-IP协议族"><a href="#TCP-IP协议族" class="headerlink" title="TCP/IP协议族"></a>TCP/IP协议族</h3><p>TCP/IP模型类似OSI模型，作用也是描述一套指导标准，实现网络设备之间的通信，它被设计成4层</p><pre><code>ApplicationTransportInternetNetwork Access</code></pre><p>其对应关系为：</p><table><thead><tr><th style="text-align:center">TCP/IP model</th><th style="text-align:left">OSI model</th></tr></thead><tbody><tr><td style="text-align:center">Application</td><td style="text-align:left">Application</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">Presentation</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">Session</td></tr><tr><td style="text-align:center">Transport</td><td style="text-align:left">Transport</td></tr><tr><td style="text-align:center">Internet</td><td style="text-align:left">Network</td></tr><tr><td style="text-align:center">Network Access</td><td style="text-align:left">Data link</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">Physical</td></tr></tbody></table><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>除了层数的区别之外，它们之间最大的区别就是：</p><blockquote><p>OSI模型规定了在一个网络上传输数据所需要的步骤，并且它是非常具体的，定义了每一层使用什么协议以及如何使用；而TCP/IP模型是不特定的。<br>另外一个区别就是，目前TCP/IP是所有网络设备上既定的协议事实，一般分析问题使用OSI模型。</p></blockquote><h2 id="路由，交换技术的基本原理"><a href="#路由，交换技术的基本原理" class="headerlink" title="路由，交换技术的基本原理"></a>路由，交换技术的基本原理</h2><h3 id="路由技术"><a href="#路由技术" class="headerlink" title="路由技术"></a>路由技术</h3><p>我们在这里说的路由技术一般是指，路由转发。主要涉及设备为路由器或者三层交换机。这些设备上会维护一张路由表，其中的信息可以是通过动态路由协议（例如OSPF，EIGRP，ISIS，RIP，BGP，静态路由，默认路由等）获取组成<br>路由表的内容是：出口接口和对应网段</p><p>路由设备接收到一个数据包之后，会解封装，获取其中的目的IP地址信息（网段信息），然后查找路由表，选择最优路由去转发。<br>路由设备上也会有一张ARP表，根据广播域</p><h3 id="交换技术"><a href="#交换技术" class="headerlink" title="交换技术"></a>交换技术</h3><p>在一个局域网内，也就是一个广播域内使用的技术。通常会涉及到的设备就是交换机。<br>交换机上会维护一张MAC地址转发表，其中的信息是MAC地址和端口的映射关系。交换机根据数据帧中的目的MAC地址进行数据包的转发</p><blockquote><p>注意：在一个广播域内的数据流动是依靠二层MAC来实现的，因为在第一次会涉及到ARP，有了记录之后，交换机会记录他的MAC地址表，后续的速度就会非常快</p></blockquote><p><strong>PS：有关网络模型和路由技术可以结合一个小案例在白板上演示一下，效果会更好，也就是将上述两部分的内容有机的整合成为一个整体</strong></p><h2 id="运维角度看软件开发生命周期"><a href="#运维角度看软件开发生命周期" class="headerlink" title="运维角度看软件开发生命周期"></a>运维角度看软件开发生命周期</h2><p>软件开发生命周期的本源是人的需求以及满足需求的关系。<br>人的抽象产品就是需求。而开发出来的产品运行态的进程就是具体的具象表达。</p><p>问题定义及规划，需求分析，软件设计，软件开发，测试，部署</p><ul><li>问题定义及规划</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">确定软件的开发目标及可行性</span><br></pre></td></tr></table></figure><ul><li>需求分析    </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">前提：确定软件开发可行</span><br><span class="line">对软件需要实现的各个功能进行详细分析</span><br></pre></td></tr></table></figure><ul><li>软件设计<pre><code class="bash">主要依据需求分析的结果对整个软件系统进行设计，例如系统框架设计，数据库设计等。软件设计一般分为总体设计和详细设计</code></pre></li></ul><h1 id="脚本部分"><a href="#脚本部分" class="headerlink" title="脚本部分"></a>脚本部分</h1><h1 id="运维知识"><a href="#运维知识" class="headerlink" title="运维知识"></a>运维知识</h1><h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><h1 id="运维思想"><a href="#运维思想" class="headerlink" title="运维思想"></a>运维思想</h1><h2 id="运维核心"><a href="#运维核心" class="headerlink" title="运维核心"></a>运维核心</h2><h3 id="稳定性-网站-平台不宕机【核心】"><a href="#稳定性-网站-平台不宕机【核心】" class="headerlink" title="稳定性-网站/平台不宕机【核心】"></a>稳定性-网站/平台不宕机【核心】</h3><p>集群</p><p>负载均衡</p><p>高可用</p><p>解耦，微服务</p><h3 id="数据不丢失【核心】"><a href="#数据不丢失【核心】" class="headerlink" title="数据不丢失【核心】"></a>数据不丢失【核心】</h3><p>数据备份，异地容灾</p><h3 id="避免人为错误"><a href="#避免人为错误" class="headerlink" title="避免人为错误"></a>避免人为错误</h3><ol><li>避免人为错误，主要分为两个方面，一个是开发不严谨产生的错误，这部分通过流程可以控制。【比如测试不严谨，开发人员的代码有问题，直接把服务器资源跑没了】</li><li><p>一个是自己操作产生的问题，这部分通过一些智能化的自动化工具来尽量避免【避免在执行命令的时候误操作等等】</p></li><li><p>解决：建立完善的流程制度，对运维来说，包括标准化，对开发测试来说，包括上线的流程化</p></li></ol><h3 id="运维效率"><a href="#运维效率" class="headerlink" title="运维效率"></a>运维效率</h3><p>管理平台<br>运维脚本化，工具化，自动化，人工智能化</p><h2 id="如何做好运维工作-运维核心"><a href="#如何做好运维工作-运维核心" class="headerlink" title="如何做好运维工作-运维核心"></a>如何做好运维工作-运维核心</h2><h3 id="主动性"><a href="#主动性" class="headerlink" title="主动性"></a>主动性</h3><h1 id="运维职业规划"><a href="#运维职业规划" class="headerlink" title="运维职业规划"></a>运维职业规划</h1><h2 id="问题解析"><a href="#问题解析" class="headerlink" title="问题解析"></a>问题解析</h2><p>面试官主要想了解的是个人定位问题。从事IT这一行，只有有非常清晰的目标，才能保证持续高效的产出。</p><p>因此，回答这种问题，主要从以下几点来回应</p><ul><li>的</li><li></li></ul><h2 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h2><h1 id="其他相关问题"><a href="#其他相关问题" class="headerlink" title="其他相关问题"></a>其他相关问题</h1><h2 id="你为什么离职"><a href="#你为什么离职" class="headerlink" title="你为什么离职"></a>你为什么离职</h2><h2 id="你对加班的看法"><a href="#你对加班的看法" class="headerlink" title="你对加班的看法"></a>你对加班的看法</h2><h2 id="个人最大的优点和缺点"><a href="#个人最大的优点和缺点" class="headerlink" title="个人最大的优点和缺点"></a>个人最大的优点和缺点</h2>]]></content>
    
    <summary type="html">
    
      职场发展系列之Linux运维工程师面试常见问题
    
    </summary>
    
      <category term="职场" scheme="http://yoursite.com/categories/%E8%81%8C%E5%9C%BA/"/>
    
      <category term="Linux运维面试" scheme="http://yoursite.com/categories/%E8%81%8C%E5%9C%BA/Linux%E8%BF%90%E7%BB%B4%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="Linux运维面试" scheme="http://yoursite.com/tags/Linux%E8%BF%90%E7%BB%B4%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>docker常用命令记录</title>
    <link href="http://yoursite.com/2018/03/19/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2018/03/19/docker常用命令记录/</id>
    <published>2018-03-19T11:53:46.000Z</published>
    <updated>2018-03-19T11:53:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h1><h2 id="下载-获取镜像"><a href="#下载-获取镜像" class="headerlink" title="下载/获取镜像"></a>下载/获取镜像</h2><h2 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h2><h2 id="查看镜像信息"><a href="#查看镜像信息" class="headerlink" title="查看镜像信息"></a>查看镜像信息</h2><h3 id="images命令"><a href="#images命令" class="headerlink" title="images命令"></a>images命令</h3><p>使用docker images命令可以列出本地主机上已有镜像的基本信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker images [option]</span><br></pre></td></tr></table></figure><p>常用参数如下：</p><ul><li>-a    –all=true|false    列出所有的镜像文件（包括临时文件），默认为否</li><li>–digests=true|false        列出镜像的数字摘要值，默认为否</li><li>-f     –filter=[]        过滤列出的镜像</li></ul><p><strong>具体可以通过man docker-images 进行查看。</strong></p><h3 id="inspect命令"><a href="#inspect命令" class="headerlink" title="inspect命令"></a>inspect命令</h3><h2 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h2><h3 id="tag命令"><a href="#tag命令" class="headerlink" title="tag命令"></a>tag命令</h3><h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2>]]></content>
    
    <summary type="html">
    
      本文只记录docker常用命令，方便快速检索，docker相关知识可看其他文章。
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="docker命令" scheme="http://yoursite.com/tags/docker%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>zabbix的历史数据与趋势数据</title>
    <link href="http://yoursite.com/2018/02/06/zabbix%E7%9A%84%E5%8E%86%E5%8F%B2%E6%95%B0%E6%8D%AE%E4%B8%8E%E8%B6%8B%E5%8A%BF%E6%95%B0%E6%8D%AE/"/>
    <id>http://yoursite.com/2018/02/06/zabbix的历史数据与趋势数据/</id>
    <published>2018-02-06T08:57:24.000Z</published>
    <updated>2018-02-06T08:57:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.zabbix.com/documentation/4.0/zh/manual/config/items/history_and_trends" target="_blank" rel="noopener">官方文档</a></p><p><a href="https://www.londry.cn/history/updated-2017-09-03-zabbix-history-trends%E5%8E%86%E5%8F%B2%E4%B8%8E%E8%B6%8B%E5%8A%BF%E6%95%B0%E6%8D%AE%E8%AF%A6%E8%A7%A3%EF%BC%8823%EF%BC%89.html" target="_blank" rel="noopener">zabbix history trends历史与趋势数据详解</a></p><p><a href="http://www.51niux.com/?id=150" target="_blank" rel="noopener">zabbix配置操作详解（三）</a></p><p><a href="http://blog.chinaunix.net/uid-9411004-id-4139807.html" target="_blank" rel="noopener"> Zabbix系统中的历史数据和趋势数据 </a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h3 id="历史与趋势"><a href="#历史与趋势" class="headerlink" title="历史与趋势"></a>历史与趋势</h3><p>历史数据和趋势数据是Zabbix系统中对采集到的监控项数据进行存储的两种方式。</p><p>历史根据设定的时间间隔保持每个收集的值，</p><p>而趋势是每个小时产生一个值（一条信息），内容为历史数据在<strong><code>一个小时内</code></strong>的<code>平均值</code>、<code>最大值</code>、<code>最小值</code>以及这一个小时内该监控项目所采集到的数据的<code>个数</code>。</p><h3 id="在zabbix中的配置"><a href="#在zabbix中的配置" class="headerlink" title="在zabbix中的配置"></a>在zabbix中的配置</h3><p>在监控项配置页面进行定义，在这里，我的配置是历史数据保留15天，趋势数据保留90天。<br>如下图所示：</p><p><img src="http://picture.watchmen.xin/zabbix/history_and_trends/01.png" alt="第一张图片">    </p><h2 id="区别联系详解"><a href="#区别联系详解" class="headerlink" title="区别联系详解"></a>区别联系详解</h2><p>历史和趋势数据它们既有区别又有联系。</p><ul><li><strong>历史数据：</strong></li></ul><p>Zabbix系统针对每个监控项目在每次采集时所收集到的数据，这个数据保存Zabbix系统数据库的历史表中，这就是所谓的历史数据。</p><p>因为每次所采集到的数据都保存在历史表中，所以如果监控项目的更新间隔越小，则在固定时间内所保存到历史表中的数据就越多。如果每个监控项目的更新间隔是30秒的话，则两个小时，该监控项目在Zabbix数据库的历史表中就会产生240条记录，一天就会产生2880条记录。</p><p>如果我们的Zabbix系统只监控一台被监控主机，且这台被监控主机只有一个被监控项目，那么每天产生2880条记录确实不值得一提的。<br>但是，当我们监控系统所监控的项目比较多时，则这个数据量是非常大的。</p><p>比如说，如果我们监控系统监控1000个监控项目，且每个监控项目的更新间隔都是30秒，则每天历史表中就会产生2880*1000=2880000条记录，也即近300万条记录。而1000个监控项目可以监控多少主机呢？我们以48口的交换机为例，单监控每台交换机的每个端口的流量，则一台48口的交换机就有96个监控项目。所以，如果我们仅监控这样的48口的交换机，1000个监控项目只差不多只够监控10台这样交换机。由此可见，如果我们所监控主机的数量稍微多一点，或者更确切的来说，我们所监控的项目稍微多点，则Zabbix系统每天在其数据库中所产生的记录是非常大的。</p><p>因此，我们建议，如非必须的，我们在配置监控项目时，应尽量减小历史数据的保留天数，以免给数据库系统带来很大的压力。</p><ul><li><strong>趋势数据：</strong></li></ul><p>而趋势数据则不同，对于相同的更新间隔，系统所产生的趋势数据的数量远远没有历史数据那么庞大。对同一个监控项目，之所以趋势数据的数据量要远远小于历史数据的数据量，是由趋势数据的取值方式决定的。</p><p>趋势数据取值方式是，它取对应监控项目的历史数据在一个小时内的平均值、最大值、最小值以及这一个小时内该监控项目所采集到的数据的个数。</p><p>因此，不管一个监控项目的更新间隔是多少，它所对应的趋势数据在数据库中的记录都只有一条<strong>。更新间隔越小，仅可能导致数据个数增大，而不会影响该监控项目在趋势表里的记录条数的。</strong></p><p>由此，或许你觉得趋势数据很不准确，你还是愿意保留更长时间的历史数据，以便查看较长时间的数据图。其实不是这样的，因为在Zabbix系统数据库的趋势表里不但保留一个小时内历史数据的最大值、最小值和平均值，而还保存这一个小时内所采集到的数据个数。因此，<strong><code>在要求并不是很高的场合</code></strong>，使用趋势数据绘出的监控项目的数据图的走势与用历史数据绘出的数据图的走势差别不会很大的。</p><p>不管是历史数据还是趋势数据，都会周期性被Zabbix服务器端一种称之为“主妇（housekeeper）”进程进行清理，它会周期性的删除过期的历史数据和趋势数据。</p><p>也正是因为这个进程的存在，才会使Zabbix系统数据的数据量不会一直的彭胀下去。而实际上，如果我们在保持Zabbix系统的被监控主机和被监控项目不变，且不更改监控项目的更新间隔的情况下，Zabbix系统的数据库的数据量会在增长到一定的数据量后不再增长，而是基本维持在这个数据量上不变。</p><p>“主妇”进程清理历史数据和趋势数据的频率可以在Zabbix服务器端组件(或服务器代理组件)的配置文件zabbix_server.conf中进行配置，它的配置项是HousekeepingFrequency。</p><ul><li><strong>特别注意：</strong></li></ul><p>1、 如果监控项目的“保留历史数据(天)”配置项被设置成0时，则数据库历史表中仅保留该监控项目所采集的最后一条数据，其它历史数据将不会被会保留。而且，引用该监控项目的触发器也只能使用该项目所采集的最后数据。因此，此时如果在触发器里引用该项目时使用max、avg、min等函数，其将没有意义。</p><p>2、 如果监控项目的“保留趋势数据(天)”配置项被设置成0时，则该项目在系统数据库的趋势表里将不保留任何数据。</p><h2 id="配置建议"><a href="#配置建议" class="headerlink" title="配置建议"></a>配置建议</h2><p>具体该配置成什么样的周期，需要根据监控项以及数据库的配置以及对数据查看的要求程度来决定。<br>这里只给出相关建议。</p><h3 id="历史数据配置"><a href="#历史数据配置" class="headerlink" title="历史数据配置"></a>历史数据配置</h3><p>首先我们需要知道当前mysql的存储情况。<br>在zabbix的前端页面上，我们可以看到如下图所示信息：</p><p><img src="http://picture.watchmen.xin/zabbix/history_and_trends/02.png" alt="第一张图片">    </p><p>这个数值就是NVPS，也就是每秒处理平均数量（Number of processed values per second)</p><p>计算公式如下：</p><pre><code>历史数据大小=NVPSx3600x24x365(天数)x50B每个监控项大小约为50B，每秒条数为NVPS，一小时3600秒，一天24小时，一年365年。具体单个监控项大小取决于数据库引擎，通常为50B</code></pre><p>例如：</p><pre><code>假设有6W个监控项，刷新周期都为60秒（我这里为30秒），那么每秒将会产生1000条数据，也就是每秒会向数据库写入1000条数据。如果我的历史数据保留天数为90天，那么需要的空间大小如下：1000x3600x24x90x50=388 800 000 000(B) (约为362G，如果保存一年则为：362x4=1448G)</code></pre><h3 id="趋势数据配置"><a href="#趋势数据配置" class="headerlink" title="趋势数据配置"></a>趋势数据配置</h3><p>因为趋势数据是每小时每个监控项一条记录，因此可以计算出大致所占的空间，其计算公式如下：</p><pre><code>趋势数据大小=监控项个数x24x365(天数)x128B每一个监控项的大小约为128B，每小时产生一条记录，一天24小时，一年365天具体单个监控项大小取决于数据库引擎，通常为128B</code></pre><p>例如：</p><pre><code>假设有6W个监控项，保存一年的趋势数据，那么需要的空间如下：60000x24x265x128=67 276 800 000(B) （约为67GB）</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过上面的计算对比，相信可以很直观的看到差别，在同样一年的情况下，历史与趋势所占存储空间的比例为：<strong><code>1448/67</code></strong>。</p><p>所以，具体选择什么周期需要根据公司的业务及实际情况（硬件配置等）来决定，并没有一个统一的标准，遵循这个公式，都可以很明确的计算预估出数据量情况。</p>]]></content>
    
    <summary type="html">
    
      主要介绍zabbix中的历史数据(history)与趋势数据(trends)的区别，以及配置建议。
    
    </summary>
    
      <category term="运维监控体系" scheme="http://yoursite.com/categories/%E8%BF%90%E7%BB%B4%E7%9B%91%E6%8E%A7%E4%BD%93%E7%B3%BB/"/>
    
      <category term="zabbix" scheme="http://yoursite.com/categories/%E8%BF%90%E7%BB%B4%E7%9B%91%E6%8E%A7%E4%BD%93%E7%B3%BB/zabbix/"/>
    
    
      <category term="zabbix" scheme="http://yoursite.com/tags/zabbix/"/>
    
  </entry>
  
  <entry>
    <title>autohotkeye常用操作</title>
    <link href="http://yoursite.com/2018/02/06/autohotkeye%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2018/02/06/autohotkeye常用操作/</id>
    <published>2018-02-06T01:21:58.000Z</published>
    <updated>2018-02-06T01:21:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong><code>AutoHotkey</code></strong>是一个windows下的开源、免费、自动化软件工具。它由最初旨在提供键盘快捷键的脚本语言驱动(称为：热键)，随着时间的推移演变成一个完整的脚本语言。但你不需要把它想得太深，你只需要知道它可以简化你的重复性工作，一键自动化启动或运行程序等等；以此提高我们的工作效率，改善生活品质；通过按键映射，鼠标模拟，定义宏等。</p><p>本文内容主要分为三部分，主要包括：</p><ul><li><strong>安装</strong></li><li><strong>配置</strong></li><li><strong>实际运用</strong></li><li><strong>个人感受</strong></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><h3 id="官方"><a href="#官方" class="headerlink" title="官方"></a>官方</h3><p><a href="https://autohotkey.com/docs/AutoHotkey.htm" target="_blank" rel="noopener">https://autohotkey.com/docs/AutoHotkey.htm</a></p><h3 id="民间"><a href="#民间" class="headerlink" title="民间"></a>民间</h3><p><a href="https://jeffjade.com/2016/03/11/2016-03-11-autohotkey/" target="_blank" rel="noopener">https://jeffjade.com/2016/03/11/2016-03-11-autohotkey/</a><br><a href="https://ahkcn.github.io/docs/AutoHotkey.htm" target="_blank" rel="noopener">https://ahkcn.github.io/docs/AutoHotkey.htm</a></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p><a href="https://autohotkey.com/" target="_blank" rel="noopener">autohotkey下载地址</a></p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="个人常用设置"><a href="#个人常用设置" class="headerlink" title="个人常用设置"></a>个人常用设置</h2><h3 id="运行软件设置"><a href="#运行软件设置" class="headerlink" title="运行软件设置"></a>运行软件设置</h3><h3 id="资源管理设置"><a href="#资源管理设置" class="headerlink" title="资源管理设置"></a>资源管理设置</h3><h3 id="其他设置"><a href="#其他设置" class="headerlink" title="其他设置"></a>其他设置</h3>]]></content>
    
    <summary type="html">
    
      autohotkey是在windows平台下的一个快捷热键管理工具，能够有效的帮助我们提升工作学习效率
    
    </summary>
    
      <category term="常用软件工具" scheme="http://yoursite.com/categories/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="autohotkey" scheme="http://yoursite.com/tags/autohotkey/"/>
    
  </entry>
  
  <entry>
    <title>七牛云-qshell工具常用命令</title>
    <link href="http://yoursite.com/2018/02/05/%E4%B8%83%E7%89%9B%E4%BA%91-qshell%E5%B7%A5%E5%85%B7%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/02/05/七牛云-qshell工具常用命令/</id>
    <published>2018-02-05T10:05:15.000Z</published>
    <updated>2018-02-05T10:05:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言-简介"><a href="#前言-简介" class="headerlink" title="前言/简介"></a>前言/简介</h1><p>qshell是利用七牛文档上公开的API实现的一个方便开发者测试和使用七牛API服务的命令行工具。</p><p>该工具设计和开发的主要目的就是帮助开发者快速解决问题。</p><p>目前该工具融合了七牛存储，CDN，以及其他的一些七牛服务中经常使用到的方法对应的便捷命令，<br>比如b64decode，就是用来解码七牛的URL安全的Base64编码用的，<br>所以这是一个面向开发者的工具。</p><h1 id="官方资料"><a href="#官方资料" class="headerlink" title="官方资料"></a>官方资料</h1><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="https://developer.qiniu.com/kodo/tools/1302/qshell" target="_blank" rel="noopener">https://developer.qiniu.com/kodo/tools/1302/qshell</a></p><h2 id="视频教程"><a href="#视频教程" class="headerlink" title="视频教程"></a>视频教程</h2><p><a href="http://notdelete.echohu.top/spjc/qshell-win.mp4" target="_blank" rel="noopener">http://notdelete.echohu.top/spjc/qshell-win.mp4</a></p><h2 id="安装-环境准备"><a href="#安装-环境准备" class="headerlink" title="安装/环境准备"></a>安装/环境准备</h2><p>目前在windows上使用qshell<br>需要执行以下几个步骤添加命令到系统</p><ul><li><strong>下载qshell，存储到指定文件夹，例如我这里是：<code>E:\software\qshell</code></strong></li><li><strong>重命名，将<code>qshell_windows_x64.exe</code>重命名为<code>qshell.exe</code></strong></li><li><strong>添加系统环境变量，将<code>E:\software\qshell</code>追加到环境变量中</strong></li></ul><h2 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h2><pre><code>参数        描述-d        设置是否输出DEBUG日志，如果指定这个选项，则输出DEBUG级别的日志-m        切换到多用户模式，这样所有的临时文件写入都在命令运行的目录下-h        打印命令列表帮助信息，遇到参数忘记的情况下，可以使用该命令-v        打印工具版本，反馈问题的时候，请提前告知工具对应版本号</code></pre><h2 id="命令列表"><a href="#命令列表" class="headerlink" title="命令列表"></a>命令列表</h2><p><img src="http://picture.watchmen.xin/qshell/qshell-1.png" alt="第一张图片">    </p><p><img src="http://picture.watchmen.xin/qshell/qshell-2.png" alt="第二张图片"></p><p><img src="http://picture.watchmen.xin/qshell/qshell-3.png" alt="第三张图片"></p><p><img src="http://picture.watchmen.xin/qshell/qshell-4.png" alt="第四张图片"></p><h1 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h1><p>我们使用qupload来进行文件的管理</p><p><a href="https://github.com/qiniu/qshell/blob/master/docs/qupload.md" target="_blank" rel="noopener">官方文档</a></p><p><strong>命令参数展示</strong></p><p>命令语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qshell qupload [&lt;ThreadCount&gt;] &lt;LocalUploadConfig&gt;</span><br></pre></td></tr></table></figure><p>命令参数：</p><p><img src="http://picture.watchmen.xin/qshell/qshell-10.png" alt="第一张"></p><p><strong>配置参数展示</strong><br>qupload 功能需要配置文件的支持，配置文件支持的全部参数如下：</p><pre><code>{   &quot;src_dir&quot;            :   &quot;&lt;LocalPath&gt;&quot;,   &quot;bucket&quot;             :   &quot;&lt;Bucket&gt;&quot;,   &quot;file_list&quot;          :   &quot;&lt;FileList&gt;&quot;,   &quot;key_prefix&quot;         :   &quot;&lt;Key Prefix&gt;&quot;,   &quot;up_host&quot;            :   &quot;&lt;Upload Host&gt;&quot;,   &quot;ignore_dir&quot;         :   false,   &quot;overwrite&quot;          :   false,   &quot;check_exists&quot;       :   false,   &quot;check_hash&quot;         :   false,   &quot;check_size&quot;         :   false,   &quot;rescan_local&quot;       :   true,   &quot;skip_file_prefixes&quot; :   &quot;test,demo,&quot;,   &quot;skip_path_prefixes&quot; :   &quot;hello/,temp/&quot;,   &quot;skip_fixed_strings&quot; :   &quot;.svn,.git&quot;,   &quot;skip_suffixes&quot;      :   &quot;.DS_Store,.exe&quot;,   &quot;log_file&quot;           :   &quot;upload.log&quot;,   &quot;log_level&quot;          :   &quot;info&quot;,   &quot;log_rotate&quot;         :   1,   &quot;log_stdout&quot;         :   false,   &quot;file_type&quot;          :   0}</code></pre><p>参数具体含义如下：</p><p><img src="http://picture.watchmen.xin/qshell/qshell-11.png" alt="第一张"></p><p><img src="http://picture.watchmen.xin/qshell/qshell-12.png" alt="第二张"></p><h2 id="密钥设置"><a href="#密钥设置" class="headerlink" title="密钥设置"></a>密钥设置</h2><p><strong>单用户</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qshell account ak sk</span><br></pre></td></tr></table></figure><p><strong>多用户</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qshell -m account ak sk</span><br></pre></td></tr></table></figure><p>这里的ak、sk在个人面板中的密钥管理中查看，点击显示，然后进行复制粘贴</p><p>如下图所示：</p><p><img src="http://picture.watchmen.xin/qshell/qshell-5.png" alt="第一张"></p><p><img src="http://picture.watchmen.xin/qshell/qshell-6.png" alt="第二张"></p><h2 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h2><p>这里我们选择qupload方式来进行图片的上传，在windows本地创建一个文件夹用户放置图片数据，每次同步该文件夹即可，不用再单独每张上传</p><h3 id="步骤1：创建本地图片文件夹"><a href="#步骤1：创建本地图片文件夹" class="headerlink" title="步骤1：创建本地图片文件夹"></a>步骤1：创建本地图片文件夹</h3><p>如下图所示，在指定位置下创建一个文件夹用于存放图片，在这里，我把它和我的博客文件夹放在同级</p><p><img src="http://picture.watchmen.xin/qshell/qshell-7.png" alt="创建本地目录"></p><h3 id="步骤2：创建配置文件"><a href="#步骤2：创建配置文件" class="headerlink" title="步骤2：创建配置文件"></a>步骤2：创建配置文件</h3><p>如下图所示，在指定目录下创建配置文件，注意，这里需要使用编辑打开，不要用notpad++这些编辑器</p><p><img src="http://picture.watchmen.xin/qshell/qshell-8.png" alt="配置文件"></p><h3 id="步骤3：执行命令进行上传"><a href="#步骤3：执行命令进行上传" class="headerlink" title="步骤3：执行命令进行上传"></a>步骤3：执行命令进行上传</h3><p>准备工作都做好后，执行如下命令直接上传：</p><pre><code>qshell qupload 1 c:\Users\56810\blog\config.txt</code></pre><p>如下图所示</p><p><img src="http://picture.watchmen.xin/qshell/qshell-9.png" alt="上传"></p><h2 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h2><h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><h3 id="刷新缓存"><a href="#刷新缓存" class="headerlink" title="刷新缓存"></a>刷新缓存</h3><p><a href="https://developer.qiniu.com/fusion/kb/1325/refresh-the-cache-and-the-effect-of-time" target="_blank" rel="noopener">官方资料</a></p><p>使用七牛云提供的 qshell 命令行工具，参考使用文档，先设置密钥，然后执行 cdnrefresh 命令来刷新缓存。</p><p>具体操作为：</p><p><strong>步骤1：修改配置文件</strong></p><p><strong>步骤2：执行命令</strong></p>]]></content>
    
    <summary type="html">
    
      记录qshell的常用命令，方便快速检索。
    
    </summary>
    
      <category term="常用软件工具" scheme="http://yoursite.com/categories/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
    
      <category term="七牛云" scheme="http://yoursite.com/categories/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/%E4%B8%83%E7%89%9B%E4%BA%91/"/>
    
    
      <category term="qshell" scheme="http://yoursite.com/tags/qshell/"/>
    
      <category term="七牛云" scheme="http://yoursite.com/tags/%E4%B8%83%E7%89%9B%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>RSS介绍及使用</title>
    <link href="http://yoursite.com/2018/02/04/RSS%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/02/04/RSS介绍及使用/</id>
    <published>2018-02-04T04:31:13.000Z</published>
    <updated>2018-02-04T11:20:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote><p><a href="http://www.ruanyifeng.com/blog/2006/01/rss.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2006/01/rss.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      本文主要介绍下RSS。就目前上网环境来说，使用RSS还是能一定程度上提高我们的工作和学习效率。不知道后续会不会出现取代它的技术。
    
    </summary>
    
      <category term="IT基础知识" scheme="http://yoursite.com/categories/IT%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="RSS" scheme="http://yoursite.com/categories/IT%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/RSS/"/>
    
    
      <category term="RSS" scheme="http://yoursite.com/tags/RSS/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法</title>
    <link href="http://yoursite.com/2018/01/25/Markdown%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2018/01/25/Markdown语法/</id>
    <published>2018-01-25T14:08:24.000Z</published>
    <updated>2018-02-04T08:31:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown介绍"><a href="#Markdown介绍" class="headerlink" title="Markdown介绍"></a>Markdown介绍</h1><p>Markdown 是一种轻量级标记语言，它以纯文本形式(易读、易写、易更改)编写文档，常用的标记符号也不超过十个，并最终以HTML格式发布,让写作者专注于写作而不用关注样式。</p><p><strong>划重点：</strong></p><ul><li>轻量级</li><li>标记语言</li><li>纯文本，所以兼容性极强，可以用所有文本编辑器打开。</li><li>让你专注于文字而不是排版。</li><li>格式式转换方便，Markdown 的文本你可以轻松转换为 html、电子书等。</li><li>Markdown 的标记语法有极好的可读性，常用的标记符号不过十来个</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>看完我这篇文章，再看完我下面推荐的这些内容，然后对比归纳总结，认真实践后，可以说在平常工作学习中完全够用。</p><p><strong>官方资料</strong></p><ul><li><a href="http://wowubuntu.com/markdown/" target="_blank" rel="noopener">Markdown 语法说明 (简体中文版)</a></li><li><a href="https://coding.net/help/doc/project/markdown.html" target="_blank" rel="noopener">Markdown 语法介绍</a></li><li><a href="http://www.markdown.cn/" target="_blank" rel="noopener">易读易写!-MarkDown语法说明</a></li></ul><p><strong>个人文章</strong></p><ul><li><a href="https://www.jianshu.com/p/q81RER" target="_blank" rel="noopener">献给写作者的 Markdown 新手指南</a></li><li><a href="https://www.jianshu.com/p/1e402922ee32" target="_blank" rel="noopener">Markdown——入门指南</a></li><li><a href="https://github.com/younghz/Markdown" target="_blank" rel="noopener">Markdown 基本语法</a></li></ul><p><strong>编辑器</strong></p><p>个人在用的编辑器是MarkdownPad 2。各个工具之间相差不会很大，熟练掌握快捷键是提高效率的好方法</p><h2 id="核心理念"><a href="#核心理念" class="headerlink" title="核心理念"></a>核心理念</h2><p>Markdown 的目标是实现「易读易写」，成为一种适用于网络的书写语言。。不管从任何角度来说，可读性，都是最重要的。<br>Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像<em>强调</em>。</p><p><strong>划重点：</strong></p><ul><li>语法是非常简单的符号</li><li>即写即读</li></ul><h2 id="兼容HTML"><a href="#兼容HTML" class="headerlink" title="兼容HTML"></a>兼容HTML</h2><p>Markdown 的构想不是要使得 HTML文档更容易书写。HTML 已经很容易写了。<br>Markdown 的理念是，能让文档更容易读、写和随意改。</p><p>HTML是一种发布的格式，而Markdown 是一种书写的格式。<br>也因此，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。</p><hr><hr><h1 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h1><h2 id="标题（MarkdownPad中快捷键为Ctrl-1-2-3-4）："><a href="#标题（MarkdownPad中快捷键为Ctrl-1-2-3-4）：" class="headerlink" title="标题（MarkdownPad中快捷键为Ctrl+1/2/3/4）："></a>标题（MarkdownPad中快捷键为Ctrl+1/2/3/4）：</h2><p>Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。<br>类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题），例如：</p><pre><code>This is an H1=============This is an H2-------------</code></pre><p>任何数量的 = 和 - 都可以有效果。但是这种形式只支持2层标题。</p><p>类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，例如：</p><pre><code># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题</code></pre><h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><p>在Markdown中，可以使用 <em> 和  _  来表示斜体和加粗。<em>*<code>单个为斜体，2个为加粗</code></em></em></p><h3 id="加粗（MarkdownPad中快捷键为Ctrl-b）："><a href="#加粗（MarkdownPad中快捷键为Ctrl-b）：" class="headerlink" title="加粗（MarkdownPad中快捷键为Ctrl+b）："></a>加粗（MarkdownPad中快捷键为Ctrl+b）：</h3><p>加粗部分使用方式如下：</p><pre><code>**Coding，让开发更简单**__Coding，让开发更简单__</code></pre><p>实际展示效果如下：</p><p><strong>Coding，让开发更简单</strong></p><p><strong>Coding，让开发更简单</strong></p><h3 id="斜体（MarkdownPad中快捷键为Ctrl-l）："><a href="#斜体（MarkdownPad中快捷键为Ctrl-l）：" class="headerlink" title="斜体（MarkdownPad中快捷键为Ctrl+l）："></a>斜体（MarkdownPad中快捷键为Ctrl+l）：</h3><p>斜体部分的使用如下：</p><pre><code>*Coding，让开发更简单*_Coding，让开发更简单_</code></pre><p>实际展示效果展示如下：</p><p><em>Coding，让开发更简单</em></p><p><em>Coding，让开发更简单</em></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表（MarkdownPad中快捷键为Ctrl-u）："><a href="#无序列表（MarkdownPad中快捷键为Ctrl-u）：" class="headerlink" title="无序列表（MarkdownPad中快捷键为Ctrl+u）："></a>无序列表（MarkdownPad中快捷键为Ctrl+u）：</h3><pre><code>* list1     前面使用*号- list2        前面使用-号+ list3        前面使用+号</code></pre><p>效果如下：</p><ul><li>list1</li></ul><ul><li>list2</li></ul><ul><li>list3</li></ul><h3 id="有序列表-MarkdownPad中快捷键为Ctrl-shift-o）："><a href="#有序列表-MarkdownPad中快捷键为Ctrl-shift-o）：" class="headerlink" title="有序列表(MarkdownPad中快捷键为Ctrl+shift+o）："></a>有序列表(MarkdownPad中快捷键为Ctrl+shift+o）：</h3><pre><code>1. list1    使用数字+英文的点号，空格后接数据2. list2</code></pre><p>效果如下：</p><ol><li>list1</li><li>list2</li></ol><h2 id="区块引用（MarkdownPad中快捷键为Ctrl-q）"><a href="#区块引用（MarkdownPad中快捷键为Ctrl-q）" class="headerlink" title="区块引用（MarkdownPad中快捷键为Ctrl+q）"></a>区块引用（MarkdownPad中快捷键为Ctrl+q）</h2><pre><code>&gt; 数据1    使用&gt;号&gt; 数据2&gt; &gt; 二级引用  注意区块引用可以包含多级引用&gt; </code></pre><p>实际效果展示：</p><blockquote><p>数据1</p><p>数据2</p><blockquote><p>这是二级引用</p><blockquote><p>三级引用</p></blockquote></blockquote></blockquote><h2 id="代码区块（MarkdownPad中快捷键为Ctrl-k）："><a href="#代码区块（MarkdownPad中快捷键为Ctrl-k）：" class="headerlink" title="代码区块（MarkdownPad中快捷键为Ctrl+k）："></a>代码区块（MarkdownPad中快捷键为Ctrl+k）：</h2><p>代码区块包括3种，文字内和单独一行以及指定代码格式的区块行</p><h3 id="文字内加区块，不会加空白处底纹"><a href="#文字内加区块，不会加空白处底纹" class="headerlink" title="文字内加区块，不会加空白处底纹"></a>文字内加区块，不会加空白处底纹</h3><pre><code>使用``（数字1左边，ESC下面的按键）</code></pre><p>实际效果展示：在文件中含有<code>代码区块</code>是什么样子</p><h3 id="整行的代码区块行，会加空白处底纹（快捷操作：全部选中然后敲Tab）"><a href="#整行的代码区块行，会加空白处底纹（快捷操作：全部选中然后敲Tab）" class="headerlink" title="整行的代码区块行，会加空白处底纹（快捷操作：全部选中然后敲Tab）"></a>整行的代码区块行，会加空白处底纹（快捷操作：全部选中然后敲Tab）</h3><p>缩进4个空格或者一个制表符（tab键）或者将代码块包裹在代码块包裹在 “/` 之间（避免无休止的缩进）。</p><p><img src="https://wx.qq.com/cgi-bin/mmwebwx-bin/webwxgetmsgimg?&amp;MsgID=8846728644224548056&amp;skey=%40crypt_3aad545e_f8f9d80a432ec322c448ea6290a51471" alt="示例"></p><p>实际效果展示</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'redcarpet'</span></span><br><span class="line">markdown = Redcarpet.new(<span class="string">"Hello World!"</span>)</span><br><span class="line">puts markdown.to_html</span><br></pre></td></tr></table></figure><p>实际效果展示：</p><pre><code>现在的效果就是整整一个的区块行，如果这段代码比较长的话，那么markdown就会在下面生成一个查看条，供用户左右拉取调整，就是如现在所示。</code></pre><h3 id="指定代码格式的区块行"><a href="#指定代码格式的区块行" class="headerlink" title="指定代码格式的区块行"></a>指定代码格式的区块行</h3><p><img src="https://wx.qq.com/cgi-bin/mmwebwx-bin/webwxgetmsgimg?&amp;MsgID=4157379658549535621&amp;skey=%40crypt_3aad545e_61507897f53a933b8d7f63ab6e57571f" alt="示例"></p><p>实际效果展示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ line1-test1</span><br><span class="line">$ line2-test2</span><br></pre></td></tr></table></figure><h2 id="分割线-分隔线（MarkdownPad中快捷键为Ctrl-r）："><a href="#分割线-分隔线（MarkdownPad中快捷键为Ctrl-r）：" class="headerlink" title="分割线/分隔线（MarkdownPad中快捷键为Ctrl+r）："></a>分割线/分隔线（MarkdownPad中快捷键为Ctrl+r）：</h2><p>一行中用三个以上的星号、减号、底线来建立一个分隔线，可以在字符之间加入空格，也可以不加空格</p><pre><code>* * * ********---- - - </code></pre><p>实际效果展示如下：</p><hr><h2 id="网页链接"><a href="#网页链接" class="headerlink" title="网页链接"></a>网页链接</h2><p>网页链接有2种方式，一种是直接显示链接，一种是通过文字进行跳转</p><h3 id="直接显示"><a href="#直接显示" class="headerlink" title="直接显示"></a>直接显示</h3><pre><code>&lt;https://www.baidu.com&gt;    用&lt;&gt;尖括号将内容包起来，markdown就会自动把它转成链接。网页链接、邮箱链接等都采用这种方式</code></pre><p>实际效果展示如下：<br>这段话中将要插入百度<a href="https://www.baidu.com" target="_blank" rel="noopener">https://www.baidu.com</a>的链接</p><h3 id="文字跳转"><a href="#文字跳转" class="headerlink" title="文字跳转"></a>文字跳转</h3><pre><code>More info: [Server](https://hexo.io/docs/server.html)    前面是解释性说明，[]内是可以跳转的文字，()内是真正访问的地址。</code></pre><p>实际效果展示如下：</p><p>请点击<a href="https://www.baidu.com" target="_blank" rel="noopener">百度</a>调整到百度页面</p><h2 id="图片链接"><a href="#图片链接" class="headerlink" title="图片链接"></a>图片链接</h2><p>图片链接分为2部分，一种是在文字中，通过文字来链接到图片位置，用户需要点击这个文字链接去查看图片，优点是使文字更简约，缺点是无法直观的看到图。<br>因此，第二种方式是直接在文章中显示图片。</p><p>我们把这两种方式分别称之为：行内式和参考式</p><h3 id="行内式"><a href="#行内式" class="headerlink" title="行内式"></a>行内式</h3><p>行内式的图片语法看起来像是：</p><pre><code>![Alt text](/path/to/img.jpg)参考案例：![Alt text](/path/to/img.jpg &quot;Optional title&quot;)</code></pre><p>详细叙述如下：</p><blockquote><p>一个惊叹号 !</p><p>接着一个方括号，里面放上图片的替代文字</p><p>接着一个普通括号，里面放上图片的网址，</p><p>最后还可以用引号包住并加上 选择性的 ‘title’ 文字。</p></blockquote><h3 id="参考式"><a href="#参考式" class="headerlink" title="参考式"></a>参考式</h3><p>参考式的图片语法则长得像这样：</p><pre><code>![Alt text][id]「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：参考案例：[id]: url/to/image  &quot;Optional title attribute&quot;</code></pre><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><pre><code>普通表格：First Header | Second Header | Third Header------------ | ------------- | ------------Content Cell | Content Cell  | Content CellContent Cell | Content Cell  | Content Cell设置表格两边内容对齐，中间内容居中，例如：First Header | Second Header | Third Header:----------- | :-----------: | -----------:Left         | Center        | RightLeft         | Center        | Right</code></pre><p>实际效果展示：</p><table><thead><tr><th style="text-align:left">First Header</th><th style="text-align:center">Second Header</th><th style="text-align:right">Third Header</th></tr></thead><tbody><tr><td style="text-align:left">Left</td><td style="text-align:center">Center</td><td style="text-align:right">Right</td></tr><tr><td style="text-align:left">Left</td><td style="text-align:center">Center</td><td style="text-align:right">Right</td></tr></tbody></table><h2 id="文本居中"><a href="#文本居中" class="headerlink" title="文本居中"></a>文本居中</h2><p>居中使用html方式添加，格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;center&gt;这一行需要居中&lt;/center&gt;</span><br></pre></td></tr></table></figure><h2 id="文本居中的引用"><a href="#文本居中的引用" class="headerlink" title="文本居中的引用"></a>文本居中的引用</h2><p>先看下实际效果：</p><p><img src="https://wx.qq.com/cgi-bin/mmwebwx-bin/webwxgetmsgimg?&amp;MsgID=7516049821783003139&amp;skey=%40crypt_3aad545e_8e930e2d952c602f918163c6d82c2d5d" alt="效果"></p><p>主要用于主页等显示，和上面的文本场景有点不一样。</p><p>具体实现：</p><pre><code>&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;blah blah blah&lt;/blockquote&gt;&lt;!-- 标签 方式，要求NexT版本在0.4.5或以上 --&gt;{% centerquote %} content {% endcenterquote %}&lt;!-- 标签别名 --&gt;{% cq %} content {% endcq %}</code></pre><h2 id="添加空行"><a href="#添加空行" class="headerlink" title="添加空行"></a>添加空行</h2><pre><code>&lt;br /&gt;    使用该方法进行插入</code></pre><h2 id="反斜杠转义"><a href="#反斜杠转义" class="headerlink" title="反斜杠转义"></a>反斜杠转义</h2><pre><code>\*literal asterisks\*    使用这种方式来输出*号</code></pre><p>实际效果展示：</p><p>*literal asterisks*</p>]]></content>
    
    <summary type="html">
    
      markdown介绍及常用基本操作
    
    </summary>
    
      <category term="常用软件工具" scheme="http://yoursite.com/categories/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Markdown" scheme="http://yoursite.com/categories/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/Markdown/"/>
    
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>TotalCommander常用快捷键</title>
    <link href="http://yoursite.com/2018/01/25/TotalCommander%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://yoursite.com/2018/01/25/TotalCommander常用快捷键/</id>
    <published>2018-01-25T14:01:57.000Z</published>
    <updated>2018-02-09T10:04:51.606Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>可以先看下相关资料，这些资料对概念介绍等做的非常详细也写的非常好，因此这里不再赘述，本文主要是针对实际的运用。</p><p><strong>官方资料</strong></p><p><a href="https://www.ghisler.com/" target="_blank" rel="noopener">https://www.ghisler.com/</a><br>官网上没有相对应的文档，需要额外去搜寻</p><p><strong>优秀个人文章</strong></p><p><a href="https://xbeta.info/studytc/" target="_blank" rel="noopener">TC学堂——最易读的Total Commander教程</a>-<strong>强烈推荐通过该网站进行学习</strong></p><p><a href="http://www.jiaocheng8.com/ruanjian/totalcommander/376.html" target="_blank" rel="noopener">Total Commander快捷键</a></p><h2 id="TC是什么"><a href="#TC是什么" class="headerlink" title="TC是什么"></a>TC是什么</h2><p>这里引用张学思汉化版的介绍：</p><blockquote><p>功能强大的全能文件管理器（简称TC）。支持随意自定义的菜单、工具栏、快捷键，给您最大的自由，打造个性 TC。一般的文件操作，如搜索、复制、移动、改名、删除等功能应有尽有，更有文件内容比较、同步文件夹、批量重命名文件、分割合并文件、创建/检查文件校验 (MD5/SFV) 等实用功能。内置 ZIP/TAR/GZ/TGZ 格式的压缩/解压功能，ZIP 格式还支持创建加密及自解包功能。此外，不仅可以直接打开(解开) ARJ/CAB/RAR/LZH/ACE/UC2 等压缩包，配合插件或相应的压缩程序，更可创建这些格式的压缩包，就像创建和打开文件夹一样简单。而搜索功能，无论是文件还是内容，同样支持在这些压缩包中进行。</p><p> 除了支持详细资料、列表、缩略图等资源管理器也有的显示方式外，利用内容插件，支持各式各样的自<br>定义列视图，显示不同文件的内部信息，满足您查看不同文件的需求。多标签界面，让本来的两个窗口，可以扩展到几十个，操作空间更显自由。而贴心的历史和常用文件夹按钮，可以导出/导入的标签和文件列表，让您穿越各个空间更加快捷高效。</p><p>通过工具栏和菜单，可以随意调用外部程序和内部命令。多种功能或强大或实用的插件，让 TC 如虎添翼、能原来所不能。批量重命名和文件搜索，利用插件和正则表达式，功能更多更强了。还有可以选择的美化界面，支持 FXP 和 HTTP 代理的 FTP 功能，等等等等……有了它，资源管理器、WinZip 及大多数文件管理和工具栏软件，都可以下岗了！</p></blockquote><p>如上面的描述所述，TC是一个非常好的资源管理器。光说没概念，实际亲自实践比什么都强。 let’s go！</p><h2 id="操作概述-定位与选择概述"><a href="#操作概述-定位与选择概述" class="headerlink" title="操作概述-定位与选择概述"></a>操作概述-定位与选择概述</h2><p>Total Commander是文件管理器，并且是操作最高效的文件管理器。</p><p>既然是文件管理器，顾名思义，就是对文件进行管理和各种操作的。</p><p>这里的文件，要广义理解，可能是：<strong>一个或多个文件、一个或多个文件夹、甚至是一条或多条TC插件展示的内容项。</strong><br>高效是Total Commander之宗旨。如何实现高效？TC给出的答案是：<strong>将文件管理拆分为三步：定位→选择→操作。</strong>然后，每一步都提供N种高效方式，用户于是有了极多的组合选择，可以视情况找出最高效的做法。其实，这种独立分解，每一单元做到极致，并且使之环环相扣的做法，也是UNIX/Linux的思路。或许，有人认为文件管理本来就简单，这样是小题大做。这种想法也没错。只是这样想的，正是Windows的思路，完全可以用资源管理器，就没必要选择Total Commander了。</p><p>其实，过程拆解并不是TC的创造，任何文件管理器都是这样。比如，你要在资源管理器中对文件改名，是否按如下步骤呢？找到所在目录→选中文件→按F2或右键改名。TC只是将每个步骤给出了更多、更快捷的操作方式。</p><p>在文件管理的三个步骤中，大家容易认识到TC在“操作”方面的强大，想到TC有各种快捷键，比如改名、打开、速览、压缩、比较……等。但实际上，作为文件操作的前提，TC的文件定位和选择也是极其灵活的。</p><hr><h1 id="定位显示命令"><a href="#定位显示命令" class="headerlink" title="定位显示命令"></a>定位显示命令</h1><h2 id="常用目录"><a href="#常用目录" class="headerlink" title="常用目录"></a>常用目录</h2><p>这部分设置可以说是TC操作的精华，效率直接甩开windows资源管理器几条街。</p><h3 id="具体实现："><a href="#具体实现：" class="headerlink" title="具体实现："></a>具体实现：</h3><p><strong>步骤1：快速添加</strong></p><p>ctrl+d，添加，然后a直接添加，如下图所示</p><h3 id="常用目录高级配置"><a href="#常用目录高级配置" class="headerlink" title="常用目录高级配置"></a>常用目录高级配置</h3><p>通过自定义配置，可以自定义调整常用目录的名称、顺序等，后续的增删改查也在此页面进行。</p><p><strong>步骤1：进入配置页面</strong><br>ctrl+d，添加，进去之后按c进入常用目录配置对话框。<br>在里面配置的时候，需要再最前面人为添加&amp;。例如&amp;1 xxx</p><p><strong>步骤2：进行具体配置</strong></p><h2 id="直达组合键"><a href="#直达组合键" class="headerlink" title="直达组合键"></a>直达组合键</h2><p>直达组合键：alt+s 进行配置。一般都是类似ctrl+alt+F1这种形式</p><h2 id="其他定位命令"><a href="#其他定位命令" class="headerlink" title="其他定位命令"></a>其他定位命令</h2><pre><code>ctrl +e        进入资源管理器alt + f1     选择第一个窗口的磁盘  +f2就是选择第二个窗口的磁盘alt+下箭头    历史记录ctrl+\        返回到当前目录的根目录</code></pre><hr><h1 id="选择命令"><a href="#选择命令" class="headerlink" title="选择命令"></a>选择命令</h1><h2 id="选择文件"><a href="#选择文件" class="headerlink" title="选择文件"></a>选择文件</h2><h3 id="选择单个文件"><a href="#选择单个文件" class="headerlink" title="选择单个文件"></a>选择单个文件</h3><p>通过右键来实现批量选择文件</p><h3 id="批量选择多个文件"><a href="#批量选择多个文件" class="headerlink" title="批量选择多个文件"></a>批量选择多个文件</h3><p>批量选择有以下几种方法：</p><p><strong>部分选择-连续</strong></p><ul><li>Alt+上箭头 or Alt+下箭头</li></ul><p><strong>部分选择-不连续</strong></p><ul><li>空格选择指定文件</li></ul><p><strong>全选</strong></p><ul><li>alt+数字键盘+。取反：小键盘的*</li></ul><hr><h1 id="实际操作命令"><a href="#实际操作命令" class="headerlink" title="实际操作命令"></a>实际操作命令</h1><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><p>F3：查看文件内容，默认为txt文本方式打开</p><h2 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h2><h2 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h2><h2 id="一步实现重命名-移动"><a href="#一步实现重命名-移动" class="headerlink" title="一步实现重命名+移动"></a>一步实现重命名+移动</h2><p>F6 </p><h2 id="刷新"><a href="#刷新" class="headerlink" title="刷新"></a>刷新</h2>]]></content>
    
    <summary type="html">
    
      Total Commander是一个会显著提高文件操作效率的工具，而文件操作是应用计算机最基本的功夫，也是伴随一生的操作。因此花一点时间学习，而会受益一世。
    
    </summary>
    
      <category term="常用软件工具" scheme="http://yoursite.com/categories/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
    
      <category term="TotalCommander" scheme="http://yoursite.com/categories/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/TotalCommander/"/>
    
    
      <category term="TC操作" scheme="http://yoursite.com/tags/TC%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/01/23/hello-world/"/>
    <id>http://yoursite.com/2018/01/23/hello-world/</id>
    <published>2018-01-23T14:08:24.000Z</published>
    <updated>2018-02-04T08:31:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is my first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask author on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前使用阿里云结合wordpress的方式搭博客，但是自己维护起来不是太方便，云服务器一旦攻击，数据是个问题。之后在51cto和csdn上写，但是要受到平台的限制。最近发现github有博客功能(几年前就推出了，竟然现在才发现)，完美解决这些问题。github提供空间，用户自行选择博客框架，专注于内容，大部分人应该还是喜欢这种简约风主题。目前这个博客使用github-pages+Hexo来实现。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><strong>搭建</strong></p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/26625249" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/26625249</a></p><p><a href="http://eleveneat.com/2015/04/24/Hexo-a-blog/" target="_blank" rel="noopener">http://eleveneat.com/2015/04/24/Hexo-a-blog/</a></p></blockquote><p><strong>进阶</strong></p><p>主要参考官方资料</p><p>Hexo文档</p><blockquote><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a></p></blockquote><p>Next主题使用手册</p><blockquote><p><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">http://theme-next.iissnan.com/</a></p></blockquote><p><strong>根据官方资料，按图索骥，基本上都能很好的把所有功能实现出来。使用问题可以随时沟通交流</strong></p><p><strong>markdown语法</strong></p><p>关于markdown的使用，可以看我的这篇博文</p><blockquote><p><a href="http://watchmen.xin/2018/01/25/Markdown%E8%AF%AD%E6%B3%95/" target="_blank" rel="noopener">Markdown语法</a></p></blockquote><hr><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is my first post. Check &lt;a href=&quot;https://hexo.io/docs
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
