<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Watchmen1992&#39;s Blog</title>
  
  <subtitle>锦瑟年华当与书香为度，是为不负天地人生。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-23T14:08:24.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>XiaoHua WANG</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LF will be replaced by CRLF报警</title>
    <link href="http://yoursite.com/2018/06/23/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/Git/CRLF%E8%A7%A3%E5%86%B3/"/>
    <id>http://yoursite.com/2018/06/23/常用软件工具/Git/CRLF解决/</id>
    <published>2018-06-23T14:08:24.000Z</published>
    <updated>2018-06-23T14:08:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Windows环境下使用git进行add的时候，会提示： “warning:LF will be replacee by CRLF”</p><p><strong>基本信息：</strong></p><p>CRLF – Carriage-Return Line-Feed 回车换行</p><ul><li><p>回车(CR, 对应 ASCII 13, \r) </p></li><li><p>换行(LF, ASCII 10, \n)。 </p></li></ul><p>这里放上ASCII字符代码表的前半部分，可以直观的看到</p><p><img src="http://picture.watchmen.xin/python-14/ASCII.jpg" alt="ascii"></p><p><strong>注意：</strong></p><p>这两个标识换行的ACSII字符不会在屏幕有任何输出，在Windows中广泛使用\r\n来标识一行的结束。而在Linux/UNIX系统中只使用\n来标识一行的结束。</p><p>这一点经常在windows和linux平台上进行操作的小伙伴基本都知道</p><p>也就是说在windows中的换行符为 CRLF， 而在linux下的换行符为：LF</p><p><strong>原因分析：</strong></p><p>git配置中设置 core.autocrlf=true 后：</p><ul><li>当我们执行git add将文件转入到暂存区时，系统将会把LF转换成CRLF</li></ul><ul><li>当我们执行commit提交时，会把暂存区的内容(也就是我们对工作区做的改动)再重新转化为LF然后放入版本库(repository)</li></ul><ul><li><p>转化暂存区的内容时，如果发现里面存在 LF 换行符，LF 会被转化成 CRLF，并给出提到的那条警告：”LF will be replaced by CRLF”</p></li><li><p>这里有一个重要的知识点：git创建的项目，最终项目文件中的换行符是为LF【因为git最终是运行在Linux平台之上】</p></li></ul><p>其实这句警告的下面其实还有一句很重要的话:</p><pre><code>warning: LF will be replaced by CRLF in . The file will have its original line endings in your working directory. </code></pre><p>(翻译下就是:“在工作区里,这个文件会保持它原本的换行符，也就是LF和CRLF混合存在。”) </p><p><strong>深入延伸扩展</strong></p><blockquote><p>简单来说，在windows平台，我们工作区的文件都应该用 CRLF 来换行。如果改动文件时引入了 LF,或者设置 core.autocrlf 之前,工作区已经有 LF 换行符。那么提交改动时,git 会警告你哪些文件不是纯 CRLF 文件,但 git 不会擅自修改工作区的那些文件,而是对暂存区(我们对工作区的改动)进行修改。</p><p>也因此,当我们进行 git add 的操作时,只要 git 发现改动的内容里有 LF 换行符,就还会出现这个警告。</p><p>设置 core.autocrlf=true, 只要保持工作区都是纯 CRLF 文件,编辑器用 CRLF 换行,就不会出现警告。</p><p>git 默认让版本库里用 LF 换行,只要保持这条规则,多人协作就不会出什么大问题。</p><p>git 的 Windows 客户端基本都会默认设置 core.autocrlf=trueLinux 最好不要重新设置,因为这个配置算是为 Windows 平台定制。</p><p>如果 Windows 上设置 core.autocrlf=false,仓库里也没有配置 .gitattributes,很容易引入 CRLF 或者混合换行符(Mixed Line Endings,一个文件里既有 LF 又有CRLF)到版本库,这样就可能产生各种奇怪的问题。</p><p>如果有换行符不匹配本地平台的情况,建议你用 dos2unix 之类的工具转换下换行符,因为很多配置文件是严格要求文件编码和换行符的,谨慎一点比较好。 </p></blockquote><p><strong>问题解决：</strong></p><p>因为如果 Windows 上设置 core.autocrlf=false,仓库里也没有配置 .gitattributes,很容易引入 CRLF 或者混合换行符(Mixed Line Endings,一个文件里既有 LF 又有CRLF)到版本库,这样就可能产生各种奇怪的问题。</p><p>所以，解决最好保持工作区都是纯 CRLF 文件,编辑器用 CRLF 换行,就不会出现警告。</p><p>如果设置<code>core.autocrlf = false</code>，那么很可能会出现CRLF和LF混合的情况，这样会导致一些问题，例如<code>git diff</code> 失去功能，会发现很多行代码并没有修改，然而被认为是修改过了。</p><p>首先<code>core.autocrlf = true</code>在windows上才是正确的选择，不建议将其修改为false（网上大部分的解决方法都是：rm -rf .git &amp;&amp; git config –global core.autocrlf false &amp;&amp; git init &amp;&amp; git add . &amp;&amp; git remote add <em>*</em>这种，其实不是解决方式不是太友好），如果实在忍受不了，想要避免这些warning，那么执行下面的操作：</p><ol><li>添加.gitattributes</li><li>设置<code>core.safecrlf = true</code></li><li>使用dos2unix、notepad++等工具来将LF转换成CRLF</li></ol><p>所以，建议保持默认效果</p>]]></content>
    
    <summary type="html">
    
      LF will be replaced by CRLF报警问题
    
    </summary>
    
      <category term="常用软件工具" scheme="http://yoursite.com/categories/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Git" scheme="http://yoursite.com/categories/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/Git/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>修改主题超链接样式</title>
    <link href="http://yoursite.com/2018/06/23/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Hexo/%E4%BF%AE%E6%94%B9%E4%B8%BB%E9%A2%98%E8%B6%85%E9%93%BE%E6%8E%A5%E6%A0%B7%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/06/23/个人知识体系/个人博客/Hexo/修改主题超链接样式/</id>
    <published>2018-06-23T10:56:27.000Z</published>
    <updated>2018-06-23T10:56:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为我使用的是Next主题，这里说下Next主题的修改，其他主题的操作也都是一致的</p><p>Next默认对超链接只有下划线样式，在查看文章内容的时候很容易被忽略</p><p>主题样式是在\hexoBlog\themes\next\source\css,这里面保存了Muse,Mist和Pisces等主题的css文件</p><p>例如,字体和边框的颜色还有字体,图片的大小等保存在next\source\css_variables里.</p><p>而我们要修改的body超链接的样式在themes\next\source\css_common\components\post\post.styl里,编辑文件，在文件中添加以下内容:</p><pre><code>.post-body a {  color: #428BCA;  font-weight: bold;}</code></pre><p>添加以后，我们需要执行clean操作生效</p><pre><code>hexo clean hexo g -d</code></pre><p>强制刷新我们的文章内容，就能看到超链接已经变成蓝色粗体的形式</p><p>如下图所示：</p><p><img src="http://picture.watchmen.xin/tmp/next_css.png" alt="css"></p>]]></content>
    
    <summary type="html">
    
      修改主题超链接样式
    
    </summary>
    
      <category term="个人知识体系" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    
      <category term="个人博客" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>fio命令</title>
    <link href="http://yoursite.com/2018/06/19/fio/"/>
    <id>http://yoursite.com/2018/06/19/fio/</id>
    <published>2018-06-19T03:51:18.000Z</published>
    <updated>2018-06-19T03:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><pre><code># yum -y install git libaio libaio-devel zlib-devel gcc# git clone git://github.com/axboe/fio.git# cd fio/# ./configure &amp;&amp; make &amp;&amp; make install </code></pre><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><h2 id="IOPS测试"><a href="#IOPS测试" class="headerlink" title="IOPS测试"></a>IOPS测试</h2><p>fio -direct=1 -iodepth=64 -rw=randrw -ioengine=libaio -bs=4k -size=1G -numjobs=1  -group_reporting -filename=iotest -name=Write_PPS_Testing</p><h2 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h2>]]></content>
    
    <summary type="html">
    
      fio命令
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="Linux基础知识" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="Linux常用命令" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="fio" scheme="http://yoursite.com/tags/fio/"/>
    
  </entry>
  
  <entry>
    <title>nginx入门介绍及安装配置</title>
    <link href="http://yoursite.com/2018/06/14/nginx%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/06/14/nginx安装配置/</id>
    <published>2018-06-14T03:59:24.000Z</published>
    <updated>2018-06-14T03:59:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><ul><li><a href="https://nginx.org/en/" target="_blank" rel="noopener">官网链接</a></li><li><a href="https://nginx.org/en/download.html" target="_blank" rel="noopener">下载页面</a></li></ul><h1 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h1><h2 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h2><p>登录服务器之后，wget下载相应版本的源码包</p><pre><code># wget https://nginx.org/download/nginx-1.14.0.tar.gz</code></pre><p>./configure –prefix=/usr/local/nginx –user=nginx –group=nginx –with-http_ssl_module –with-http_stub_status_module –with-pcre</p>]]></content>
    
    <summary type="html">
    
      nginx入门介绍及安装配置
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="网络服务" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Nginx" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>traceroute命令</title>
    <link href="http://yoursite.com/2018/06/13/traceroute%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/06/13/traceroute命令/</id>
    <published>2018-06-13T03:14:10.000Z</published>
    <updated>2018-06-13T03:14:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>traceroute  -n -T -p 5201 10.11.6.3</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;traceroute  -n -T -p 5201 10.11.6.3&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="tag1" scheme="http://yoursite.com/tags/tag1/"/>
    
  </entry>
  
  <entry>
    <title>iperf命令</title>
    <link href="http://yoursite.com/2018/06/12/iperf%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/06/12/iperf命令/</id>
    <published>2018-06-12T09:19:32.000Z</published>
    <updated>2018-06-12T09:19:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考文献：</p><ul><li><a href="https://github.com/esnet/iperf" target="_blank" rel="noopener">github主页</a></li></ul><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h1 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h1><p>使用iperf时，涉及服务端和客户端的概念</p><p>因为iperf是使用C语言编写的，因此在安装之前服务器上要安装gcc编译器。</p><h2 id="全局参数"><a href="#全局参数" class="headerlink" title="全局参数"></a>全局参数</h2><h2 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre><code># wget http://downloads.es.net/pub/iperf/iperf-3.5.tar.gz# tar -zxvf iperf-3.5.tar.gz# cd iperf-3.5# ./configure; make; make install</code></pre><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><pre><code># iperf3 -s -D</code></pre><p>iperf2版本启动之后，默认的监听端口为：5001</p><p>iperf3版本启动之后，默认的监听端口为：5201</p><p>因为iperf2版本存在很多问题，因此我们现在主要使用iperf3版本进行测试</p><h3 id="补充：服务端启动参数"><a href="#补充：服务端启动参数" class="headerlink" title="补充：服务端启动参数"></a>补充：服务端启动参数</h3><h2 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><pre><code># wget http://downloads.es.net/pub/iperf/iperf-3.5.tar.gz# tar -zxvf iperf-3.5.tar.gz# cd iperf-3.5# ./configure; make; make install</code></pre><p>客户端不需要启动</p><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><p><strong>客户端指定发送一个5GB的数据包，每隔5秒钟输出一次传输状态，输出结果的显示单位为MB显示，并发3个线程发送</strong></p><pre><code># iperf  -c 10.11.6.3 -n 5000000000 -p 5201 -i 5 -f M -P 3 </code></pre>]]></content>
    
    <summary type="html">
    
      Linux常用命令之iperf命令
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="Linux基础知识" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="Linux常用命令" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="iperf" scheme="http://yoursite.com/tags/iperf/"/>
    
  </entry>
  
  <entry>
    <title>4层负载均衡和7层负载均衡的区别</title>
    <link href="http://yoursite.com/2018/06/10/4%E5%B1%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%92%8C7%E5%B1%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2018/06/10/4层负载均衡和7层负载均衡的区别/</id>
    <published>2018-06-10T13:46:04.000Z</published>
    <updated>2018-06-10T13:46:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="四七层负载均衡分别指的是什么？"><a href="#四七层负载均衡分别指的是什么？" class="headerlink" title="四七层负载均衡分别指的是什么？"></a>四七层负载均衡分别指的是什么？</h1><h2 id="四层负载均衡"><a href="#四层负载均衡" class="headerlink" title="四层负载均衡"></a>四层负载均衡</h2><h2 id="七层负载均衡"><a href="#七层负载均衡" class="headerlink" title="七层负载均衡"></a>七层负载均衡</h2><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p>Nginx工作在网络模型的7层，可以针对http应用做一些分流的策略，比如针对域名、目录结构，Nginx单凭这点可利用的场合就远多于LVS了。</p><p>最新版本的Nginx也支持4层TCP负载，曾经这是LVS比Nginx好的地方。</p><p>Nginx对网络稳定性的依赖非常小，理论上能ping通就就能进行负载功能，这个也是它的优势之一，相反LVS对网络稳定性依赖比较大。</p><p>Nginx安装和配置比较简单，测试起来比较方便，它基本能把错误用日志打印出来。LVS的配置、测试就要花比较长的时间了，LVS对网络依赖比较大。<br>那为什么要用lvs呢？</p><p>简单一句话，当并发超过了Nginx上限，就可以使用LVS了。</p><p>日1000-2000W PV或并发请求1万以下都可以考虑用Nginx。</p><p>大型门户网站，电商网站需要用到LVS。</p><h2 id="知识补充：OSI七层模型"><a href="#知识补充：OSI七层模型" class="headerlink" title="知识补充：OSI七层模型"></a>知识补充：OSI七层模型</h2><h1 id="四七层负载均衡配置实践"><a href="#四七层负载均衡配置实践" class="headerlink" title="四七层负载均衡配置实践"></a>四七层负载均衡配置实践</h1>]]></content>
    
    <summary type="html">
    
      4层负载均衡和7层负载均衡的区别
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="高并发" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
      <category term="负载均衡" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E9%AB%98%E5%B9%B6%E5%8F%91/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
      <category term="负载均衡基础知识" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E9%AB%98%E5%B9%B6%E5%8F%91/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="负载均衡" scheme="http://yoursite.com/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
  </entry>
  
  <entry>
    <title>负载均衡技术从入门到实践</title>
    <link href="http://yoursite.com/2018/06/10/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%8A%80%E6%9C%AF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2018/06/10/负载均衡技术从入门到实践/</id>
    <published>2018-06-10T13:23:11.000Z</published>
    <updated>2018-06-10T13:23:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="我们为什么需要负载均衡"><a href="#我们为什么需要负载均衡" class="headerlink" title="我们为什么需要负载均衡"></a>我们为什么需要负载均衡</h2><h2 id="负载均衡的好处"><a href="#负载均衡的好处" class="headerlink" title="负载均衡的好处"></a>负载均衡的好处</h2><p>负载均衡（Load Balance）集群提供了一种廉价、有效、透明的方法，来扩展网络设备和服务器的负载、带宽、增加吞吐量、加强网络数据处理能力、提高网络的灵活性和可用性。</p><p>单台计算机无法承受大规模的并发访问或数据流量，此时需要搭建负载均衡集群把流量分摊到多台节点设备上分别处理，即减少用户等待响应的时间又提升了用户体验；</p><p>7*24小时的服务保证，任意一个或多个有限后端节点设备宕机，不能影响整个业务的运行。</p>]]></content>
    
    <summary type="html">
    
      负载均衡技术从入门到实践
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="高并发" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
      <category term="负载均衡" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E9%AB%98%E5%B9%B6%E5%8F%91/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
      <category term="负载均衡基础知识" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E9%AB%98%E5%B9%B6%E5%8F%91/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="负载均衡" scheme="http://yoursite.com/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
  </entry>
  
  <entry>
    <title>zabbix监控网络设备</title>
    <link href="http://yoursite.com/2018/06/10/zabbix%E7%9B%91%E6%8E%A7%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87/"/>
    <id>http://yoursite.com/2018/06/10/zabbix监控网络设备/</id>
    <published>2018-06-10T08:53:40.000Z</published>
    <updated>2018-06-10T08:53:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考文献：</p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h1 id="入门实践"><a href="#入门实践" class="headerlink" title="入门实践"></a>入门实践</h1>]]></content>
    
    <summary type="html">
    
      zabbix监控网络设备
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="运维监控体系" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E8%BF%90%E7%BB%B4%E7%9B%91%E6%8E%A7%E4%BD%93%E7%B3%BB/"/>
    
      <category term="zabbix" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E8%BF%90%E7%BB%B4%E7%9B%91%E6%8E%A7%E4%BD%93%E7%B3%BB/zabbix/"/>
    
    
      <category term="zabbix" scheme="http://yoursite.com/tags/zabbix/"/>
    
  </entry>
  
  <entry>
    <title>onenote从入门到实践</title>
    <link href="http://yoursite.com/2018/06/10/onenote%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2018/06/10/onenote从入门到实践/</id>
    <published>2018-06-10T05:31:50.000Z</published>
    <updated>2018-06-10T05:31:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考文献：</p><ul><li><a href="https://support.office.com/zh-cn/onenote" target="_blank" rel="noopener">OneNote-Microsoft官方文档</a></li></ul><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>onenote中的关系是（三级目录）：</p><p>笔记本–&gt;分区–&gt;页</p><p>注意：我们应该使用的是：onenote2013/onenote2016这种版本，而不是onenote这种不带版本后缀的。</p><h1 id="入门实践"><a href="#入门实践" class="headerlink" title="入门实践"></a>入门实践</h1><h2 id="设置密码保护"><a href="#设置密码保护" class="headerlink" title="设置密码保护"></a>设置密码保护</h2><p>参考文献：</p><ul><li><a href="https://support.office.com/zh-cn/article/%E7%94%A8%E5%AF%86%E7%A0%81%E4%BF%9D%E6%8A%A4%E6%82%A8%E7%9A%84%E7%AC%94%E8%AE%B0-e5ffd8fd-e811-441a-aa02-e13f0f445933#PASSWORDS=2016%E3%80%812013_%E5%92%8C_2010" target="_blank" rel="noopener">用密码保护您的笔记</a></li></ul><p>OneNote 中的密码保护功能旨在帮助确保笔记的安全，防止他人窥探。无论是在学校将 OneNote 用于课堂笔记、在工作场所将其用于会议笔记、在家将其用于个人日记或博客，还是将其用于你自己或亲朋好友的个人信息，密码都在控制对这些笔记的访问权限方面发挥着重要作用。</p><p>通过使用密码保护 OneNote 笔记本分区，可帮助确保私人笔记免遭他人窥探。当分区受密码保护时，其所有页面均处于锁定状态，直到输入正确的密码。</p><h3 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h3><p><strong>步骤如下：</strong></p><ol><li><p>右键单击要保护的<font color="red"><strong><code>分区</code></strong></font>选项卡，然后选择“用密码保护此分区”。</p></li><li><p>如何在 OneNote 2016 中使用密码保护分区的屏幕截图。</p></li><li><p>在“密码保护”任务窗格中，选择“设置密码”。</p></li><li><p>在“密码保护”对话框中，在“输入密码”框中键入所需的密码。</p></li><li><p>在“确认密码”框中再次键入该密码进行确认，然后单击“确定”。</p></li></ol><p><img src="http://picture.watchmen.xin/onenote/password.png" alt="password"></p><blockquote><p><strong>注意:</strong> 请仔细选择密码。如果忘记了密码，任何人都无法为你解锁笔记（甚至 Microsoft 技术支持也不能）。</p></blockquote><h3 id="锁定笔记本中受保护的分区"><a href="#锁定笔记本中受保护的分区" class="headerlink" title="锁定笔记本中受保护的分区"></a>锁定笔记本中受保护的分区</h3><p>如果您为笔记本中的多个分区应用了密码，则可以同时锁定所有这些分区。</p><ol><li><p>右键单击任何受保护的（但当前未锁定的）分区选项卡，然后选择“用密码保护此分区”。</p></li><li><p>在“密码保护”任务窗格中，选择“全部锁定”。</p></li></ol><p><strong>也就是说，一次锁定一个笔记本中的所有有密码保护的分区</strong></p><h3 id="更改受保护分区的密码"><a href="#更改受保护分区的密码" class="headerlink" title="更改受保护分区的密码"></a>更改受保护分区的密码</h3><ol><li><p>右键单击要更改密码的分区选项卡，然后选择“用密码保护此分区”。</p></li><li><p>在“密码保护”任务窗格中，选择“更改密码”。（如果此选项不可用，则表示该分区无密码。）</p></li><li><p>在“更改密码”对话框中，在“旧密码”框中键入当前的密码。</p></li><li><p>在“输入新密码”框中键入新密码。</p></li><li><p>在“确认密码”框中键入该密码进行确认，然后单击“确定”。</p></li></ol><h3 id="删除受保护分区的密码"><a href="#删除受保护分区的密码" class="headerlink" title="删除受保护分区的密码"></a>删除受保护分区的密码</h3><ol><li><p>右键单击要删除密码的分区选项卡，然后单击“用密码保护此分区”。</p></li><li><p>在“密码保护”任务窗格中，单击“删除密码”。（如果此选项不可用，则表示该分区无密码。）</p></li><li><p>在“取消密码”对话框中，键入当前密码，然后单击“确定”。</p></li></ol><h3 id="设置密码保护选项"><a href="#设置密码保护选项" class="headerlink" title="设置密码保护选项"></a>设置密码保护选项</h3><p>如果您在一段时间内没有使用已解锁的受密码保护分区，此类分区将再次自动锁定。 您可以自定义这段时间，并且可以设置应用于受保护分区的密码保护方式的其他选项。</p><ol><li><p>选择“文件”&gt;“选项”。</p></li><li><p>在“OneNote 选项”对话框中，选择“高级”。</p></li><li><p>在右侧的“密码”下，执行下列任一操作：</p></li><li><p>若要在指定的一段时间后锁定笔记本分区，请选中“在以下时间内未对受密码保护的分区进行操作即将其锁定”，然后选择所需的时间。</p></li><li><p>若要在完成使用笔记本分区后立即将其锁定，请选中“离开受密码保护的分区时即将其锁定”。</p></li><li><p>若要使受密码保护的分区中的笔记暂时对其他程序可用，请选中“允许加载项程序访问解除锁定的受密码保护的分区”。</p></li><li><p>单击“确定”应用首选项。</p></li></ol><h3 id="有关密码的一些重要说明"><a href="#有关密码的一些重要说明" class="headerlink" title="有关密码的一些重要说明"></a>有关密码的一些重要说明</h3><ul><li>密码只能应用于笔记本分区，不能应用于整个笔记本。</li></ul><ul><li>密码区分大小写。创建或输入密码前，请确保关闭 Caps Lock 键。</li></ul><ul><li>OneNote 使用加密来保护受密码保护的分区。如果忘记了密码，任何人都无法为你解锁笔记（甚至 Microsoft 技术支持也不能）。因此，向笔记本分区分配密码和更改密码时，需要特别小心。</li></ul><ul><li>笔记本搜索中不包括受密码保护的分区。 若要在搜索中包括受保护的分区，您必须首先将对应分区解锁。</li></ul><ul><li>除非已解除受保护分区的锁定，否则在任何受保护分区内的页面上使用的笔记标记不会包含在笔记标记摘要中。</li></ul>]]></content>
    
    <summary type="html">
    
      OneNote从入门到实践
    
    </summary>
    
      <category term="常用软件工具" scheme="http://yoursite.com/categories/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
    
      <category term="OneNote" scheme="http://yoursite.com/categories/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/OneNote/"/>
    
    
      <category term="OneNote" scheme="http://yoursite.com/tags/OneNote/"/>
    
  </entry>
  
  <entry>
    <title>高速通道从入门到实践</title>
    <link href="http://yoursite.com/2018/06/08/%E9%AB%98%E9%80%9F%E9%80%9A%E9%81%93%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2018/06/08/高速通道从入门到实践/</id>
    <published>2018-06-08T04:12:15.000Z</published>
    <updated>2018-06-08T04:12:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>阿里云高速通道（Express Connect）服务，帮助您在VPC间、VPC与本地数据中心间搭建私网通信通道，提高网络拓扑的灵活性和跨网络通信的质量和安全性。使用高速通道可以使您避免绕行公网带来的网络质量不稳定问题，同时可以免去数据在传输过程中被窃取的风险。</p><p><strong>VPC间内网通信</strong></p><ul><li>高速通道支持位于相同地域或不同地域，同一账号或不同账号的VPC之间进行内网互通。</li></ul><ul><li>阿里云通过在<strong><code>两侧VPC的路由器上分别创建路由器接口</code></strong>，以及自有的骨干传输网络来搭建高速通道，轻松实现两个VPC之间安全可靠，方便快捷的通信。</li></ul><p><strong>本地数据中心和阿里云上VPC间内网通信</strong></p><ul><li>您可以通过物理专线在物理层面上连接您的本地数据中心到阿里云，然后建立边界路由器和路由器接口来连接数据中心与阿里云VPC。</li></ul><h2 id="基础架构"><a href="#基础架构" class="headerlink" title="基础架构"></a>基础架构</h2><p>基于软件自定义网络（Software Defined Network，简称SDN）架构下的三层Overlay技术和交换机虚拟化技术，阿里云将客户的物理专线接入的端口隔离起来，并抽象成边界路由器。通过目前主流的隧道技术，阿里云将客户的数据包在交换机内部进行封装，在用户的物理专线和VPC的路由器之间加上隧道封装，然后将数据传输到VPC内。</p><p><img src="http://picture.watchmen.xin/channel/base.png" alt="base"></p><h2 id="路由器接口"><a href="#路由器接口" class="headerlink" title="路由器接口"></a>路由器接口</h2><p>路由器接口是一种虚拟设备，具备搭建通信通道并控制其工作状态的功能。</p><p>高速通道通过在两侧的VPC路由器上分别创建路由器接口为两个VPC之间搭建内网通信通道。</p><p>在两个路由器接口建立连接后，两侧的路由器可以通过建立的通道相互发送消息。因此，两个VPC中的资源（比如ECS实例）就可以通过内网进行通信了。</p><p><img src="http://picture.watchmen.xin/channel/interface.png" alt=""></p><h3 id="发起端和接受端"><a href="#发起端和接受端" class="headerlink" title="发起端和接受端"></a>发起端和接受端</h3><p>当两个路由器接口进行互连时，一个扮演连接发起端角色，另一个扮演连接接受端角色。只有发起端路由器接口才可以发起连接，接受端路由器接口只能等待发起端发起连接。发起端和接受端仅用于控制连接建立的过程，在实际进行网络通信时，通信链路是双向的，发起端和接受端没有任何差别。</p><p>对于同账号VPC互通，高速通道提供了同时创建两端的选项。在这种情况下，您不需要手动发起连接，系统会自动发起并建立连接。对于跨账号VPC互通，您必须手动发起路由器接口间的连接。</p><p>发起端与接受端的对比如下表所示。</p><p><img src="http://picture.watchmen.xin/channel/duibi.png" alt="duibi"></p><p><strong>注意：</strong></p><p>和我们传统的路由器的发起和接受概念有点不一样，这里需要明确的指定</p><ul><li>发起端需要指定接受端的路由器接口</li></ul><ul><li>接收端需要指定发起端的路由器接口</li></ul><p>也就是说，这两个接口只能是给这一条通道使用</p><h3 id="连接过程和连接状态"><a href="#连接过程和连接状态" class="headerlink" title="连接过程和连接状态"></a>连接过程和连接状态</h3><p>路由器接口的连接过程为：发起端路由器接口发起连接 &gt; 接受端路由器接口接受连接 &gt; 连接成功。</p><p>在不同的连接过程和阶段，路由器接口的状态也不同如下表所示。路由器接口创建后的初始状态为未连接。</p><blockquote><p>说明：在创建路由器接口时，如果您选择了同时创建两端，系统会自动发起并建立连接，此种情况下路由器接口直接变为已激活状态。</p></blockquote><p><img src="http://picture.watchmen.xin/channel/status.png" alt=""></p><p>整个连接过程如下所示：</p><p><img src="http://picture.watchmen.xin/channel/process.png" alt=""></p><h3 id="路由器接口规格"><a href="#路由器接口规格" class="headerlink" title="路由器接口规格"></a>路由器接口规格</h3><p>高速通道提供小型（10MB-50MB）、中型（100MB-900MB）和大型（1GB-4.5GB）三种规格的路由器接口。</p><p>可选择的路由器接口规格在不同连接场景和不同地域中并不相同。您可以根据具体的配置在购买页面选择合适的路由器接口规格。同地域间VPC互连的路由器接口规格默认为大型2档（2GB）。</p><h3 id="使用限制"><a href="#使用限制" class="headerlink" title="使用限制"></a>使用限制</h3><ul><li><font color="red"><strong>两个VPC之间只能有一对连接成功的路由器接口。</strong></font></li><li><p>路由器接口创建后无法修改连接角色。</p></li><li><p>边界路由器（VBR）必须是发起端。</p></li></ul><h2 id="物理专线"><a href="#物理专线" class="headerlink" title="物理专线"></a>物理专线</h2><p>物理专线是对阿里云接入点和本地数据中心之间建立的网络线路的抽象。您需要通过租用一条运营商的专线将本地数据中心连接到阿里云接入点，建立专线连接。</p><p>专线接入后，您可以创建一个边界路由器（VBR）将您本地数据中心和阿里云连接起来，构建混合云环境，使云上资源可以绕过公网通过私网访问本地数据中心。</p><p>物理专线的私网连接不通过公网，因此与传统的公网连接相比，物理专线连接更加安全、可靠、速度更快、延迟更低。</p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>高速通道物理专线提供以下功能：</p><p><strong>多种连接方式</strong></p><p>您可以选择使用点对点以太网连接或MPLS VPN连接。物理专线支持以太格式的RJ45电口和LC模式光口, 可以提供1Mbps至10Gbps的传输速率。</p><p><strong>冗余连接</strong></p><p>物理专线通过等价路由实现两条物理线路冗余：</p><ul><li><p>如果两条专线接入同地域下不同接入点，则两条线路形成天然冗余。</p></li><li><p>如果两条专线接入同地域下同一个接入点，您可以在申请第二条物理专线时，将第一条物理专线作为冗余线路。</p></li></ul><h3 id="使用限制-1"><a href="#使用限制-1" class="headerlink" title="使用限制"></a>使用限制</h3><p>物理专线使用限制如下：</p><p>物理专线不支持SDH的G.703、V.35格式接口。</p><p>阿里云在每个可接入的地域提供一个或多个接入点，不同的接入点有运营商限制。在申请专线接入前，您需要提交工单获取接入点以及运营商限制信息。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在物理专线接入之后，你会得到一个边界路由器</p><p>边界路由器（VBR）必须是发起端。</p><p>购买物理专线之后，其实不是直接连接到阿里云的机房，而是连接到这个边界路由器，边界路由器的对端再连接VPC的路由器</p><h2 id="边界路由器"><a href="#边界路由器" class="headerlink" title="边界路由器"></a>边界路由器</h2><p>边界路由器（Virtual border router, VBR）是您申请的物理专线接入交换机的产品映射，可以看做是CPE（Customer-premises equipment）设备和VPC之间的一个路由器，作为数据从VPC到本地数据中心的转发桥梁。</p><p>边界路由器同VPC中的路由器一样，同样管理一个路由表。在该路由表中配置路由条目，可以对边界路由器中的流量转发进行管理。</p><p><img src="http://picture.watchmen.xin/channel/vbr.png" alt=""></p><h3 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h3><p>边界路由器提供如下功能：</p><ul><li>作为VPC和本地数据中心的中间路由器，交换数据包。</li></ul><ul><li>在三层子接口模式下，可以识别或附加VLAN(Virtual Local Area Network)标签。</li></ul><ul><li>决定物理专线端口模式：三层路由接口或基于VLAN的三层子接口。</li></ul><ul><li>支持添加BGP动态路由。</li></ul><h3 id="使用限制-2"><a href="#使用限制-2" class="headerlink" title="使用限制"></a>使用限制</h3><ul><li>目前不支持源地址策略路由。</li></ul><ul><li>每个边界路由器有且只有1个路由表。</li></ul><ul><li>每个路由表支持48条自定义路由条目。</li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><h3 id="VPC私网互连"><a href="#VPC私网互连" class="headerlink" title="VPC私网互连"></a>VPC私网互连</h3><p>您可以使用高速通道实现两个VPC间的的私网通信需求，既可以避免绕行公网带来的网络质量不稳定问题，也可以免去数据在传输过程中被窃取的风险。详情请参考跨地域VPC互连和跨账号VPC互连。</p><h3 id="本地数据中心专线接入VPC"><a href="#本地数据中心专线接入VPC" class="headerlink" title="本地数据中心专线接入VPC"></a>本地数据中心专线接入VPC</h3><p>如果您的本地数据中心需要与VPC进行私网通信，您可以使用<strong><code>高速通道的物理专线功能实现两侧的私网通信</code></strong>，您可以选择自行搭建专线接入阿里云或让阿里巴巴的合作伙伴为您搭建物理专线。通过物理专线可以实现本地数据中心和VPC间高质量、高可靠且安全性高的私网通信。您可以使用高速通道实现两个VPC间的的私网通信需求，既可以避免绕行公网带来的网络质量不稳定问题，也可以免去数据在传输过程中被窃取的风险。详情请参考同账号专线接入和跨账号专线接入。</p><h3 id="两个VPC共用NAT网关"><a href="#两个VPC共用NAT网关" class="headerlink" title="两个VPC共用NAT网关"></a>两个VPC共用NAT网关</h3><p>如果您需要两个VPC共用一个NAT网关进行公网通信，您可以使用高速通道实现同两个VPC使用同一个NAT网关来访问公网。</p><p><img src="http://picture.watchmen.xin/channel/vpc_nat.jpg" alt=""></p><h2 id="使用限制-3"><a href="#使用限制-3" class="headerlink" title="使用限制"></a>使用限制</h2><ul><li>同一个路由器上的路由器接口不能互连。</li></ul><ul><li><font color="red"><strong>边界路由器上的路由器接口只能作为发起端。</strong></font></li></ul><ul><li>一对VPC之间只能同时存在一对互连的路由器接口。</li></ul><ul><li>一条物理专线上最多可以存在的边界路由器个数：50个。</li></ul><ul><li>一个用户名下最多可以存在的已激活的路由器接口个数：5个。</li></ul><ul><li>一个路由器上最多可以存在的已激活的路由器接口个数：5个。</li></ul><ul><li>一个账号最多可以在一个接入点接入的物理专线条数：2条。</li></ul><ul><li>一个账号下最多可以存在的空闲边界路由器（没有接口的边界路由器）个数：2个。</li></ul><h1 id="入门实践"><a href="#入门实践" class="headerlink" title="入门实践"></a>入门实践</h1><h2 id="跨地域VPC互连"><a href="#跨地域VPC互连" class="headerlink" title="跨地域VPC互连"></a>跨地域VPC互连</h2><p>本操作以如下同一个账号下的两个VPC为例演示如何使用高速通道实现VPC私网互通。</p><blockquote><p>说明：同账号下同地域和跨地域VPC互连的操作步骤一样。</p></blockquote><p>前提条件</p><ul><li>确保要进行互连的VPC或交换机的网段不冲突。</li></ul><p>文章内容：<a href="https://help.aliyun.com/document_detail/44842.html?spm=a2c4g.11186623.6.550.zI2Wp5" target="_blank" rel="noopener">跨地域VPC互连</a></p><h2 id="跨账号VPC互连"><a href="#跨账号VPC互连" class="headerlink" title="跨账号VPC互连"></a>跨账号VPC互连</h2><p>前提条件</p><ul><li>两个VPC中交换机地址不能冲突。</li></ul><ul><li>已获取双方的阿里云账号ID和路由器ID。</li></ul><p>文章内容：<a href="https://help.aliyun.com/document_detail/44843.html?spm=a2c4g.11186623.6.551.PoqdWg" target="_blank" rel="noopener">跨账号VPC互连</a></p><h2 id="物理专线-1"><a href="#物理专线-1" class="headerlink" title="物理专线"></a>物理专线</h2><p>文章内容：<a href="https://help.aliyun.com/document_detail/44844.html?spm=a2c4g.11186623.6.552.0hqrXn" target="_blank" rel="noopener">物理专线接入</a></p>]]></content>
    
    <summary type="html">
    
      高速通道从入门到实践
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="公有云产品" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%85%AC%E6%9C%89%E4%BA%91%E4%BA%A7%E5%93%81/"/>
    
      <category term="阿里云" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%85%AC%E6%9C%89%E4%BA%91%E4%BA%A7%E5%93%81/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
      <category term="高速通道" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%85%AC%E6%9C%89%E4%BA%91%E4%BA%A7%E5%93%81/%E9%98%BF%E9%87%8C%E4%BA%91/%E9%AB%98%E9%80%9F%E9%80%9A%E9%81%93/"/>
    
    
      <category term="高速通道" scheme="http://yoursite.com/tags/%E9%AB%98%E9%80%9F%E9%80%9A%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>软件开发环境－开发环境、测试环境、灰发环境、生产环境的区别</title>
    <link href="http://yoursite.com/2018/06/07/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8D%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E3%80%81%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E3%80%81%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2018/06/07/软件开发环境－开发环境、测试环境、生产环境的区别/</id>
    <published>2018-06-07T14:25:59.000Z</published>
    <updated>2018-06-07T14:25:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>软件开发环境(Software Development Environment，SDE)是指在基本硬件和宿主软件的基础上，为支持系统软件和应用软件的工程化开发和维护而使用的一组软件，简称SDE。它由软件工具和环境集成机制构成，前者用以支持软件开发的相关过程、活动和任务，后者为工具集成和软件的开发、维护及管理提供统一的支持。</p><p>项目部署环境一般可分为四种：</p><ul><li>开发环境</li><li>测试环境</li><li>灰发环境/预生产环境</li><li>生产环境</li></ul><h1 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h1><p>开发环境时程序猿们专门用于开发的服务器，配置可以比较随意，为了开发调试方便，一般打开全部错误报告和测试工具，是最基础的环境。开发环境的分支，一般是feature分支。</p><h1 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h1><p>测试环境就是上线前的测试。一般是克隆一份生产环境的配置，一个程序在测试环境工作不正常，那么肯定不能把它发布到生产服务器上，是开发环境到生产环境的过度环境。测试环境的分支一般是develop分支，部署到公司私有的服务器或者局域网服务器上，主要用于测试是否存在bug，一般会不让用户和其他人看到，并且测试环境会尽量与生产环境相似。</p><h1 id="灰发环境-预生产环境"><a href="#灰发环境-预生产环境" class="headerlink" title="灰发环境/预生产环境"></a>灰发环境/预生产环境</h1><p>1、什么是预发布环境?<br>预发布环境，就是线上环境、正式生产环境，为避免因为测试环境和线上环境的差异性等带来的缺陷漏测而设立的一套环境，其配置等基本和线上一致，只是预发布环境web服务器不在线上集成服务器范围之内，为单独的一台机器；</p><p>2、预发布环境不能被线上用户访问<br>通常这里的技术实现是这样的：把预发布环境的访问域名设置成和线上环境的不一样，通过配置host来访问预发布环境；</p><p>3、预发布环境和线上环境公用数据库，即预发布环境使用的是线上的数据库<br>问题：如果新版本程序需要更改表结构等，比如加个表字段，那么，部署到预发布环境时也需要更改表字段，这个可能会影响线上环境程序代码的运行，咋解决？</p><p>答案：<br>3.1 先把预发布环境使用的数据库切换为测试环境使用的数据库<br>3.2 根据实际部署过程，如果有必要，接着，可有针对性的测试下数据库的变更是否会影响线上当前代码程序的运行(注：个人想法)<br>3.3 把新代码部署到预发布环境，测试程序是否正常运行<br>3.4预发布测试完毕，如果没问题，先上线数据库，即在正式环境执行对应的数据库变更操作<br>3.5 紧接着，把预发布环境连接的数据库切换为线上环境使用的数据库，再次进行预发布环境的测试<br>3.6 最后，如果预发布环境测试通过，则把预发布环境的代码部署到线上生产环境。</p><p>注：<br>1、如果不需要更改数据库表结构等，则无需切换预发布环境环境使用的数据库，即预发布使用线上的数据库。</p><p>2、这里，因为预发布环境本身就是线上环境，测试完预发布，也基本代表线上环境测试完成。这样还可以避免发布到正式环境还得再测一遍的情况</p><p><strong>总结</strong></p><p>预发布环境不能被线上用户访问 </p><p>通常这里的技术实现是这样的：把预发布环境的访问域名设置成和线上环境的不一样，通过配置host来访问预发布环境；</p><p>也就是说，预发布环境其实就是生产环境，只是其所在的服务器，没有被添加到生产服务器所在的负载均衡中，因此从公网是无法直接通过原来的方式进行访问的，在这种情况，我们通过配置hosts等方式来定向的访问这一台</p><h1 id="生产环境"><a href="#生产环境" class="headerlink" title="生产环境"></a>生产环境</h1><p>生产环境是指正式提供对外服务的，一般会关掉错误报告，打开错误日志，是最重要的环境。部署分支一般为master分支。</p><p>三个环境也可以说是系统开发的三个阶段：开发-&gt;测试-&gt;上线，其中生产环境也就是通产说的真实的环境，最后交给用户的环境。</p><h1 id="补充：灰度发布"><a href="#补充：灰度发布" class="headerlink" title="补充：灰度发布"></a>补充：灰度发布</h1><p>预发布环境过后，就是灰度发布了。由于一个项目，一般会部署到多台机器，所以灰度1台至3台，看看新功能是否ok，如果失败则只需要回滚几台，比较方便。注意，由于是灰度发布几种几台，所以一般会使用跳板机，然后进行域名绑定，这样才可以保证只访问有最新代码的服务器。</p><p><strong>什么是灰度发布？</strong></p><p>灰度发布，又名金丝雀发布，或者灰度测试，是指在黑与白之间能够平滑过渡的一种发布方式。在其上可以进行A/B testing，即让一部分用户继续用产品特性A，一部分用户开始用产品特性B，如果用户对B没有什么反对意见，那么逐步扩大范围，把所有用户都迁移到B上面来。</p><p>灰度发布是对某一产品的发布逐步扩大使用群体范围，也叫灰度放量。灰度发布可以保证整体系统的稳定，在初始灰度的时候就可以发现、调整问题，以保证其影响度。</p><p><strong>灰度期：</strong>灰度发布开始到结束期间的这一段时间，称为灰度期。</p><p><strong>灰度发布的意义</strong></p><p>灰度发布能及早获得用户的意见反馈，完善产品功能，提升产品质量，让用户参与产品测试，加强与用户互动，降低产品升级所影响的用户范围。</p><p><strong>灰度发布的实现</strong></p><p>待补充</p>]]></content>
    
    <summary type="html">
    
      软件开发环境－开发环境、测试环境、灰发环境生产环境的区别
    
    </summary>
    
      <category term="IT基础知识" scheme="http://yoursite.com/categories/IT%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="软件开发环境" scheme="http://yoursite.com/categories/IT%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
    
      <category term="软件开发环境" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>高并发之分流限流与降级</title>
    <link href="http://yoursite.com/2018/06/07/%E9%AB%98%E5%B9%B6%E5%8F%91%E4%B9%8B%E5%88%86%E6%B5%81%E9%99%90%E6%B5%81%E4%B8%8E%E9%99%8D%E7%BA%A7/"/>
    <id>http://yoursite.com/2018/06/07/高并发之分流限流与降级/</id>
    <published>2018-06-07T13:05:28.000Z</published>
    <updated>2018-06-07T13:05:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考文献：</p><ul><li><a href="http://www.cnblogs.com/duanxz/p/3465559.html" target="_blank" rel="noopener">高可用服务设计之二：Rate limiting 限流与降级</a></li><li><a href="http://www.cnblogs.com/duanxz/p/4123068.html" target="_blank" rel="noopener">限流算法之漏桶算法、令牌桶算法</a></li></ul><h1 id="分流"><a href="#分流" class="headerlink" title="分流"></a>分流</h1><p>分流一般是指使用7层负载均衡技术，在前端使用正则表达式，匹配相对应的接口URL串，然后将该接口的流量负载转发到后端的指定服务器上【前提是微服务，将接口进行拆分】</p><h1 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h1><p>在开发高并发系统时，有很多手段保护系统，比如缓存、分流、降级和限流。缓存的目的是提升系统访问速度和增大系统处理能力，可谓是抗高并发的银弹。而降级是当服务出问题或者影响到核心流程的性能，需要暂时屏蔽掉，待高峰过去或者问题解决后再打开的场景。而有些场景并不能用缓存和降级来解决，比如稀缺资源（秒杀、抢购）、写服务（如评论、下单）、频繁的复杂查询（评论的最后几页）等。因此，需要有一种手段来限制这些场景下的并发/请求量，这种手段就是限流。</p><p>限流的目的是通过对并发访问/请求进行限速或者一个时间窗口内的请求进行限速来保护系统，一旦达到限速速率则可以拒绝服务（定向到错误页或告知资源没有了）、排队或等待（比如秒杀、评论、下单）、降级（返回兜底数据或者默认数据，如商品详情页库存默认有货）。在压测时，我们能找出每个系统的处理峰值，然后通过设定峰值阈值，当系统过载时，通过拒绝过载的请求来保障系统可用。另外，也可以根据系统的吞吐量、响应时间、可用率来动态调整限流阈值。</p><p>一般开发高并发系统场景的限流有：<strong><code>限制总并发数</code></strong>（比如数据库连接池、线程池）、<strong><code>限制瞬时并发数</code></strong>（如Nginx的limit_conn模块，用来限制瞬间并发连接数）、<strong><code>限制时间窗口内的平均速率</code></strong>（如Guava的RateLimiter、Nginx的limit_req模块，用来限制每秒的平均速率），以及限制远程接口调用速率、限制MQ的消费速率等。另外还可以根据网络连接数、网络流量、CPU或内存负载等来限流。</p><p>Rate limiting 在 Web 架构中非常重要，是互联网架构可靠性保证重要的一个方面。</p><p>从最终用户访问安全的角度看，设想有人想暴力碰撞网站的用户密码；或者有人攻击某个很耗费资源的接口；或者有人想从某个接口大量抓取数据。大部分人 都知道应该增加 Rate limiting，做请求频率限制。从安全角度，这个可能也是大部分能想到，但不一定去做的薄弱环节。</p><p>从整个架构的稳定性角度看，一般 SOA 架构（service-oriented architecture面向服务的架构）的每个接口的有限资源的情况下，所能提供的单位时间服务能力是有限的。假如超过服务能力，一般会造成整个接口服务停顿，或者应用 Crash，或者带来连锁反应，将延迟传递给服务调用方造成整个系统的服务能力丧失。有必要在服务能力超限的情况下 Fail Fast。</p><p>另外，根据排队论，由于 API 接口服务具有延迟随着请求量提升迅速提升的特点，为了保证 SLA 的低延迟，需要控制单位时间的请求量。这也是 Little’s law 所说的。</p><h2 id="限流算法"><a href="#限流算法" class="headerlink" title="限流算法"></a>限流算法</h2><p>常见的限流算法有：令牌桶、漏桶。计数器也可以用来进行粗暴限流实现。</p><ul><li><a href="http://www.cnblogs.com/duanxz/p/4123068.html" target="_blank" rel="noopener">限流算法之漏桶算法、令牌桶算法</a></li></ul><p><strong>令牌桶算法</strong></p><p>令牌桶算法，是一个存放固定容量令牌的桶，按照固定速率往桶里添加令牌。令牌桶算法的描述如下：</p><ul><li>假设限制2r/s，则按照500毫秒的固定速率往桶内添加令牌。</li></ul><ul><li>桶中最多存放b个令牌，当桶满时，新添加的令牌会被丢弃或拒绝。</li></ul><ul><li>当一个n个字节大小的数据包到达，将从桶中删除n个令牌，接着数据包被发送到网络上。</li></ul><ul><li>如果桶中的令牌不足n个，则不会删除令牌，且该数据包被限流（要么丢弃，要么在缓冲区等待）。</li></ul><p><strong>漏桶算法</strong></p><p>漏桶作为计量工具时，可以用于流量整形和流量控制，漏桶算法的描述如下：</p><ul><li>一个固定容量的漏桶，按照常量固定速率流出水滴。</li></ul><ul><li>如果桶是空的，则不需流出水滴。</li></ul><ul><li>可以以任意速率流入水滴到漏桶。</li></ul><ul><li>如果流入水滴超过了桶的容量，则流入的水滴溢出了（被丢弃），而漏桶容量是不变的。</li></ul><p><strong>令牌桶和漏桶对比</strong></p><ul><li>令牌桶是按照固定速率往桶中添加令牌，请求是否被处理需要看桶中令牌是否足够，当令牌数减为零时，则拒绝新的请求。</li></ul><ul><li>漏桶则是按照常量固定速率流出请求，请求流入速率任意，当流入的请求数累积到漏桶容量时，则新流入的请求被拒绝。</li></ul><ul><li>令牌桶限制的是平均流入速率（允许突发请求，只要有令牌就可以处理，支持一次拿多个令牌），并允许一定程序的突发流量。</li></ul><ul><li>漏桶限制的是常量流出速率（即流出速率是一个固定常量值，比如都是1的速率流出，而不能一次是1，下次又是2），从而平滑突发流入速率。</li></ul><ul><li>令牌桶允许一定程序的突发，而漏桶主要目的是平滑流入速率。</li></ul><ul><li>两个算法实现可以一样，但是方向是相反的，对于相同的参数得到的限流效果是一样的。</li></ul><h2 id="应用级限流"><a href="#应用级限流" class="headerlink" title="应用级限流"></a>应用级限流</h2><p><strong>限制总并发/连接/请求数</strong></p><p>对于一个应用系统来说，一定会有极限并发/请求数，即总有一个<strong><code>TPS/QPS</code></strong>阈值，如果超了阈值，则系统就会不影响用户请求或响应得非常慢。因此，我们最好进行过载保护，以防止大量请求涌入击垮系统。</p><p>如MQ（max_connections）、Redis（tcp-backlog）都会有类似的限制连接数的配置。</p><p><strong>限制总资源数</strong></p><p>如果有的资源是稀缺资源（如数据库连接、线程），而且可能有多个系统都会去使用它，那么需要加以限制。可以使用池化技术来限制总资源数，如连接池、线程池。假设分配给每个应用的数据库连接是100，那么本应用最多可以使用100个资源，超出则可以等待或者抛异常。</p><p><strong>限制某个接口的总并发/请求数</strong></p><p>如果接口可能会有并发流量，但又担心访问量太大造成奔溃，那么久需要限制这个接口的总并发/请求数了。因为粒度比较细，可以为每个接口设置相应的阈值。可以使用Java中的AtomicLong或者Semaphore进行限流。Hystrix在信号量模式下也使用Semaphore限制每个接口的总请求数。</p><p>一种实现方式如下：</p><pre><code>try {    if (atomic.incrementAndGet() &gt; 限流数) {        //拒绝请求    }    //处理请求} finally {    atomic.decrementAndGet();}</code></pre><p><strong>限制某个接口的时间窗请求数</strong></p><p>即限制某个接口/服务每秒/每分钟/每天的请求数/调用量。一种实现方式如下：</p><pre><code>LoadingCache&lt;Long, AtomicLong&gt; counter =        CacheBuilder.newBuilder()        .expireAfterWrite(2, TimeUnit.SECONDS)        .build(new CacheLoader&lt;Long, AtomicLong&gt;() {            @Override            public AtomicLong load(Long aLong) throws Exception {                return new AtomicLong(0);            }        });long limit = 1000;while (true) {    long currentSeconds = System.currentTimeMillis() / 1000;    if (counter.get(currentSeconds).incrementAndGet() &gt; limit) {        logger.info(&quot;被限流了:{}&quot;, currentSeconds);        continue;    }    //业务处理}</code></pre><p><strong>平滑限流某个接口的请求数</strong></p><p>Guava RateLimiter提供的令牌桶算法可用于平滑突发限流（SmoothBursty）和平滑预热限流（SmoothWarmingUp）实现。</p><p><strong>分布式限流</strong></p><p>分布式限流最关键的是要将限流服务做成原子化，而解决方案可以使用Redis+Lua或者Nginx+Lua技术进行实现，通过这两种技术可以实现高并发和高性能。</p><p><strong>节流</strong></p><p>有时候我们想在特定时间窗口内对重复的相同事件最多只处理一次，或者想限制多个连续相同事件最小执行时间间隔，那么可使用节流（Throttle）实现，其防止多个相同事件连续重复执行。节流主要有如下几种用法：throttleFirst、throttleLast、throttleWithTimeout。</p><font color="red"><strong>总结方法：</strong></font><p>常见的 Rate limiting 的实现方式</p><p>Proxy 层的实现，针对部分 URL 或者 API 接口进行访问频率限制</p><p><strong>Nginx 模块</strong></p><pre><code>limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;server {    location /search/ {        limit_req zone=one burst=5;    }</code></pre><p>详细参见：<a href="http://www.cnblogs.com/duanxz/p/3977756.html" target="_blank" rel="noopener">《Nginx模块 ngx_http_limit_req_module 限制请求速率》</a></p><p><strong>Haproxy 提供的功能</strong></p><p>详细参见：<a href="http://blog.serverfault.com/2010/08/26/1016491873/" target="_blank" rel="noopener">Haproxy Rate limit 模块</a></p><p><strong>Java、Scala JVM 系应用层实现</strong></p><p>Google Guava 提供了一个 RateLimiter 实现。使用方式简单明了，在自己的应用中简单封装即可，放到 HTTP 服务或者其他逻辑接口调用的前端。</p><p>final RateLimiter rateLimiter = RateLimiter.create(2.0); // rate is “2 permits per second” void submitTasks(List<runnable> tasks, Executor executor) { for(Runnable task : tasks) { rateLimiter.acquire(); // may wait executor.execute(task);} }</runnable></p><p><strong>基于 Redis 功能的实现</strong></p><p>这个在 Redis 官方文档有非常详细的实现。一般适用于所有类型的应用，比如 PHP、Python 等等。Redis 的实现方式可以支持分布式服务的访问频率的集中控制。Redis 的频率限制实现方式还适用于在应用中无法状态保存状态的场景。</p><h1 id="降级"><a href="#降级" class="headerlink" title="降级"></a>降级</h1><p>当访问量剧增、服务出现问题（如响应时间长或者不响应）或非核心服务影响到核心服务的性能时，仍然需要保证服务还是可用的，即使是有损服务。系统可以根据一些关键参数进行自动降级，也可以配合开关实现人工降级。</p><p><strong>降级的最终目的是保证核心服务可用</strong>，即使是有损的。而且有些服务是无法降级的（如加入购物车、结算）。降级也需要根据系统的吞吐量、响应时间、可用率等条件进行手工降级或自动降级。</p><h2 id="降级预案"><a href="#降级预案" class="headerlink" title="降级预案"></a>降级预案</h2><p>在进行降级之前要对系统进行梳理，看看系统是不是可以丢卒保车，从而梳理出哪些必须誓死保护，哪些可以降级。比如，可以参考日志级别设置预案：</p><ul><li>一般：比如，有些服务偶尔因为网络抖动或者服务正在上线而超时，可以自动降级。</li></ul><ul><li>警告：有些服务在一段时间内成功率有波动（如在95%~100%之间），可以自动降级或人工降级并发送告警。</li></ul><ul><li>错误：比如，可用率低于90%，或者数据库连接池用完了，或者访问量突然猛增到系统能承受的最大阈值，此时可以根据情况自动降级或人工降级。</li></ul><ul><li>严重错误：比如，因为特殊原因数据出现错误，此时需要紧急人工降级。</li></ul><p><strong>降级分类</strong></p><ul><li>降级按照是否自动化可分为：自动开关降级和人工开关降级。</li></ul><ul><li>降级按照功能可分为：读服务降级和写服务降级。</li></ul><ul><li>降级按照处于的系统层次可分为：多级降级。</li></ul><p>降级的功能点主要从服务器端链路考虑，即根据用户访问的服务调用链路来梳理哪里需要降级。</p><ul><li>页面降级。</li></ul><ul><li>页面片段降级。</li></ul><ul><li>页面异步请求降级。</li></ul><ul><li><p>服务功能降级。</p></li><li><p>读降级。比如多级缓存模式，如果后端服务有问题，则可以降级为只读缓存，这种方式是用于对读一致性要求不高的场景。</p></li></ul><ul><li>写降级。比如秒杀抢购我们可以只进行Cache的更新，然后异步扣减库存到DB，保证最终一致性即可，此时可以将DB降级为Cache。</li></ul><ul><li>爬虫降级。</li></ul><ul><li>风控降级。</li></ul><p><strong>自动开关降级</strong></p><p>自动降级是根据系统负载、资源使用情况、SLA等指标进行降级。</p><ul><li>超时降级</li></ul><ul><li>统计失败次数降级</li></ul><ul><li>故障降级</li></ul><ul><li>限流降级</li></ul><p><strong>人工开关降级</strong></p><p>比如，上线新功能时进行灰度测试，当新服务有问题时通过开关切换回老服务。</p><h1 id="补充：超时与重试机制"><a href="#补充：超时与重试机制" class="headerlink" title="补充：超时与重试机制"></a>补充：超时与重试机制</h1><p>如果应用不设置超时，可能会导致请求响应慢，慢请求累积导致连锁效应，甚至造成应用雪崩。而有些中间件或框架在超时后会进行重试（如设置超时自动重试两次），读服务天然适合重试，但写服务大多不能重试（如写订单，如果写服务是幂等的，则重试是允许的），重试次数太多会导致多倍请求流量，即模拟了DDoS攻击，后果可能是灾难。因此，务必设置合理的重试机制，并且应该和熔断、快速失败机制配合。在进行代码Review时，一定记得Review超时与重试机制。</p><p>对于非幂等写服务应避免重试，或者考虑提前生成唯一流水号来保证写服务操作通过判断流水号来实现幂等操作。</p><p>在进行数据库/缓存服务器操作时，要经常检查慢查询，慢查询通常是引起服务出问题的罪魁祸首。也要考虑在超时严重时，直接将该服务降级，待该服务修复后再取消降级。</p><h1 id="补充：回滚机制"><a href="#补充：回滚机制" class="headerlink" title="补充：回滚机制"></a>补充：回滚机制</h1><p>回滚是指当程序或数据出错时，将程序或数据恢复到最近的一个正确版本的行为。通过回滚机制可保证系统在某些场景下的高可用。常见的回滚如下：</p><ul><li>事务回滚</li></ul><ul><li>代码库回滚</li></ul><ul><li>部署版本回滚</li></ul><ul><li>数据版本回滚</li></ul><ul><li>静态资源版本回滚。</li></ul><h1 id="补充：压测与预案"><a href="#补充：压测与预案" class="headerlink" title="补充：压测与预案"></a>补充：压测与预案</h1><p>在大促来临之前，研发人员需要对现有系统进行梳理，发现系统瓶颈和问题，然后进行系统调优来提升系统的健壮性和处理能力。一般通过系统压测来发现系统瓶颈和问题，然后进行系统优化和容灾（系统参数调整、单机房容灾、多机房容灾等）。</p><h2 id="系统压测"><a href="#系统压测" class="headerlink" title="系统压测"></a>系统压测</h2><p>压测一般是指性能压力测试，用来评估系统的稳定性和性能，通过压测数据进行系统容量评估，从而决定是否需要进行扩容或缩容。</p><p>压测之前要有压测方案（如压测接口、并发量、压测策略[突发、逐步加压、并发量]、压测指标[机器负载、QPS/TPS]、响应时间[平均、最小、最大]、成功率、相关参数[JVM参数、压缩参数]等），最后根据压测报告分析的结果进行系统优化和容灾。</p>]]></content>
    
    <summary type="html">
    
      高并发之分流限流与降级
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="高并发" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
      <category term="分流限流与降级" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E9%AB%98%E5%B9%B6%E5%8F%91/%E5%88%86%E6%B5%81%E9%99%90%E6%B5%81%E4%B8%8E%E9%99%8D%E7%BA%A7/"/>
    
    
      <category term="高并发" scheme="http://yoursite.com/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>python基本用法</title>
    <link href="http://yoursite.com/2018/06/07/python%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2018/06/07/python基本用法/</id>
    <published>2018-06-07T12:13:31.000Z</published>
    <updated>2018-06-07T12:13:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h1><p>输出目标：</p><pre><code>-------- info of  $ -------Name:Age:Job:Salary:&apos;&apos;&apos;</code></pre><p>让输出的内容按照指定的格式进行输出</p><p><strong>传统方式：使用字符串拼接实现</strong></p><p>代码如下：</p><pre><code>name = input(&quot;name: &quot;)age = input(&quot;age: &quot;)job = input(&quot;job:&quot;)salary = input(&quot;salary:&quot;)info = &apos;&apos;&apos;-------- info of &apos;&apos;&apos; +  name +  &quot;&quot;&quot; ------- Name:&quot;&quot;&quot; + name  + &quot;&quot;&quot;Age: &quot;&quot;&quot; + age   + &quot;&quot;&quot;Job: &quot;&quot;&quot; +  job  +  &quot;&quot;&quot;Salary: &quot;&quot;&quot; + salaryprint (info)</code></pre><p>使用注释拼接上变量的形式来创建指定的格式，不建议使用字符串拼接的方式去实现，因为它会开辟好几块的内存空间，效率比较低下</p><p><strong>更高效简单的方法-参数替换</strong></p><p>在shell脚本中，我们使用$符号引用外面定义的变量，在python中也提供了类似的功能。</p><p>在python中使用%s，占位符，相当于$的存在</p><p>代码如下：</p><pre><code>name = input(&quot;name: &quot;)age = int(input(&quot;age: &quot;))job = input(&quot;job:&quot;)salary = input(&quot;salary:&quot;)print(&quot;name&quot;)info = &quot;&quot;&quot;-------- info of %s -----name: %sage: %djob: %ssalary: %s&quot;&quot;&quot;%(name,name,age,job,salary)print (info)</code></pre><p><strong>解释：</strong></p><p>在这里</p><ul><li>%s代表的是string</li><li>%d代表的是 digital</li><li>%f代表的是 float</li><li>int代表的是整型  integer</li></ul><p>注意，在定义age的时候，使用的强制类型转换，因为如果不进行强制类型定义的话，则输入的会使默认的字符类型</p><p>如果想要知道输入的值在程序运行的时候的是什么类型，则可以使用type函数进行查看</p><pre><code>print (type(name))</code></pre><p>因为python是一个强类型定义语言，所以在第一次赋值之后，这个变量的数据类型就固定了，要么强制转换，不然的话就一直是这个数据类型</p><p><strong>更高效简单的方法-format方式</strong></p><p>代码如下：</p><pre><code>name = input(&quot;name: &quot;)age = input(&quot;age: &quot;)job = input(&quot;job: &quot;)salary = input(&quot;salary: &quot;)info = &quot;&quot;&quot;--- info of {_name} ---name: {_name}age: {_age}job: {_job}salary: {_salary}&quot;&quot;&quot; .format(_name = name,            _age = age,            _job = job,            _salary = salary)print (info)</code></pre><p>在日常开发中，建议使用这种方式去格式化输出内容</p><h1 id="用户输入"><a href="#用户输入" class="headerlink" title="用户输入"></a>用户输入</h1><pre><code>username = input(&quot;username: &quot;)password = input(&quot;password: &quot;)print (username + &quot; &quot; + password )</code></pre><p>当使用input函数的时候，我们在输入内容的时候，所输入的内容是直接在屏幕明文显示的</p><p>因此，这里需要隐藏输入的明文显示，此时，使用标准库中的一个模块：getpass</p><p>标准库：直接import就能使用标准库中的模块，不需要再额外安装，因此在安装python的时候，就已经默认安装集成了这个标准库</p><p>我们从标准库中import getpass模块之后，直接调用它的方法</p><p>修改之后的代码如下所示：</p><pre><code>import getpassusername = input(&quot;username: &quot;)password = getpass.getpass(&quot;password: &quot;)print (username,password)</code></pre><p><strong>注意：</strong> getpass在pycharm中有bug，在进行验证的时候可以使用cmd来进行</p><p>输出如下：</p><pre><code>C:\Users\Administrator\PycharmProjects\python14\day1&gt;python password.pyusername: wxhpassword:wxh wxh</code></pre><p><strong>优化之后的代码：</strong></p><pre><code>import getpass_username = &quot;wxh&quot;_password = &quot;wxh123&quot;username = input(&quot;username: &quot;)password = getpass.getpass(&quot;password: &quot;)if username == _username and password == _password :    print (&quot;Welcome user {name} login...&quot;.format(name=username))    print (username,password)else:    print (&quot;Invalid username or password! &quot;)</code></pre><p>输出 如下：</p><pre><code>C:\Users\Administrator\PycharmProjects\python14\day1&gt;python password.pyusername: wxhpassword:Invalid username or password!C:\Users\Administrator\PycharmProjects\python14\day1&gt;python password.pyusername: wxhpassword:Welcome user wxh login...wxh wxh123C:\Users\Administrator\PycharmProjects\python14\day1&gt;</code></pre><h1 id="模块初始"><a href="#模块初始" class="headerlink" title="模块初始"></a>模块初始</h1><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><pre><code>wxh_age = 23print (type(wxh_age))message = &quot;Please input the number of wxh&apos;s age: &quot;guess_age = int(input (message))if guess_age == wxh_age:    print (&quot;yes,you got it. &quot;)elif guess_age &gt; wxh_age:    print (&quot;think smaller...&quot;)else:    print (&quot;think bigger...&quot;)print (&quot;the right answer is {Age}&quot;.format(Age=wxh_age))</code></pre><p>注意：当给变量赋值字符的时候，一定要记得带上引号，不带引号的话表示的是变量。</p><p>这段猜年龄的代码，没有循环效果，猜一次就要执行一次，接下来，我们添加循环功能</p><p>一次执行，猜三次，三次之后再退出</p><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>循环：循环执行</p><p>while:条件匹配循环<br>for：固定次数循环</p><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><blockquote><p>在这里：count = count +1 等价于：count +=1</p></blockquote><p>这里限制猜的次数为3次，如果三次中间有猜中的，直接break退出，不然只有当次数达到3次之后，才会退出这个循环。</p><p>执行之后的输出如下所示：</p><p><strong>代码如下：</strong></p><pre><code>wxh_age = 23message = &quot;Please input the number of wxh&apos;s age,input 00 to quit:  &quot;tag = Truecount = 0while tag:    guess_age = int(input(message))    if guess_age == 00:        break    elif guess_age == wxh_age:        print(&quot;Yes,you get it!&quot;)        break    elif guess_age &gt; wxh_age:        print(&quot;please guess smaller...&quot;)    else:        print(&quot;plwase guess bigger...&quot;)    count = count + 1    if count == 3:        tag = False        print (&quot;\n&quot;)        print (&quot;You have input too many times,quit now!&quot;)print (&quot;\n&quot;)print (&quot;The right age is:{Age} &quot;.format(Age=wxh_age))</code></pre><p>或者</p><pre><code>wxh_age = 23message = &quot;Please input the number of wxh&apos;s age,input 00 to quit:  &quot;tag = Truecount = 0while tag:    guess_age = int(input(message))    if guess_age == 00:        break    elif guess_age == wxh_age:        print(&quot;Yes,you get it!&quot;)        break    elif guess_age &gt; wxh_age:        print(&quot;please guess smaller...&quot;)    else:        print(&quot;plwase guess bigger...&quot;)    count = count + 1    if count == 3:        tag = False        print (&quot;\n&quot;)else:        print (&quot;You have input too many time,quit now!&quot;)print (&quot;\n&quot;)print (&quot;The right age is:{Age} &quot;.format(Age=wxh_age))</code></pre><p>注意，while也可以和else配合使用，当while所执行的条件不成立时，就会执行else块中的语句</p><p><strong>执行后的输出如下：</strong></p><pre><code>D:\software\python\python.exe C:/Users/Administrator/PycharmProjects/python14/day1/guess.pyPlease input the number of wxh&apos;s age,input 00 to quit:  24please guess smaller...Please input the number of wxh&apos;s age,input 00 to quit:  11plwase guess bigger...Please input the number of wxh&apos;s age,input 00 to quit:  28please guess smaller...You have input too many times,quit now!The right age is:23 Process finished with exit code 0</code></pre><p>and</p><pre><code>D:\software\python\python.exe C:/Users/Administrator/PycharmProjects/python14/day1/guess.pyPlease input the number of wxh&apos;s age,input 00 to quit:  11plwase guess bigger...Please input the number of wxh&apos;s age,input 00 to quit:  23Yes,you get it!The right age is:23 Process finished with exit code 0</code></pre><p>and</p><pre><code>D:\software\python\python.exe C:/Users/Administrator/PycharmProjects/python14/day1/guess.pyPlease input the number of wxh&apos;s age,input 00 to quit:  22plwase guess bigger...Please input the number of wxh&apos;s age,input 00 to quit:  00The right age is:23 Process finished with exit code 0</code></pre><p>将上述代码进行优化，添加重复的功能【达到3次之后，询问用户是否需要继续】</p><pre><code>num = 0while num &lt; 3:    guess_age = int(input(message))    if guess_age == 00:        break    elif guess_age == wxh_age:        print (&quot;Yes,you got it !!!&quot;)        break    elif guess_age &gt; wxh_age:        print (&quot;guess smaller...&quot;)    else:        print (&quot;guess bigger...&quot;)    num += 1    if num == 3:      message2 = &quot;you guess too three times, do you want continue? Y/N： &quot;      answer = input(message2)      if answer == &quot;Y&quot;:         num = 0      else:          breakprint (&quot;The answer is 23.&quot;)</code></pre><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>我们将上面的while循环使用for循环的方式进行重新编写</p><p>代码如下：</p><pre><code>wxh_age = 23message = &quot;Please input the number of wxh&apos;s age(input 00 to quit): &quot;for num in range(3):    guess_age = int(input(message))    if guess_age == 00:        break    elif guess_age == wxh_age:        print (&quot;Yes,you got it!&quot;)        break    elif guess_age &lt; wxh_age:        print (&quot;guess bigger...&quot;)    else:        print (&quot;guess smaller...&quot;)else:        print (&quot;you have tried too many times...&quot;)print (&quot;The right answer is 23 &quot;)</code></pre><p>输出数字代码：</p><pre><code>for i in range(0,10,2):    print (&quot;loop&quot;,i)</code></pre><p>注意，python中的步长是写在后面的，默认的步长是1</p><p>循环嵌套，查看效果【每大循环一次，就小循环一次】</p><p>代码如下：</p><pre><code>for i in range(3):    print (&quot;-------&quot; + str(i)+ &quot;------&quot;)    for j in range(3):        print (j)</code></pre><p>执行之后的输出如下所示：</p><pre><code>-------0------012-------1------012-------2------012</code></pre><h1 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h1><p><strong>编写登录接口</strong></p><ul><li>输入用户名密码【需要允许多对用户名密码】</li><li>认证成功之后，显示欢迎信息</li><li>输出三次密码之后进行锁定 【可以根据用户名进行检测，那么这个信息就需要保存在某一个地方】</li></ul><p><strong>多级菜单</strong></p><ul><li>三级菜单【省市县】【例如，浙江省–&gt;杭州市–&gt;xx县/区】</li><li>可依次选择进入各个子菜单</li><li>所需新知识点：列表，字典</li></ul><p>一打开程序，列出中国所有的省，选择一个省，列出下面所有的城市，选中一个城市，再列出下面所有的县</p><p>在任何一个级别，可以返回上一级</p><p>在任何一个级别的时候，可以整个退出程序，输入例如quit等退出程序</p><h1 id="作业完成"><a href="#作业完成" class="headerlink" title="作业完成"></a>作业完成</h1><p><strong>登录接口：</strong></p><p>代码如下：</p><p><strong>多级菜单：</strong></p><p>代码如下：</p>]]></content>
    
    <summary type="html">
    
      python基本用法
    
    </summary>
    
      <category term="编程语言" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"/>
    
      <category term="老男孩视频学习笔记" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/%E8%80%81%E7%94%B7%E5%AD%A9%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="day01" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/%E8%80%81%E7%94%B7%E5%AD%A9%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/day01/"/>
    
      <category term="Python基本用法" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/%E8%80%81%E7%94%B7%E5%AD%A9%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/day01/Python%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
    
    
      <category term="老男孩视频" scheme="http://yoursite.com/tags/%E8%80%81%E7%94%B7%E5%AD%A9%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>VPC+IDC构建企业混合云</title>
    <link href="http://yoursite.com/2018/06/07/VPC-IDC%E6%9E%84%E5%BB%BA%E4%BC%81%E4%B8%9A%E6%B7%B7%E5%90%88%E4%BA%91/"/>
    <id>http://yoursite.com/2018/06/07/VPC-IDC构建企业混合云/</id>
    <published>2018-06-07T11:38:39.000Z</published>
    <updated>2018-06-07T11:38:39.000Z</updated>
    
    <content type="html"><![CDATA[<font color="red"><strong>文章编写大纲：</strong></font><ul><li>是什么？结果导向，最终实现了什么样的架构？</li><li>为什么？为什么需要这套环境？</li><li>怎么做？如何实现？</li></ul><hr><p>参考文献：</p><ul><li><a href="https://help.aliyun.com/product/27782.html?spm=a2c4g.750001.3.5.2lfVeu" target="_blank" rel="noopener">高速通道-阿里云官方文档</a></li></ul><h1 id="目标结果-最终架构"><a href="#目标结果-最终架构" class="headerlink" title="目标结果-最终架构"></a>目标结果-最终架构</h1><h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><p>每个环境的情况和机房所在地</p><p><strong>混合云就绪</strong></p><ul><li>实现阿里公有云上海、杭州Region与线下IDC环境业务互连</li></ul><h2 id="承载业务"><a href="#承载业务" class="headerlink" title="承载业务"></a>承载业务</h2><h3 id="上海IDC机房承载业务"><a href="#上海IDC机房承载业务" class="headerlink" title="上海IDC机房承载业务"></a>上海IDC机房承载业务</h3><ul><li><p><strong>大数据分析平台业务</strong></p></li><li><p><strong>部分生产及办公应用系统</strong></p><ul><li>将从目前杭州阿里云环境迁移至此</li><li>主要系统有：</li></ul></li></ul><h3 id="上海阿里云环境承载业务"><a href="#上海阿里云环境承载业务" class="headerlink" title="上海阿里云环境承载业务"></a>上海阿里云环境承载业务</h3><h3 id="杭州IDC机房承载业务"><a href="#杭州IDC机房承载业务" class="headerlink" title="杭州IDC机房承载业务"></a>杭州IDC机房承载业务</h3><h3 id="杭州阿里云环境承载业务"><a href="#杭州阿里云环境承载业务" class="headerlink" title="杭州阿里云环境承载业务"></a>杭州阿里云环境承载业务</h3><ul><li><strong>生产系统</strong></li></ul><h2 id="线路"><a href="#线路" class="headerlink" title="线路"></a>线路</h2><p>如架构图所示，整个架构中有以下几条重要线路</p><ul><li><p>上海IDC机房至杭州IDC机房的专线连接</p></li><li><p>上海IDC机房内业务的BGP互联网出口带宽</p></li><li><p>GDS CX专线接入阿里云</p></li><li><p>GDS CX专线接入饿了么</p></li></ul><h1 id="为什么需要这套环境？-需求分析"><a href="#为什么需要这套环境？-需求分析" class="headerlink" title="为什么需要这套环境？-需求分析"></a>为什么需要这套环境？-需求分析</h1><h1 id="架构实现"><a href="#架构实现" class="headerlink" title="架构实现"></a>架构实现</h1><h2 id="项目进度时间轴"><a href="#项目进度时间轴" class="headerlink" title="项目进度时间轴"></a>项目进度时间轴</h2><h2 id="架构规划"><a href="#架构规划" class="headerlink" title="架构规划"></a>架构规划</h2><p><strong>网络设备及服务器：</strong></p><ul><li><p>网络设备</p></li><li><p>服务器：</p><ul><li>服务器总共120台</li><li>70台DELL R730</li><li>50台DELL R630</li></ul></li></ul><p><strong>线路</strong></p><p>默认情况下，本地IDC网络中心和专有网络之间不能通信，您可以通过以下途径打通本地IDC与VPC之间的通信：</p><ul><li>您可以使用高速通道的物理专线来连通本地IDC到阿里云的专线接入点，并建立虚拟边界路由器作为VPC到IDC的数据转发桥梁。详情参考专线接入。</li></ul><p><img src="http://picture.watchmen.xin/vpc/vpc_idc.png" alt=""></p><ul><li>您可以使用VPN网关来实现本地IDC网络中心与专有网络的互通，详情参考搭建VPN网关。</li></ul><h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><p>临时配置之后，写入配置文件当中，做自启动配置</p><p>vim /etc/rc.local</p><p>route add -net 10.11.0.0 netmask 255.255.0.0 gateway 10.10.10.254</p><h1 id="测试验收"><a href="#测试验收" class="headerlink" title="测试验收"></a>测试验收</h1><h2 id="专线带宽测试"><a href="#专线带宽测试" class="headerlink" title="专线带宽测试"></a>专线带宽测试</h2><p>专线带宽为2Gb，理论传输速率为：256MB/s</p><p>使用iperf命令进行测试，客户端指定发送一个5GB的数据包，每隔5秒钟输出一次传输状态，输出结果的显示单位为MB显示，并发3个线程发送</p><h3 id="上海IDC机房流入流量"><a href="#上海IDC机房流入流量" class="headerlink" title="上海IDC机房流入流量"></a>上海IDC机房流入流量</h3><font color="red"><strong>杭州IDC机房(10.10.10.11)–&gt;上海IDC机房(10.11.6.3)</strong></font><pre><code>[root@storage1 iperf-3.5]# iperf3  -c 10.11.6.3 -n 5000000000 -p 5201 -i 5 -f M -P 3 Connecting to host 10.11.6.3, port 5201[  5] local 10.10.10.11 port 44247 connected to 10.11.6.3 port 5201[  7] local 10.10.10.11 port 44248 connected to 10.11.6.3 port 5201[  9] local 10.10.10.11 port 44252 connected to 10.11.6.3 port 5201[ ID] Interval           Transfer     Bitrate         Retr  Cwnd[  5]   0.00-5.00   sec   482 MBytes  96.3 MBytes/sec  44120    824 KBytes       [  7]   0.00-5.00   sec   293 MBytes  58.6 MBytes/sec  460    553 KBytes       [  9]   0.00-5.00   sec   236 MBytes  47.1 MBytes/sec  473    454 KBytes       [SUM]   0.00-5.00   sec  1010 MBytes   202 MBytes/sec  45053             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]   5.00-10.00  sec   476 MBytes  95.3 MBytes/sec  46332    570 KBytes       [  7]   5.00-10.00  sec   305 MBytes  61.1 MBytes/sec    0    679 KBytes       [  9]   5.00-10.00  sec   257 MBytes  51.4 MBytes/sec    0    581 KBytes       [SUM]   5.00-10.00  sec  1.01 GBytes   208 MBytes/sec  46332             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  10.00-15.00  sec   471 MBytes  94.2 MBytes/sec  49245    694 KBytes       [  7]  10.00-15.00  sec   299 MBytes  59.7 MBytes/sec   18    641 KBytes       [  9]  10.00-15.00  sec   262 MBytes  52.4 MBytes/sec    6    595 KBytes       [SUM]  10.00-15.00  sec  1.01 GBytes   206 MBytes/sec  49269             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  15.00-20.00  sec   472 MBytes  94.5 MBytes/sec  49402    901 KBytes       [  7]  15.00-20.00  sec   290 MBytes  57.9 MBytes/sec   86    608 KBytes       [  9]  15.00-20.00  sec   272 MBytes  54.4 MBytes/sec   10    587 KBytes       [SUM]  15.00-20.00  sec  1.01 GBytes   207 MBytes/sec  49498             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  20.00-23.08  sec   309 MBytes   100 MBytes/sec  18564    571 KBytes       [  7]  20.00-23.08  sec   177 MBytes  57.3 MBytes/sec    0    680 KBytes       [  9]  20.00-23.08  sec   169 MBytes  54.7 MBytes/sec    0    635 KBytes       [SUM]  20.00-23.08  sec   654 MBytes   212 MBytes/sec  18564             - - - - - - - - - - - - - - - - - - - - - - - - -[ ID] Interval           Transfer     Bitrate         Retr[  5]   0.00-23.08  sec  2.16 GBytes  95.8 MBytes/sec  207663             sender[  5]   0.00-23.09  sec  2.16 GBytes  95.6 MBytes/sec                  receiver[  7]   0.00-23.08  sec  1.33 GBytes  59.1 MBytes/sec  564             sender[  7]   0.00-23.09  sec  1.33 GBytes  59.0 MBytes/sec                  receiver[  9]   0.00-23.08  sec  1.17 GBytes  51.8 MBytes/sec  489             sender[  9]   0.00-23.09  sec  1.17 GBytes  51.7 MBytes/sec                  receiver[SUM]   0.00-23.08  sec  4.66 GBytes   207 MBytes/sec  208716             sender[SUM]   0.00-23.09  sec  4.65 GBytes   206 MBytes/sec                  receiveriperf Done.</code></pre><font color="red"><strong>杭州阿里云(172.24.146.107)–&gt;上海IDC机房(10.11.0.11)</strong></font><p>因为阿里云主机，每台服务器都只配备一块千兆网卡，因此服务器的出口带宽是有限制的</p><p>所以在做测试时，我们同时启动3台阿里云主机进行测试，查看三台主机数据之和</p><p><strong>杭州阿里云-主机1(172.24.18.125)–&gt;上海IDC机房(10.11.6.3)</strong></p><pre><code>[root@app589 ~]# date;iperf3 -c 10.11.6.3 -n 5000000000 -p 5201 -i 5 -f M -P 3Wed Jun 13 15:46:37 CST 2018Connecting to host 10.11.6.3, port 5201[  5] local 172.24.18.125 port 48282 connected to 10.11.6.3 port 5201[  7] local 172.24.18.125 port 48284 connected to 10.11.6.3 port 5201[  9] local 172.24.18.125 port 48286 connected to 10.11.6.3 port 5201[ ID] Interval           Transfer     Bitrate         Retr  Cwnd[  5]   0.00-5.00   sec   119 MBytes  23.8 MBytes/sec   85    287 KBytes       [  7]   0.00-5.00   sec   149 MBytes  29.8 MBytes/sec  189    376 KBytes       [  9]   0.00-5.00   sec   137 MBytes  27.3 MBytes/sec   84    296 KBytes       [SUM]   0.00-5.00   sec   405 MBytes  80.9 MBytes/sec  358             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]   5.00-10.00  sec   104 MBytes  20.8 MBytes/sec    0    329 KBytes       [  7]   5.00-10.00  sec   132 MBytes  26.4 MBytes/sec    0    395 KBytes       [  9]   5.00-10.00  sec   115 MBytes  23.0 MBytes/sec    0    348 KBytes       [SUM]   5.00-10.00  sec   351 MBytes  70.2 MBytes/sec    0             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  10.00-15.00  sec  89.0 MBytes  17.8 MBytes/sec    5    250 KBytes       [  7]  10.00-15.00  sec   157 MBytes  31.4 MBytes/sec    4    419 KBytes       [  9]  10.00-15.00  sec   100 MBytes  20.1 MBytes/sec   14    184 KBytes       [SUM]  10.00-15.00  sec   346 MBytes  69.3 MBytes/sec   23             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  15.00-20.00  sec  89.7 MBytes  17.9 MBytes/sec    7    262 KBytes       [  7]  15.00-20.00  sec   157 MBytes  31.4 MBytes/sec    3    437 KBytes       [  9]  15.00-20.00  sec  79.3 MBytes  15.9 MBytes/sec    0    245 KBytes       [SUM]  15.00-20.00  sec   326 MBytes  65.2 MBytes/sec   10             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  20.00-25.00  sec  72.7 MBytes  14.5 MBytes/sec   22    154 KBytes       [  7]  20.00-25.00  sec   150 MBytes  30.1 MBytes/sec    8    464 KBytes       [  9]  20.00-25.00  sec  94.2 MBytes  18.8 MBytes/sec   10    303 KBytes       [SUM]  20.00-25.00  sec   317 MBytes  63.5 MBytes/sec   40             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  25.00-30.00  sec  67.9 MBytes  13.6 MBytes/sec    0    208 KBytes       [  7]  25.00-30.00  sec   153 MBytes  30.7 MBytes/sec   11    477 KBytes       [  9]  25.00-30.00  sec   114 MBytes  22.8 MBytes/sec    5    290 KBytes       [SUM]  25.00-30.00  sec   335 MBytes  67.1 MBytes/sec   16             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  30.00-35.00  sec  81.1 MBytes  16.2 MBytes/sec    0    297 KBytes       [  7]  30.00-35.00  sec   169 MBytes  33.7 MBytes/sec    0    502 KBytes       [  9]  30.00-35.00  sec   102 MBytes  20.4 MBytes/sec    3    301 KBytes       [SUM]  30.00-35.00  sec   352 MBytes  70.4 MBytes/sec    3             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  35.00-40.00  sec  78.4 MBytes  15.7 MBytes/sec   12    182 KBytes       [  7]  35.00-40.00  sec   176 MBytes  35.3 MBytes/sec   18    482 KBytes       [  9]  35.00-40.00  sec  94.6 MBytes  18.9 MBytes/sec    7    218 KBytes       [SUM]  35.00-40.00  sec   349 MBytes  69.9 MBytes/sec   37             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  40.00-45.00  sec  71.3 MBytes  14.3 MBytes/sec    0    233 KBytes       [  7]  40.00-45.00  sec   136 MBytes  27.3 MBytes/sec    7    414 KBytes       [  9]  40.00-45.00  sec  69.3 MBytes  13.9 MBytes/sec    2    208 KBytes       [SUM]  40.00-45.00  sec   277 MBytes  55.4 MBytes/sec    9             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  45.00-50.00  sec  78.3 MBytes  15.7 MBytes/sec    5    245 KBytes       [  7]  45.00-50.00  sec   148 MBytes  29.7 MBytes/sec    0    478 KBytes       [  9]  45.00-50.00  sec  82.2 MBytes  16.4 MBytes/sec    0    267 KBytes       [SUM]  45.00-50.00  sec   309 MBytes  61.8 MBytes/sec    5             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  50.00-55.00  sec  93.0 MBytes  18.6 MBytes/sec    0    281 KBytes       [  7]  50.00-55.00  sec   180 MBytes  36.0 MBytes/sec   10    550 KBytes       [  9]  50.00-55.00  sec   109 MBytes  21.9 MBytes/sec    1    342 KBytes       [SUM]  50.00-55.00  sec   382 MBytes  76.4 MBytes/sec   11             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  55.00-60.00  sec   157 MBytes  31.3 MBytes/sec    0    656 KBytes       [  7]  55.00-60.00  sec   208 MBytes  41.7 MBytes/sec    0    574 KBytes       [  9]  55.00-60.00  sec   117 MBytes  23.5 MBytes/sec    8    345 KBytes       [SUM]  55.00-60.00  sec   482 MBytes  96.5 MBytes/sec    8             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  60.00-64.77  sec   249 MBytes  52.2 MBytes/sec   10    796 KBytes       [  7]  60.00-64.77  sec   179 MBytes  37.5 MBytes/sec    2    566 KBytes       [  9]  60.00-64.77  sec   109 MBytes  22.8 MBytes/sec    6    345 KBytes       [SUM]  60.00-64.77  sec   536 MBytes   112 MBytes/sec   18             - - - - - - - - - - - - - - - - - - - - - - - - -[ ID] Interval           Transfer     Bitrate         Retr[  5]   0.00-64.77  sec  1.32 GBytes  20.8 MBytes/sec  146             sender[  5]   0.00-64.79  sec  1.32 GBytes  20.8 MBytes/sec                  receiver[  7]   0.00-64.77  sec  2.05 GBytes  32.4 MBytes/sec  252             sender[  7]   0.00-64.79  sec  2.05 GBytes  32.3 MBytes/sec                  receiver[  9]   0.00-64.77  sec  1.29 GBytes  20.4 MBytes/sec  140             sender[  9]   0.00-64.79  sec  1.29 GBytes  20.4 MBytes/sec                  receiver[SUM]   0.00-64.77  sec  4.66 GBytes  73.6 MBytes/sec  538             sender[SUM]   0.00-64.79  sec  4.65 GBytes  73.6 MBytes/sec                  receiveriperf Done.</code></pre><p><strong>杭州阿里云-主机2(172.24.18.126)–&gt;上海IDC机房(10.11.6.4)</strong></p><pre><code>[root@app590 iperf-3.5]# date;iperf3 -c 10.11.6.4 -n 5000000000 -p 5201 -i 5 -f M -P 3 Wed Jun 13 15:46:37 CST 2018Connecting to host 10.11.6.4, port 5201[  5] local 172.24.18.126 port 45744 connected to 10.11.6.4 port 5201[  7] local 172.24.18.126 port 45746 connected to 10.11.6.4 port 5201[  9] local 172.24.18.126 port 45748 connected to 10.11.6.4 port 5201[ ID] Interval           Transfer     Bitrate         Retr  Cwnd[  5]   0.00-5.00   sec   170 MBytes  33.9 MBytes/sec   95    482 KBytes       [  7]   0.00-5.00   sec   135 MBytes  27.0 MBytes/sec  106    318 KBytes       [  9]   0.00-5.00   sec   155 MBytes  30.9 MBytes/sec   32    437 KBytes       [SUM]   0.00-5.00   sec   459 MBytes  91.9 MBytes/sec  233             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]   5.00-10.00  sec   164 MBytes  32.8 MBytes/sec    0    501 KBytes       [  7]   5.00-10.00  sec   104 MBytes  20.8 MBytes/sec    1    327 KBytes       [  9]   5.00-10.00  sec   152 MBytes  30.3 MBytes/sec    0    464 KBytes       [SUM]   5.00-10.00  sec   420 MBytes  84.0 MBytes/sec    1             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  10.00-15.00  sec   165 MBytes  32.9 MBytes/sec    9    519 KBytes       [  7]  10.00-15.00  sec  92.7 MBytes  18.5 MBytes/sec    4    218 KBytes       [  9]  10.00-15.00  sec   181 MBytes  36.1 MBytes/sec    9    527 KBytes       [SUM]  10.00-15.00  sec   438 MBytes  87.6 MBytes/sec   22             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  15.00-20.00  sec   172 MBytes  34.4 MBytes/sec    7    515 KBytes       [  7]  15.00-20.00  sec  73.8 MBytes  14.8 MBytes/sec    9    223 KBytes       [  9]  15.00-20.00  sec   135 MBytes  27.0 MBytes/sec   25    361 KBytes       [SUM]  15.00-20.00  sec   381 MBytes  76.2 MBytes/sec   41             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  20.00-25.00  sec   179 MBytes  35.9 MBytes/sec    0    535 KBytes       [  7]  20.00-25.00  sec  69.4 MBytes  13.9 MBytes/sec   17    133 KBytes       [  9]  20.00-25.00  sec   115 MBytes  22.9 MBytes/sec   11    359 KBytes       [SUM]  20.00-25.00  sec   363 MBytes  72.7 MBytes/sec   28             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  25.00-30.00  sec   166 MBytes  33.2 MBytes/sec   14    533 KBytes       [  7]  25.00-30.00  sec  53.6 MBytes  10.7 MBytes/sec    8    147 KBytes       [  9]  25.00-30.00  sec   119 MBytes  23.7 MBytes/sec    5    342 KBytes       [SUM]  25.00-30.00  sec   338 MBytes  67.7 MBytes/sec   27             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  30.00-35.00  sec   185 MBytes  36.9 MBytes/sec    0    554 KBytes       [  7]  30.00-35.00  sec  53.9 MBytes  10.8 MBytes/sec    1    156 KBytes       [  9]  30.00-35.00  sec   126 MBytes  25.2 MBytes/sec    0    372 KBytes       [SUM]  30.00-35.00  sec   365 MBytes  73.0 MBytes/sec    1             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  35.00-40.00  sec   229 MBytes  45.9 MBytes/sec    0    857 KBytes       [  7]  35.00-40.00  sec  60.5 MBytes  12.1 MBytes/sec    9    178 KBytes       [  9]  35.00-40.00  sec   126 MBytes  25.2 MBytes/sec    6    269 KBytes       [SUM]  35.00-40.00  sec   416 MBytes  83.1 MBytes/sec   15             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  40.00-45.00  sec   295 MBytes  59.0 MBytes/sec    1    952 KBytes       [  7]  40.00-45.00  sec  69.2 MBytes  13.8 MBytes/sec    0    215 KBytes       [  9]  40.00-45.00  sec   106 MBytes  21.1 MBytes/sec    1    226 KBytes       [SUM]  40.00-45.00  sec   470 MBytes  94.0 MBytes/sec    2             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  45.00-50.00  sec   319 MBytes  63.8 MBytes/sec    4    800 KBytes       [  7]  45.00-50.00  sec  72.2 MBytes  14.4 MBytes/sec   10    222 KBytes       [  9]  45.00-50.00  sec  91.8 MBytes  18.4 MBytes/sec    4    259 KBytes       [SUM]  45.00-50.00  sec   483 MBytes  96.6 MBytes/sec   18             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  50.00-55.00  sec   267 MBytes  53.4 MBytes/sec    4    749 KBytes       [  7]  50.00-55.00  sec  75.8 MBytes  15.2 MBytes/sec   12    225 KBytes       [  9]  50.00-55.00  sec  89.2 MBytes  17.8 MBytes/sec    1    264 KBytes       [SUM]  50.00-55.00  sec   432 MBytes  86.4 MBytes/sec   17             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  55.00-57.53  sec   114 MBytes  45.2 MBytes/sec    1    598 KBytes       [  7]  55.00-57.53  sec  40.6 MBytes  16.0 MBytes/sec    0    236 KBytes       [  9]  55.00-57.53  sec  47.7 MBytes  18.9 MBytes/sec    0    272 KBytes       [SUM]  55.00-57.53  sec   203 MBytes  80.1 MBytes/sec    1             - - - - - - - - - - - - - - - - - - - - - - - - -[ ID] Interval           Transfer     Bitrate         Retr[  5]   0.00-57.53  sec  2.37 GBytes  42.2 MBytes/sec  135             sender[  5]   0.00-57.55  sec  2.37 GBytes  42.1 MBytes/sec                  receiver[  7]   0.00-57.53  sec   901 MBytes  15.7 MBytes/sec  177             sender[  7]   0.00-57.55  sec   900 MBytes  15.6 MBytes/sec                  receiver[  9]   0.00-57.53  sec  1.41 GBytes  25.1 MBytes/sec   94             sender[  9]   0.00-57.55  sec  1.41 GBytes  25.0 MBytes/sec                  receiver[SUM]   0.00-57.53  sec  4.66 GBytes  82.9 MBytes/sec  406             sender[SUM]   0.00-57.55  sec  4.65 GBytes  82.8 MBytes/sec                  receiveriperf Done.</code></pre><p><strong>杭州阿里云-主机3(172.24.146.107)–&gt;上海IDC机房(10.11.0.11)</strong></p><pre><code>[root@app548 ~]# date;iperf3 -c 10.11.0.11 -n 5000000000 -p 5201 -i 5 -f M -P 3Wed Jun 13 15:46:38 CST 2018Connecting to host 10.11.0.11, port 5201[  5] local 172.24.146.107 port 53912 connected to 10.11.0.11 port 5201[  7] local 172.24.146.107 port 53914 connected to 10.11.0.11 port 5201[  9] local 172.24.146.107 port 53916 connected to 10.11.0.11 port 5201[ ID] Interval           Transfer     Bitrate         Retr  Cwnd[  5]   0.00-5.00   sec   148 MBytes  29.6 MBytes/sec   45    416 KBytes       [  7]   0.00-5.00   sec   138 MBytes  27.6 MBytes/sec   91    386 KBytes       [  9]   0.00-5.00   sec   150 MBytes  30.0 MBytes/sec  119    307 KBytes       [SUM]   0.00-5.00   sec   436 MBytes  87.2 MBytes/sec  255             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]   5.00-10.00  sec   145 MBytes  28.9 MBytes/sec    0    444 KBytes       [  7]   5.00-10.00  sec   136 MBytes  27.2 MBytes/sec    0    423 KBytes       [  9]   5.00-10.00  sec  91.9 MBytes  18.4 MBytes/sec    8    228 KBytes       [SUM]   5.00-10.00  sec   373 MBytes  74.5 MBytes/sec    8             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  10.00-15.00  sec   200 MBytes  40.0 MBytes/sec    0    793 KBytes       [  7]  10.00-15.00  sec   108 MBytes  21.5 MBytes/sec   15    245 KBytes       [  9]  10.00-15.00  sec  61.2 MBytes  12.2 MBytes/sec   24    170 KBytes       [SUM]  10.00-15.00  sec   369 MBytes  73.8 MBytes/sec   39             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  15.00-20.00  sec   302 MBytes  60.4 MBytes/sec    1    913 KBytes       [  7]  15.00-20.00  sec  62.2 MBytes  12.4 MBytes/sec    3    192 KBytes       [  9]  15.00-20.00  sec  77.2 MBytes  15.4 MBytes/sec    0    238 KBytes       [SUM]  15.00-20.00  sec   441 MBytes  88.3 MBytes/sec    4             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  20.00-25.00  sec   282 MBytes  56.5 MBytes/sec    7    776 KBytes       [  7]  20.00-25.00  sec  67.3 MBytes  13.5 MBytes/sec    9    146 KBytes       [  9]  20.00-25.00  sec   119 MBytes  23.8 MBytes/sec   14    400 KBytes       [SUM]  20.00-25.00  sec   469 MBytes  93.7 MBytes/sec   30             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  25.00-30.00  sec   242 MBytes  48.5 MBytes/sec    7    662 KBytes       [  7]  25.00-30.00  sec  51.6 MBytes  10.3 MBytes/sec    1    163 KBytes       [  9]  25.00-30.00  sec   176 MBytes  35.3 MBytes/sec   13    383 KBytes       [SUM]  25.00-30.00  sec   470 MBytes  94.0 MBytes/sec   21             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  30.00-35.00  sec   228 MBytes  45.6 MBytes/sec    8    516 KBytes       [  7]  30.00-35.00  sec  59.0 MBytes  11.8 MBytes/sec    9    188 KBytes       [  9]  30.00-35.00  sec   134 MBytes  26.7 MBytes/sec    3    373 KBytes       [SUM]  30.00-35.00  sec   420 MBytes  84.1 MBytes/sec   20             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  35.00-40.00  sec   217 MBytes  43.4 MBytes/sec    0    683 KBytes       [  7]  35.00-40.00  sec  61.6 MBytes  12.3 MBytes/sec    9    191 KBytes       [  9]  35.00-40.00  sec   111 MBytes  22.2 MBytes/sec    2    307 KBytes       [SUM]  35.00-40.00  sec   390 MBytes  77.9 MBytes/sec   11             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  40.00-45.00  sec   223 MBytes  44.5 MBytes/sec    4    581 KBytes       [  7]  40.00-45.00  sec  55.3 MBytes  11.1 MBytes/sec    4    156 KBytes       [  9]  40.00-45.00  sec   118 MBytes  23.6 MBytes/sec    0    363 KBytes       [SUM]  40.00-45.00  sec   396 MBytes  79.1 MBytes/sec    8             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  45.00-50.00  sec   155 MBytes  31.0 MBytes/sec    3    399 KBytes       [  7]  45.00-50.00  sec  59.4 MBytes  11.9 MBytes/sec    4    185 KBytes       [  9]  45.00-50.00  sec   133 MBytes  26.7 MBytes/sec    5    411 KBytes       [SUM]  45.00-50.00  sec   348 MBytes  69.6 MBytes/sec   12             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  50.00-55.00  sec   127 MBytes  25.4 MBytes/sec   14    352 KBytes       [  7]  50.00-55.00  sec  73.3 MBytes  14.7 MBytes/sec    0    228 KBytes       [  9]  50.00-55.00  sec   127 MBytes  25.4 MBytes/sec   11    354 KBytes       [SUM]  50.00-55.00  sec   327 MBytes  65.4 MBytes/sec   25             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  55.00-58.86  sec   126 MBytes  32.5 MBytes/sec    0    402 KBytes       [  7]  55.00-58.86  sec  92.1 MBytes  23.9 MBytes/sec    0    351 KBytes       [  9]  55.00-58.86  sec   112 MBytes  29.1 MBytes/sec    3    352 KBytes       [SUM]  55.00-58.86  sec   330 MBytes  85.4 MBytes/sec    3             - - - - - - - - - - - - - - - - - - - - - - - - -[ ID] Interval           Transfer     Bitrate         Retr[  5]   0.00-58.86  sec  2.34 GBytes  40.7 MBytes/sec   89             sender[  5]   0.00-58.87  sec  2.34 GBytes  40.6 MBytes/sec                  receiver[  7]   0.00-58.86  sec   963 MBytes  16.4 MBytes/sec  145             sender[  7]   0.00-58.87  sec   962 MBytes  16.3 MBytes/sec                  receiver[  9]   0.00-58.86  sec  1.38 GBytes  24.0 MBytes/sec  202             sender[  9]   0.00-58.87  sec  1.38 GBytes  23.9 MBytes/sec                  receiver[SUM]   0.00-58.86  sec  4.66 GBytes  81.0 MBytes/sec  436             sender[SUM]   0.00-58.87  sec  4.65 GBytes  80.9 MBytes/sec                  receiveriperf Done.</code></pre><p>可以看到三台之和（73.6+82.8+80.9 = 237.3 MBytes/sec）与<strong><code>杭州IDC--&gt;上海IDC</code></strong>的测试结果（206 MBytes/sec）对比</p><h3 id="上海IDC机房流出流量"><a href="#上海IDC机房流出流量" class="headerlink" title="上海IDC机房流出流量"></a>上海IDC机房流出流量</h3><font color="red"><strong>上海IDC机房(10.11.6.3)–&gt;杭州IDC机房(10.10.10.11)</strong></font><pre><code>[root@bigdata003 ~]# iperf3  -c 10.10.10.11 -n 5000000000 -p 5201 -i 5 -f M -P 3Connecting to host 10.10.10.11, port 5201[  5] local 10.11.6.3 port 33654 connected to 10.10.10.11 port 5201[  7] local 10.11.6.3 port 33656 connected to 10.10.10.11 port 5201[  9] local 10.11.6.3 port 33658 connected to 10.10.10.11 port 5201[ ID] Interval           Transfer     Bitrate         Retr  Cwnd[  5]   0.00-5.00   sec   317 MBytes  63.3 MBytes/sec  407    650 KBytes       [  7]   0.00-5.00   sec   345 MBytes  69.0 MBytes/sec  1406    673 KBytes       [  9]   0.00-5.00   sec   447 MBytes  89.5 MBytes/sec  4490   1.29 MBytes       [SUM]   0.00-5.00   sec  1.08 GBytes   222 MBytes/sec  6303             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]   5.00-10.00  sec   336 MBytes  67.3 MBytes/sec    0    853 KBytes       [  7]   5.00-10.00  sec   338 MBytes  67.5 MBytes/sec    0    793 KBytes       [  9]   5.00-10.00  sec   449 MBytes  89.8 MBytes/sec    0   1.29 MBytes       [SUM]   5.00-10.00  sec  1.10 GBytes   225 MBytes/sec    0             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  10.00-15.00  sec   308 MBytes  61.5 MBytes/sec  536    655 KBytes       [  7]  10.00-15.00  sec   362 MBytes  72.5 MBytes/sec  1740    970 KBytes       [  9]  10.00-15.00  sec   444 MBytes  88.7 MBytes/sec  2608   1.29 MBytes       [SUM]  10.00-15.00  sec  1.09 GBytes   223 MBytes/sec  4884             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  15.00-20.00  sec   311 MBytes  62.3 MBytes/sec  114    799 KBytes       [  7]  15.00-20.00  sec   404 MBytes  80.8 MBytes/sec  314   1.02 MBytes       [  9]  15.00-20.00  sec   408 MBytes  81.5 MBytes/sec  290   1.29 MBytes       [SUM]  15.00-20.00  sec  1.10 GBytes   225 MBytes/sec  718             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  20.00-21.34  sec  82.5 MBytes  61.5 MBytes/sec   49    809 KBytes       [  7]  20.00-21.34  sec   108 MBytes  80.1 MBytes/sec    0   1.02 MBytes       [  9]  20.00-21.34  sec   111 MBytes  82.9 MBytes/sec  222   1.29 MBytes       [SUM]  20.00-21.34  sec   301 MBytes   224 MBytes/sec  271             - - - - - - - - - - - - - - - - - - - - - - - - -[ ID] Interval           Transfer     Bitrate         Retr[  5]   0.00-21.34  sec  1.32 GBytes  63.4 MBytes/sec  1106             sender[  5]   0.00-21.35  sec  1.32 GBytes  63.3 MBytes/sec                  receiver[  7]   0.00-21.34  sec  1.52 GBytes  72.9 MBytes/sec  3460             sender[  7]   0.00-21.35  sec  1.52 GBytes  72.8 MBytes/sec                  receiver[  9]   0.00-21.34  sec  1.82 GBytes  87.1 MBytes/sec  7610             sender[  9]   0.00-21.35  sec  1.81 GBytes  86.9 MBytes/sec                  receiver[SUM]   0.00-21.34  sec  4.66 GBytes   223 MBytes/sec  12176             sender[SUM]   0.00-21.35  sec  4.65 GBytes   223 MBytes/sec                  receiveriperf Done.</code></pre><font color="red"><strong>上海IDC机房(10.11.0.11)–&gt;杭州阿里云(172.24.146.107)</strong></font><pre><code>[root@lvs001 iperf-3.5]# iperf3  -c 172.24.146.107 -n 5000000000 -p 5201 -i 5 -f M -P 3Connecting to host 172.24.146.107, port 5201[  5] local 10.11.0.11 port 56078 connected to 172.24.146.107 port 5201[  7] local 10.11.0.11 port 56080 connected to 172.24.146.107 port 5201[  9] local 10.11.0.11 port 56082 connected to 172.24.146.107 port 5201[ ID] Interval           Transfer     Bitrate         Retr  Cwnd[  5]   0.00-5.00   sec   369 MBytes  73.9 MBytes/sec    3    930 KBytes       [  7]   0.00-5.00   sec   370 MBytes  74.1 MBytes/sec  154    932 KBytes       [  9]   0.00-5.00   sec   372 MBytes  74.5 MBytes/sec   18    936 KBytes       [SUM]   0.00-5.00   sec  1.09 GBytes   222 MBytes/sec  175             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]   5.00-10.00  sec   375 MBytes  75.0 MBytes/sec    0    884 KBytes       [  7]   5.00-10.00  sec   375 MBytes  74.9 MBytes/sec    0    925 KBytes       [  9]   5.00-10.00  sec   374 MBytes  74.7 MBytes/sec    0    905 KBytes       [SUM]   5.00-10.00  sec  1.10 GBytes   225 MBytes/sec    0             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  10.00-15.00  sec   374 MBytes  74.8 MBytes/sec    0    870 KBytes       [  7]  10.00-15.00  sec   374 MBytes  74.8 MBytes/sec    0    929 KBytes       [  9]  10.00-15.00  sec   374 MBytes  74.8 MBytes/sec    0    913 KBytes       [SUM]  10.00-15.00  sec  1.10 GBytes   224 MBytes/sec    0             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  15.00-20.00  sec   374 MBytes  74.8 MBytes/sec    0    915 KBytes       [  7]  15.00-20.00  sec   374 MBytes  74.9 MBytes/sec    0    899 KBytes       [  9]  15.00-20.00  sec   375 MBytes  74.9 MBytes/sec    0    915 KBytes       [SUM]  15.00-20.00  sec  1.10 GBytes   225 MBytes/sec    0             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  20.00-21.29  sec  96.2 MBytes  74.6 MBytes/sec    0    964 KBytes       [  7]  20.00-21.29  sec  96.0 MBytes  74.5 MBytes/sec    0    967 KBytes       [  9]  20.00-21.29  sec  96.7 MBytes  75.0 MBytes/sec    0    933 KBytes       [SUM]  20.00-21.29  sec   289 MBytes   224 MBytes/sec    0             - - - - - - - - - - - - - - - - - - - - - - - - -[ ID] Interval           Transfer     Bitrate         Retr[  5]   0.00-21.29  sec  1.55 GBytes  74.6 MBytes/sec    3             sender[  5]   0.00-21.30  sec  1.55 GBytes  74.5 MBytes/sec                  receiver[  7]   0.00-21.29  sec  1.55 GBytes  74.7 MBytes/sec  154             sender[  7]   0.00-21.30  sec  1.55 GBytes  74.6 MBytes/sec                  receiver[  9]   0.00-21.29  sec  1.55 GBytes  74.8 MBytes/sec   18             sender[  9]   0.00-21.30  sec  1.55 GBytes  74.6 MBytes/sec                  receiver[SUM]   0.00-21.29  sec  4.66 GBytes   224 MBytes/sec  175             sender[SUM]   0.00-21.30  sec  4.65 GBytes   224 MBytes/sec                  receiveriperf Done.</code></pre><p>因为无法做到完全同时执行，因此最终的累加数值会稍微偏大</p><h2 id="LVS公网带宽测试"><a href="#LVS公网带宽测试" class="headerlink" title="LVS公网带宽测试"></a>LVS公网带宽测试</h2><p>LVS使用100M带宽链路，理论传输速率为12.5MB/s</p><p>使用iperf命令进行测试，因带宽较小，这里客户端指定发送一个500M的数据包，每隔10秒钟输出一次传输状态，输出结果的显示单位为MB显示，并发3个线程发送</p><p>这里防火墙临时开放5201端口进行测试，在配置文件顶端添加以下条目然后重新加载配置</p><pre><code>-A INPUT -p tcp -m tcp --dport 5201 -j ACCEPT</code></pre><h3 id="流入流量"><a href="#流入流量" class="headerlink" title="流入流量"></a>流入流量</h3><font color="red"><strong>杭州IDC机房(10.11.0.11)–&gt;上海IDC机房-LVS1(103.13.244.19)</strong></font><pre><code>[root@storage1 ~]# iperf3  -c 103.13.244.19  -n 500000000 -p 5201 -i 10 -f M -P 3Connecting to host 103.13.244.19, port 5201[  5] local 115.239.208.210 port 32619 connected to 103.13.244.19 port 5201[  7] local 115.239.208.210 port 32621 connected to 103.13.244.19 port 5201[  9] local 115.239.208.210 port 32623 connected to 103.13.244.19 port 5201[ ID] Interval           Transfer     Bitrate         Retr  Cwnd[  5]   0.00-10.00  sec  51.9 MBytes  5.19 MBytes/sec  1935   56.6 KBytes       [  7]   0.00-10.00  sec  42.6 MBytes  4.26 MBytes/sec  1376   41.0 KBytes       [  9]   0.00-10.00  sec  38.2 MBytes  3.82 MBytes/sec  1195   31.1 KBytes       [SUM]   0.00-10.00  sec   133 MBytes  13.3 MBytes/sec  4506             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  10.00-20.00  sec  39.5 MBytes  3.95 MBytes/sec  133   48.1 KBytes       [  7]  10.00-20.00  sec  33.7 MBytes  3.37 MBytes/sec  251   38.2 KBytes       [  9]  10.00-20.00  sec  39.8 MBytes  3.98 MBytes/sec  145   43.8 KBytes       [SUM]  10.00-20.00  sec   113 MBytes  11.3 MBytes/sec  529             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  20.00-30.00  sec  39.0 MBytes  3.90 MBytes/sec  208   45.2 KBytes       [  7]  20.00-30.00  sec  35.2 MBytes  3.52 MBytes/sec  161   46.7 KBytes       [  9]  20.00-30.00  sec  39.0 MBytes  3.90 MBytes/sec  215   36.8 KBytes       [SUM]  20.00-30.00  sec   113 MBytes  11.3 MBytes/sec  584             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  30.00-40.00  sec  38.6 MBytes  3.86 MBytes/sec  171   55.1 KBytes       [  7]  30.00-40.00  sec  35.9 MBytes  3.59 MBytes/sec  247   36.8 KBytes       [  9]  30.00-40.00  sec  39.0 MBytes  3.90 MBytes/sec  228   29.7 KBytes       [SUM]  30.00-40.00  sec   114 MBytes  11.4 MBytes/sec  646             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  40.00-40.37  sec  1.56 MBytes  4.17 MBytes/sec    9   36.8 KBytes       [  7]  40.00-40.37  sec  2.14 MBytes  5.72 MBytes/sec    9   35.4 KBytes       [  9]  40.00-40.37  sec  1.09 MBytes  2.92 MBytes/sec   11   22.6 KBytes       [SUM]  40.00-40.37  sec  4.79 MBytes  12.8 MBytes/sec   29             - - - - - - - - - - - - - - - - - - - - - - - - -[ ID] Interval           Transfer     Bitrate         Retr[  5]   0.00-40.37  sec   171 MBytes  4.23 MBytes/sec  2456             sender[  5]   0.00-40.38  sec   168 MBytes  4.17 MBytes/sec                  receiver[  7]   0.00-40.37  sec   150 MBytes  3.70 MBytes/sec  2044             sender[  7]   0.00-40.38  sec   147 MBytes  3.65 MBytes/sec                  receiver[  9]   0.00-40.37  sec   157 MBytes  3.89 MBytes/sec  1794             sender[  9]   0.00-40.38  sec   156 MBytes  3.85 MBytes/sec                  receiver[SUM]   0.00-40.37  sec   477 MBytes  11.8 MBytes/sec  6294             sender[SUM]   0.00-40.38  sec   472 MBytes  11.7 MBytes/sec                  receiveriperf Done.</code></pre><h3 id="流出流量"><a href="#流出流量" class="headerlink" title="流出流量"></a>流出流量</h3><font color="red"><strong>上海IDC机房-LVS2(103.13.244.20)–&gt;杭州阿里云-NAT公网地址(114.55.124.112)</strong></font><pre><code>[root@lvs002 iperf-3.5]# iperf3  -c 114.55.124.112  -n 500000000 -p 5201 -i 10 -f M -P 3Connecting to host 114.55.124.112, port 5201[  5] local 103.13.244.20 port 37002 connected to 114.55.124.112 port 5201[  7] local 103.13.244.20 port 37004 connected to 114.55.124.112 port 5201[  9] local 103.13.244.20 port 37006 connected to 114.55.124.112 port 5201[ ID] Interval           Transfer     Bitrate         Retr  Cwnd[  5]   0.00-10.00  sec  35.9 MBytes  3.59 MBytes/sec  1278   43.8 KBytes       [  7]   0.00-10.00  sec  38.7 MBytes  3.87 MBytes/sec  1603   52.3 KBytes       [  9]   0.00-10.00  sec  50.3 MBytes  5.03 MBytes/sec  3930   58.0 KBytes       [SUM]   0.00-10.00  sec   125 MBytes  12.5 MBytes/sec  6811             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  10.00-20.00  sec  37.0 MBytes  3.70 MBytes/sec  332   45.2 KBytes       [  7]  10.00-20.00  sec  38.8 MBytes  3.88 MBytes/sec  131   66.5 KBytes       [  9]  10.00-20.00  sec  38.3 MBytes  3.83 MBytes/sec  366   26.9 KBytes       [SUM]  10.00-20.00  sec   114 MBytes  11.4 MBytes/sec  829             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  20.00-30.00  sec  36.7 MBytes  3.67 MBytes/sec  435   42.4 KBytes       [  7]  20.00-30.00  sec  40.1 MBytes  4.01 MBytes/sec  200   79.2 KBytes       [  9]  20.00-30.00  sec  35.9 MBytes  3.59 MBytes/sec  397   39.6 KBytes       [SUM]  20.00-30.00  sec   113 MBytes  11.3 MBytes/sec  1032             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  30.00-40.00  sec  35.2 MBytes  3.52 MBytes/sec  296   48.1 KBytes       [  7]  30.00-40.00  sec  45.6 MBytes  4.56 MBytes/sec  160   69.3 KBytes       [  9]  30.00-40.00  sec  32.2 MBytes  3.22 MBytes/sec  355   29.7 KBytes       [SUM]  30.00-40.00  sec   113 MBytes  11.3 MBytes/sec  811             - - - - - - - - - - - - - - - - - - - - - - - - -[  5]  40.00-41.04  sec  3.17 MBytes  3.06 MBytes/sec   51   33.9 KBytes       [  7]  40.00-41.04  sec  6.17 MBytes  5.95 MBytes/sec   11   63.6 KBytes       [  9]  40.00-41.04  sec  3.03 MBytes  2.92 MBytes/sec   15   24.0 KBytes       [SUM]  40.00-41.04  sec  12.4 MBytes  11.9 MBytes/sec   77             - - - - - - - - - - - - - - - - - - - - - - - - -[ ID] Interval           Transfer     Bitrate         Retr[  5]   0.00-41.04  sec   148 MBytes  3.61 MBytes/sec  2392             sender[  5]   0.00-41.05  sec   146 MBytes  3.56 MBytes/sec                  receiver[  7]   0.00-41.04  sec   169 MBytes  4.13 MBytes/sec  2105             sender[  7]   0.00-41.05  sec   168 MBytes  4.09 MBytes/sec                  receiver[  9]   0.00-41.04  sec   160 MBytes  3.89 MBytes/sec  5063             sender[  9]   0.00-41.05  sec   157 MBytes  3.82 MBytes/sec                  receiver[SUM]   0.00-41.04  sec   477 MBytes  11.6 MBytes/sec  9560             sender[SUM]   0.00-41.05  sec   471 MBytes  11.5 MBytes/sec                  receiveriperf Done.</code></pre><p>注意：阿里云NAT网关购买的带宽包为15M,这里的15M指的是出方向的带宽限制，入方向是没有限制的，通常会放大很多。</p><h2 id="服务器双网卡带宽分流"><a href="#服务器双网卡带宽分流" class="headerlink" title="服务器双网卡带宽分流"></a>服务器双网卡带宽分流</h2><p>因为每台服务器都做了bond，所以每一块网卡的流量应该是负载均衡的，抓取网卡bond之后，每块网卡对应的流量情况</p><p>因为杭州IDC机房的服务器都是做了网卡绑定的，无法很直观的测试，因此，我们在阿里云上进行测试，起用两台ECS服务器，都连接上海IDC机房的某一台服务器，传输数据，如果能达到200MB/s左右的传输速度，则证明绑定配置正确。</p><h2 id="带宽测试数据问题"><a href="#带宽测试数据问题" class="headerlink" title="带宽测试数据问题"></a>带宽测试数据问题</h2><h3 id="问题1-杭州阿里云和上海IDC之间的专线带宽测试数据不一致"><a href="#问题1-杭州阿里云和上海IDC之间的专线带宽测试数据不一致" class="headerlink" title="问题1. 杭州阿里云和上海IDC之间的专线带宽测试数据不一致"></a>问题1. 杭州阿里云和上海IDC之间的专线带宽测试数据不一致</h3><ul><li>杭州阿里云–&gt;上海IDC为：112MB/s</li><li>上海IDC–&gt;杭州阿里云为：224MB/s</li></ul><p><strong>问题解析：</strong> 多了一跳，应该只对网络延迟有影响，而不应该对带宽有影响</p><p><strong>问题解决：</strong></p><p>带宽传输速率（每秒传输速率）的计算公式为：<strong><code>总传输数据量/传输时长</code></strong></p><p>接下来，我们进行计算。</p><p>总传输量：4.65 GBytes，换算单位后为：4.65*1024=4761.6 MB</p><ul><li>杭州IDC–&gt;上海IDC的计算：4761.6/23.09 = 206.220 MB/s</li><li>杭州阿里云–&gt;上海IDC的计算：4761.6/42.53 = 111.959 MB/s</li></ul><p>由最上面完整的测试数据我们其实就可以看出，杭州阿里云比杭州IDC的传输时长多了将近一倍。</p><p>其他原因： 出口带宽就是1G，一次只能一百M左右，因此总量不变，传输时长也会发生变化</p><p><strong>在这里，总传输数据量是相等的，变化的是传输时长，而传输时长是由网络延迟引起的，下面是网络链路的下一跳及延迟情况</strong></p><p>杭州IDC–&gt;上海IDC（总延迟约为：14ms）</p><pre><code>[root@storage1 ~]# traceroute  -n -T -p 5201 10.11.6.3traceroute to 10.11.6.3 (10.11.6.3), 30 hops max, 60 byte packets 1  * * * 2  10.11.255.37  9.190 ms  9.885 ms  10.297 ms 3  10.11.6.3  4.633 ms  4.645 ms  4.563 ms</code></pre><p>杭州阿里云–&gt;上海IDC（总延迟约为：33ms）</p><pre><code>[root@app589 iperf-3.5]# traceroute  -n -T -p 5201 10.11.6.3traceroute to 10.11.6.3 (10.11.6.3), 30 hops max, 60 byte packets 1  * * * 2  * * * 3  192.168.123.9  15.164 ms  14.342 ms  14.762 ms 4  * * * 5  10.11.255.1  11.843 ms  12.275 ms  11.372 ms 6  10.11.6.3  7.050 ms  6.898 ms  6.867 ms</code></pre><p>下一跳192.168.123.9为VBR配置中的上海IDC侧IP地址</p><p>可以很清晰的看到，VBR之间的链路延迟高达15s左右，接近之后两跳（11+7=18）的总和，这也是导致传输时长接近一倍的原因</p><p>接下来，我们看下从上海IDC机房到两端的下一跳及延迟情况（上面的测试数据表明到两端的传输时间大致相等，都为21秒）</p><p>上海IDC–&gt;杭州IDC（总延迟约为：10ms）</p><pre><code>[root@bigdata003 ~]# traceroute  -n -T -p 5201 10.10.10.11traceroute to 10.10.10.11 (10.10.10.11), 30 hops max, 60 byte packets 1  10.11.6.254  5.162 ms  5.711 ms  6.272 ms 2  * * * 3  10.10.10.11  4.542 ms  4.510 ms  4.482 ms</code></pre><p>上海IDC–&gt;杭州阿里云（总延迟约为：17ms）</p><pre><code>[root@bigdata003 ~]# traceroute  -n -T -p 5201 172.24.146.107traceroute to 172.24.146.107 (172.24.146.107), 30 hops max, 60 byte packets 1  10.11.6.254  5.399 ms  5.950 ms  4.582 ms 2  * * * 3  10.11.255.30  4.435 ms  5.372 ms  4.901 ms 4  * * * 5  172.24.146.107  7.052 ms  6.770 ms  7.016 ms</code></pre><p>可以看到，上海IDC的回向下一跳不是指的192.168.123.10</p><p>那么，为什么两边的路由不一致呢？10.11.255.30是什么地址？</p><h3 id="问题2-杭州阿里云的NAT带宽包只有15Mb，为何也能跑出百M带宽的速率。"><a href="#问题2-杭州阿里云的NAT带宽包只有15Mb，为何也能跑出百M带宽的速率。" class="headerlink" title="问题2. 杭州阿里云的NAT带宽包只有15Mb，为何也能跑出百M带宽的速率。"></a>问题2. 杭州阿里云的NAT带宽包只有15Mb，为何也能跑出百M带宽的速率。</h3><p>问题解析：</p><ul><li>一条链路的实际带宽应该遵循瓶颈效应，实际速率应该为带宽最小的一端</li><li>杭州阿里云的NAT带宽包只有15Mb，为何也能跑出百M带宽的速率？</li></ul><p>问题解决：</p><p>登录阿里云控制台进行查看，发现NAT网关的实际带宽已经远远超出15M</p><h2 id="LVS配置"><a href="#LVS配置" class="headerlink" title="LVS配置"></a>LVS配置</h2><p>2台LVS是直接承载公网流量的</p>]]></content>
    
    <summary type="html">
    
      点我达-阿里云VPC+自建IDC构建企业混合云建设方案
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="运维架构" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E8%BF%90%E7%BB%B4%E6%9E%B6%E6%9E%84/"/>
    
      <category term="混合云" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E8%BF%90%E7%BB%B4%E6%9E%B6%E6%9E%84/%E6%B7%B7%E5%90%88%E4%BA%91/"/>
    
    
      <category term="混合云" scheme="http://yoursite.com/tags/%E6%B7%B7%E5%90%88%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>OSS从入门到实践</title>
    <link href="http://yoursite.com/2018/06/07/OSS%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2018/06/07/OSS从入门到实践/</id>
    <published>2018-06-07T07:50:51.000Z</published>
    <updated>2018-06-07T07:50:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考文献：</p><ul><li><a href="https://help.aliyun.com/product/31815.html?spm=a2c4g.750001.2.13.1OtZY6" target="_blank" rel="noopener">阿里云官方资料</a></li></ul><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>阿里云对象存储服务（Object Storage Service，简称 OSS），是阿里云提供的海量、安全、低成本、高可靠的云存储服务。它具有与平台无关的RESTful API接口，能够提供99.999999999%（11个9）的数据可靠性和99.99%的服务可用性。您可以在任何应用、任何时间、任何地点存储和访问任意类型的数据。</p><p>您可以使用阿里云提供的API/SDK接口或者OSS迁移工具轻松地将海量数据移入或移出阿里云OSS。数据存储到阿里云OSS以后，您可以选择标准类型（Standard）的阿里云OSS服务作为移动应用、大型网站、图片分享或热点音视频的主要存储方式，也可以选择成本更低、存储期限更长的低频访问类型（Infrequent Access）和归档类型（Archive）的阿里云OSS服务作为不经常访问数据的备份和归档。</p><p>您可以通过 OSS Learning Path 快速了解 OSS，学习相关的基础操作，并利用丰富的 API SDK 包和便捷工具进行二次开发。</p>]]></content>
    
    <summary type="html">
    
      OSS从入门到实践
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="公有云产品" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%85%AC%E6%9C%89%E4%BA%91%E4%BA%A7%E5%93%81/"/>
    
      <category term="阿里云" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%85%AC%E6%9C%89%E4%BA%91%E4%BA%A7%E5%93%81/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
      <category term="OSS" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%85%AC%E6%9C%89%E4%BA%91%E4%BA%A7%E5%93%81/%E9%98%BF%E9%87%8C%E4%BA%91/OSS/"/>
    
    
      <category term="tag1" scheme="http://yoursite.com/tags/tag1/"/>
    
  </entry>
  
  <entry>
    <title>网络专线</title>
    <link href="http://yoursite.com/2018/06/06/%E7%BD%91%E7%BB%9C%E4%B8%93%E7%BA%BF/"/>
    <id>http://yoursite.com/2018/06/06/网络专线/</id>
    <published>2018-06-06T06:47:50.000Z</published>
    <updated>2018-06-06T06:47:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考文献：</p><ul><li><a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E4%B8%93%E7%BA%BF" target="_blank" rel="noopener">百度百科</a></li></ul><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="什么是网络专线？"><a href="#什么是网络专线？" class="headerlink" title="什么是网络专线？"></a>什么是网络专线？</h2><p>笼统来说，网络专线就是为某个机构拉一条独立的网线，也就是一个独立的局域网，例如军事，银行等，让用户的数据传输变得可靠可信，专线的优点就是安全性好，QoS（ quality of service 服务质量）可以得到保证。不过，专线租用价格也相对比较高，而且管理也需要专业人员。</p><p><strong>网络专线主要有两种信道：</strong></p><ol><li><p>物理专用信道。物理专用信道就是在服务商到用户之间铺设有一条专用的线路，线路只给用户独立使用，其他的数据不能进入此线路，而一般的线路就允许多用户共享信道； 【独享物理线路的形式】</p></li><li><p>虚拟专用信道；虚拟专用信道就是在一般的信道上为用户保留一定的带宽，使用户可以独享这部分带宽，就像在公用信道上又开了一个通道，只让相应用户使用，而且用户的数据是加密的，以此来保证可靠性与安全性；【在共享物理上创建逻辑独享线路】</p></li></ol><p>这里连接的通道是用户端的出口网关设备（一般是路由器）到ISP的接入端这一段的线路。后续的上网还是通过ISP去实现</p><p>目前市面上的信道有：</p><ul><li>帧中继（Frame Relay）</li><li>数字数据网（DDN Digital Data Network）</li><li>异步传输模式（ATM Asynchronous Transfer Mode）</li><li>X.25（分组交换业务网）</li><li>第三代ADSL（非对称用户数字链路）</li><li>虚拟专用网络（VPN Virtual Private Network）以及E1等。</li></ul><h2 id="什么是互联网专线？"><a href="#什么是互联网专线？" class="headerlink" title="什么是互联网专线？"></a>什么是互联网专线？</h2><p>互联网专线接入业务是指为客户提供各种速率的专用链路（主要提供传输速率为2M及以上速率），直接连接IP骨干网络，实现方便快捷的高速互联网上网服务。互联网专线接入业务按照客户需求可提供更高速率的专线接入，主要有2Mb/s、10Mb/s、100Mb/s、1000Mb/s等等。</p><p><strong>和网络专线的区别</strong></p><blockquote><p>互联网专线跳过了ISP的环节，直接连接Internet骨干网络</p></blockquote><p><strong>主要特点</strong></p><p>1.与普通互联网接入相比，其特点是客户通过相对永久的通信线路接入Internet。</p><p>2.与拨号上网的最大区别是专线与Internet之间保持着永久、高速、稳定的连接，客户可以实现24小时对Internet的访问，随时获取全球信息资源，提高商务交易的效率。</p><p>3.专线客户拥有固定的真实IP地址，可以相对方便地向Internet上的其他客户提供信息服务。</p><p>4.专线具有误码率低，时延小的特点。</p><p>5.专有带宽的整条电路资源仅为一个客户服务，全程带宽完全独享。</p><h2 id="什么是裸光纤？"><a href="#什么是裸光纤？" class="headerlink" title="什么是裸光纤？"></a>什么是裸光纤？</h2><p>裸光纤就是指专线光纤。通俗又权威的说法：裸光纤就是中间没有连接/经过任何传输设备的光纤，也就是直通光缆。</p><p>一般来讲，用户向电信或其他公司租用裸光纤，就是指电信或其他公司只提供光纤物理通道，不提供数据处理等服务，整条光纤干线也不经过任何数据处理设备，由用户自行配置两地的收发设备。</p>]]></content>
    
    <summary type="html">
    
      网络专线知识从入门到实践
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="网络知识" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86/"/>
    
      <category term="网络专线" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86/%E7%BD%91%E7%BB%9C%E4%B8%93%E7%BA%BF/"/>
    
    
      <category term="网络专线" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E4%B8%93%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>磁盘性能测试</title>
    <link href="http://yoursite.com/2018/06/03/%E7%A3%81%E7%9B%98%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2018/06/03/磁盘性能测试/</id>
    <published>2018-06-03T08:29:10.000Z</published>
    <updated>2018-06-03T08:29:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>文献资料：</p><ul><li><p><a href="https://help.aliyun.com/document_detail/25382.html?spm=a2c4g.11186623.6.552.t1GC8q" target="_blank" rel="noopener">阿里云-ECS之-块存储性能</a></p></li><li><p><a href="https://github.com/axboe/fio" target="_blank" rel="noopener">fio项目主页</a></p></li></ul><h1 id="性能衡量指标"><a href="#性能衡量指标" class="headerlink" title="性能衡量指标"></a>性能衡量指标</h1><p>衡量存储产品的性能指标主要包括：</p><ul><li><p>IOPS </p></li><li><p>吞吐量</p></li><li><p>访问时延。</p></li></ul><p>IOPS和Throughput吞吐量两个参数是衡量存储性能的主要指标，两者在不同的情况下都能表示存储的性能状况，但应用的场景不尽相同。同时，两者之间也存在着相互的联系</p><h2 id="IOPS"><a href="#IOPS" class="headerlink" title="IOPS"></a>IOPS</h2><p>IOPS是Input/Output Operations per Second，即每秒能处理的I/O个数（也就是在一秒内，磁盘进行多少次 I/O 读写），用于表示块存储处理读写（输出/输入）的能力。<font color="red"><strong><code>如果要部署事务密集型应用，需要关注IOPS性能</code></strong></font>。</p><p><strong>ps:</strong>一次完整的读写（有读有写），才算一次</p><p>最普遍的IOPS性能指标是顺序操作和随机操作，如下表所示。</p><p><img src="http://picture.watchmen.xin/ECS/iops.png" alt="iops"></p><p>IOPS又可细分为如下几个指标：</p><ul><li>Toatal IOPS，混合读写和顺序随机I/O负载情况下的磁盘IOPS，这个与实际I/O情况最为相符，大多数应用关注此指标。</li><li>Random Read IOPS，100%随机读负载情况下的IOPS。</li><li>Random Write IOPS，100%随机写负载情况下的IOPS。</li><li>Sequential Read IOPS，100%顺序读负载情况下的IOPS。</li><li>Sequential Write IOPS，100%顺序写负载情况下的IOPS。</li></ul><h2 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h2><p>吞吐量是指单位时间内可以成功传输的数据数量。</p><p><font color="red"><strong><code>如果要部署大量顺序读写的应用，需要关注吞吐量</code></strong></font>。</p><p>磁盘的吞吐量，也就是每秒磁盘 I/O 的流量，即磁盘写入加上读出的数据的大小。</p><p><strong>IOPS 与吞吐量的关系</strong></p><blockquote><p>每秒 I/O 吞吐量＝ IOPS* 平均 I/O SIZE。</p><p>从公式可以看出： I/O SIZE 越大，IOPS 越高，那么每秒 I/O 的吞吐量就越高。因此，我们会认为 IOPS 和吞吐量的数值越高越好。实际上，对于一个磁盘来讲，这两个参数均有其最大值，而且这两个参数也存在着一定的关系。</p></blockquote><h2 id="访问延迟"><a href="#访问延迟" class="headerlink" title="访问延迟"></a>访问延迟</h2><p>访问时延是指块存储处理一个I/O需要的时间。</p><p>如果您的应用对时延比较敏感，比如数据库（过高的时延会导致应用报错），建议您使用固态硬盘介质的SSD云盘、SSD共享块存储或本地SSD盘类产品。</p><p>如果您的应用更偏重存储吞吐能力，对时延不太敏感，比如Hadoop离线计算等吞吐密集型应用，建议您使用本地HDD盘类产品，如d1或d1ne大数据型实例。</p><h1 id="云盘性能"><a href="#云盘性能" class="headerlink" title="云盘性能"></a>云盘性能</h1><p>这里以目前主流的阿里云云盘系列产品进行说明</p><h2 id="云盘性能-1"><a href="#云盘性能-1" class="headerlink" title="云盘性能"></a>云盘性能</h2><p>三种云盘的性能对比如下表所示。</p><p><img src="http://picture.watchmen.xin/ECS/compare1.png" alt="iops"></p><p><strong>注意：</strong></p><blockquote><p>SSD云盘的性能因数据块大小而异，数据块越小，吞吐量越小，IOPS越高，如下表所示。只有挂载到I/O优化的实例时，SSD云盘才能获得期望的IOPS性能。挂载到非I/O优化的实例时，SSD云盘无法获得期望的IOPS性能。</p></blockquote><p><img src="http://picture.watchmen.xin/ECS/ssdiops.png" alt="iops"></p><p><strong>单盘性能计算公式说明：</strong></p><ul><li>以单块SSD云盘最大IOPS计算公式为例说明：起步1200 IOPS，每GiB增加30 IOPS，最高20000 IOPS。</li><li>以单块SSD云盘最大吞吐量计算公式为例说明：起步80 MBps，每GiB增加0.5 MBps，上限为 300 MBps的吞吐量。</li></ul><p><strong>不同云盘的单路访问时延如下：</strong></p><ul><li>SSD云盘：0.5−2 ms</li><li>高效云盘：1−3 ms</li><li>普通云盘：5−10 ms</li></ul><h1 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h1><p>根据ECS实例的操作系统不同，您可以使用不同的工具测试块存储性能：</p><ul><li>Linux实例：可以使用DD、fio或sysbench等工具测试块存储性能。</li><li>Windows实例：可以使用fio、Iometer等工具测试块存储性能。</li></ul><p>本文以Linux实例和fio为例，说明如何使用fio测试块存储性能。在进行测试前，请确保块存储已经4 KiB对齐。</p><p><strong>注意：fio用于测试磁盘性能，不是文件系统，测试之前需要先把要测试的磁盘卸载掉，测试完后需格式化一遍再挂载上去。</strong></p><p><strong>警告：</strong></p><blockquote><p>测试裸盘可以获得真实的块存储盘性能，但直接测试裸盘会破坏文件系统结构，请在测试前提前做好数据备份。建议您只在新购无数据的ECS实例上使用工具测试块存储性能，避免造成数据丢失。</p></blockquote><p><strong>测试随机写IOPS，运行以下命令：</strong></p><pre><code>fio -direct=1 -iodepth=128 -rw=randwrite -ioengine=libaio -bs=4k -size=1G -numjobs=1 -runtime=1000 -group_reporting -filename=iotest -name=Rand_Write_Testing</code></pre><p><strong>测试随机读IOPS，运行以下命令：</strong></p><pre><code>fio -direct=1 -iodepth=128 -rw=randread -ioengine=libaio -bs=4k -size=1G -numjobs=1 -runtime=1000 -group_reporting -filename=iotest -name=Rand_Read_Testing</code></pre><p><strong>测试顺序写吞吐量，运行以下命令：</strong></p><pre><code>fio -direct=1 -iodepth=64 -rw=write -ioengine=libaio -bs=1024k -size=1G -numjobs=1 -runtime=1000 -group_reporting -filename=iotest -name=Write_PPS_Testing</code></pre><p><strong>测试顺序读吞吐量，运行以下命令：</strong></p><pre><code>fio -direct=1 -iodepth=64 -rw=read -ioengine=libaio -bs=1024k -size=1G -numjobs=1 -runtime=1000 -group_reporting -filename=iotest -name=Read_PPS_Testing</code></pre><p>下表以测试随机写IOPS的命令为例，说明命令中各种参数的含义。</p><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">direct=1</td><td style="text-align:left">表示测试时忽略I/O缓存，数据直写。</td></tr><tr><td style="text-align:left">-iodepth=128</td><td style="text-align:left">表示使用AIO时，同时发出I/O数的上限为128。</td></tr><tr><td style="text-align:left">-rw=randwrite</td><td style="text-align:left">表示测试时的读写策略为随机写（random writes）。作其它测试时可以设置为：<br> - randread（随机读random reads）<br>- read（顺序读sequential reads）<br>- write（顺序写sequential writes）<br>- randrw（混合随机读写mixed random reads and writes）。</td></tr><tr><td style="text-align:left">-ioengine=libaio</td><td style="text-align:left">表示测试方式为libaio（Linux AIO，异步I/O）。应用使用I/O通常有二种方式：同步和异步。同步的I/O一次只能发出一个I/O请求，等待内核完成才返回。这样对于单个线程iodepth总是小于1，但是可以透过多个线程并发执行来解决。通常会用 16−32 根线程同时工作将iodepth塞满。异步则通常使用libaio这样的方式一次提交一批I/O请求，然后等待一批的完成，减少交互的次数，会更有效率。</td></tr><tr><td style="text-align:left">-bs=4k</td><td style="text-align:left">表示单次I/O的块文件大小为4k。未指定该参数时的默认大小也是4k。测试IOPS时，建议将<strong><code>bs</code></strong>设置为一个比较小的值，如本示例中的4k。测试吞吐量时，建议将<strong><code>bs</code></strong>设置为一个较大的值，如本示例中的1024k。</td></tr><tr><td style="text-align:left">-size=1G</td><td style="text-align:left">表示测试文件大小为1G。</td></tr><tr><td style="text-align:left">-numjobs=1</td><td style="text-align:left">表示测试线程数为1。</td></tr><tr><td style="text-align:left">-runtime=1000</td><td style="text-align:left">表示测试时间为1000秒。如果未配置，则持续将前述-size指定大小的文件，以每次-bs值为分块大小写完</td></tr><tr><td style="text-align:left">-group_reporting</td><td style="text-align:left">表示测试结果里汇总每个进程的统计信息，而非以不同job汇总展示信息。</td></tr><tr><td style="text-align:left">-filename=iotest</td><td style="text-align:left">指定测试文件的名称，比如iotest。测试裸盘可以获得真实的磁盘性能，但直接测试裸盘会破坏文件系统结构，请在测试前提前做好数据备份。</td></tr><tr><td style="text-align:left">-name=Rand_Write_Testing</td><td style="text-align:left">表示测试任务名称为Rand_Write_Testing，可以随意设定。</td></tr></tbody></table><p>以下以一块800 GiB SSD云盘随机读IOPS性能的测试结果为例，说明如何理解fio测试结果。</p><pre><code>Rand_Read_Testing: (g=0): rw=randread, bs=4K-4K/4K-4K/4K-4K, ioengine=libaio, iodepth=128fio-2.2.8Starting 1 processJobs: 1 (f=1): [r(1)] [21.4% done] [80000KB/0KB/0KB /s] [20.0K/0/0 iops] [eta 00Jobs: 1 (f=1): [r(1)] [28.6% done] [80000KB/0KB/0KB /s] [20.0K/0/0 iops] [eta 00Jobs: 1 (f=1): [r(1)] [35.7% done] [80000KB/0KB/0KB /s] [20.0K/0/0 iops] [eta 00Jobs: 1 (f=1): [r(1)] [42.9% done] [80004KB/0KB/0KB /s] [20.1K/0/0 iops] [eta 00Jobs: 1 (f=1): [r(1)] [50.0% done] [80004KB/0KB/0KB /s] [20.1K/0/0 iops] [eta 00Jobs: 1 (f=1): [r(1)] [57.1% done] [80000KB/0KB/0KB /s] [20.0K/0/0 iops] [eta 00Jobs: 1 (f=1): [r(1)] [64.3% done] [80144KB/0KB/0KB /s] [20.4K/0/0 iops] [eta 00Jobs: 1 (f=1): [r(1)] [71.4% done] [80388KB/0KB/0KB /s] [20.1K/0/0 iops] [eta 00Jobs: 1 (f=1): [r(1)] [78.6% done] [80232KB/0KB/0KB /s] [20.6K/0/0 iops] [eta 00Jobs: 1 (f=1): [r(1)] [85.7% done] [80260KB/0KB/0KB /s] [20.7K/0/0 iops] [eta 00Jobs: 1 (f=1): [r(1)] [92.9% done] [80016KB/0KB/0KB /s] [20.4K/0/0 iops] [eta 00Jobs: 1 (f=1): [r(1)] [100.0% done] [80576KB/0KB/0KB /s] [20.2K/0/0 iops] [eta 00m:00s]Rand_Read_Testing: (groupid=0, jobs=1): err= 0: pid=9845: Tue Sep 26 20:21:01 2017  read : io=1024.0MB, bw=80505KB/s, iops=20126, runt= 13025msec    slat (usec): min=1, max=674, avg= 4.09, stdev= 6.11    clat (usec): min=172, max=82992, avg=6353.90, stdev=19137.18     lat (usec): min=175, max=82994, avg=6358.28, stdev=19137.16    clat percentiles (usec):     |  1.00th=[  454],  5.00th=[  668], 10.00th=[  812], 20.00th=[  996],     | 30.00th=[ 1128], 40.00th=[ 1256], 50.00th=[ 1368], 60.00th=[ 1480],     | 70.00th=[ 1624], 80.00th=[ 1816], 90.00th=[ 2192], 95.00th=[79360],     | 99.00th=[81408], 99.50th=[81408], 99.90th=[82432], 99.95th=[82432],     | 99.99th=[82432]    bw (KB  /s): min=79530, max=81840, per=99.45%, avg=80064.69, stdev=463.90    lat (usec) : 250=0.04%, 500=1.49%, 750=6.08%, 1000=12.81%    lat (msec) : 2=65.86%, 4=6.84%, 10=0.49%, 20=0.04%, 100=6.35%  cpu          : usr=3.19%, sys=10.95%, ctx=23746, majf=0, minf=160  IO depths    : 1=0.1%, 2=0.1%, 4=0.1%, 8=0.1%, 16=0.1%, 32=0.1%, &gt;=64=100.0%     submit    : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0%     complete  : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.1%     issued    : total=r=262144/w=0/d=0, short=r=0/w=0/d=0, drop=r=0/w=0/d=0     latency   : target=0, window=0, percentile=100.00%, depth=128Run status group 0 (all jobs):   READ: io=1024.0MB, aggrb=80504KB/s, minb=80504KB/s, maxb=80504KB/s, mint=13025msec, maxt=13025msecDisk stats (read/write):  vdb: ios=258422/0, merge=0/0, ticks=1625844/0, in_queue=1625990, util=99.30%</code></pre><p>输出结果中，主要关注以下这行内容：</p><pre><code>read : io=1024.0MB, bw=80505KB/s, iops=20126, runt= 13025msec</code></pre><p>这表示fio做了1 GiB I/O，速率约为80 MiB/s，总IOPS为20126，运行时间为13秒。由IOPS值可知，该SSD云盘的IOPS性能为 20126，而根据公式计算的数值为：</p><pre><code>min{1200+30 * 容量, 20000} = min{1200+30 * 800, 20000} = 20000</code></pre><p>测试结果与公式计算结果相近。</p>]]></content>
    
    <summary type="html">
    
      磁盘性能测试
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="服务器硬件" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A1%AC%E4%BB%B6/"/>
    
      <category term="磁盘" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A1%AC%E4%BB%B6/%E7%A3%81%E7%9B%98/"/>
    
    
      <category term="磁盘性能测试" scheme="http://yoursite.com/tags/%E7%A3%81%E7%9B%98%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>ECS从入门到实践</title>
    <link href="http://yoursite.com/2018/06/03/ECS%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2018/06/03/ECS从入门到实践/</id>
    <published>2018-06-03T02:33:20.000Z</published>
    <updated>2018-06-03T02:33:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考文献：</p><ul><li><a href="https://help.aliyun.com/product/25365.html?spm=a2c4g.750001.2.1.X5t4pr" target="_blank" rel="noopener">阿里云官方文档</a></li></ul><h1 id="ECS基础知识"><a href="#ECS基础知识" class="headerlink" title="ECS基础知识"></a>ECS基础知识</h1><h2 id="ECS-概述"><a href="#ECS-概述" class="headerlink" title="ECS 概述"></a>ECS 概述</h2><p>云服务器Elastic Compute Service（ECS）是阿里云提供的一种基础云计算服务。使用云服务器ECS就像使用水、电、煤气等资源一样便捷、高效。您无需提前采购硬件设备，而是根据业务需要，随时创建所需数量的云服务器ECS实例。在使用过程中，随着业务的扩展，您可以随时扩容磁盘、增加带宽。如果不再需要云服务器，也能随时释放资源，节省费用。</p><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><p>在使用ECS之前，需要了解以下概念</p><ul><li>地域和可用区：是指ECS资源所在的物理位置。</li></ul><ul><li>实例：等同于一台虚拟机，包含CPU、内存、操作系统、网络、磁盘等最基础的计算组件。</li></ul><ul><li>实例规格：是指实例的不同配置，包括vCPU核数、内存、网络性能等。实例规格决定了ECS实例的计算和存储能力。</li></ul><ul><li>镜像：是指ECS实例运行环境的模板，一般包括操作系统和预装的软件。操作系统支持多种Linux发行版本和不同的Windows版本。</li></ul><ul><li>块存储：包括基于分布式存储架构的 弹性块存储，以及基于物理机本地硬盘的 本地存储。</li></ul><ul><li>快照：是指某一个时间点上一块弹性块存储的数据备份。</li></ul><ul><li>网络类型：包括</li></ul><pre><code>- 专有网络：基于阿里云构建的一个隔离的网络环境，专有网络之间逻辑上彻底隔离。更多信息，请参考专有网络VPC。- 经典网络：统一部署在阿里云公共基础内，规划和管理由阿里云负责。</code></pre><ul><li>安全组：由同一地域内具有相同保护需求并相互信任的实例组成，是一种虚拟防火墙，用于设置不同实例的网络访问控制。</li></ul><ul><li>SSH密钥对：远程登录Linux ECS实例的验证方式，阿里云存储公钥，您需要自己妥善保管私钥。您也可以选择使用 用户名密码 验证登录Linux ECS实例。</li></ul><ul><li>IP地址：包括用于 内网通信 的内网IP或私有IP，以及用于访问Internet的公网IP。</li></ul><ul><li>弹性公网IP：可以与实例反复绑定或解绑的静态公网IP地址。</li></ul><ul><li>云服务器管理控制台：是指ECS的Web操作界面。</li></ul><h3 id="ECS的优势"><a href="#ECS的优势" class="headerlink" title="ECS的优势"></a>ECS的优势</h3><p>与普通的IDC机房或服务器厂商相比，阿里云提供的云服务器ECS具有以下优势：</p><ul><li>高可用性</li></ul><ul><li>安全</li></ul><ul><li>弹性</li></ul><p><strong>高可用性</strong></p><p>相较于普通的IDC机房以及服务器厂商，阿里云会使用更严格的IDC标准、服务器准入标准以及运维标准，以保证云计算整个基础框架的高可用性、数据的可靠性以及云服务器的高可用性。</p><p>在此基础之上，阿里云所提供的每个地域都存在多可用区。当您需要更高的可用性时，可以利用阿里云的多可用区搭建自己的主备服务或者双活服务。对于面向金融领域的两地三中心的解决方案，您也可以通过<strong><code>多地域和多可用区</code></strong>搭建出更高的可用性服务。其中包括容灾、备份等服务，阿里云都有非常成熟的解决方案。</p><p>在阿里云的整个框架下，这些服务可以非常平滑地进行切换，相关的信息可以在阿里云行业解决方案中找到。无论是两地三中心，还是电子商务以及视频服务等，都可以在阿里云找到对应的行业解决方案。</p><p>此外，阿里云提供了如下三项支持：</p><ul><li>提升可用性的产品和服务，包括云服务器、负载均衡、多备份数据库服务以及数据迁移服务DTS等。</li></ul><ul><li>行业合作伙伴以及生态合作伙伴，帮助您完成更高、更稳定的架构，并且保证服务的永续性。</li></ul><ul><li>多种多样的培训服务，让您从业务端到底层的基础服务端，在整条链路上实现高可用。</li></ul><p><strong>安全性</strong></p><p>选择了云计算，最关心的问题就是云计算的安全与稳定。阿里云近期通过了很多的国际安全标准认证，包括ISO27001、MTCS等，这些所有的安全合规都要求对于用户数据的私密性、用户信息的私密性以及用户隐私的保护都有非常严格的要求。对于云计算，推荐您使用阿里云专有网络。</p><ul><li>在阿里云专有网络之上，可以产生更多的业务可能性。您只需进行简单配置，就可在自己的业务环境下，与全球所有机房进行串接，从而提高了业务的灵活性、稳定性以及业务的可发展性。</li></ul><ul><li>对于原来拥有自建的IDC机房，也不会产生问题。阿里云专有网络可以拉专线到原有的IDC机房，形成混合云的架构。阿里云可以提供各种混合云的解决方案和非常多的网络产品，形成强大的网络功能，让您的业务更加灵活。结合阿里云的生态，您可以在云上发展出意想不到的业务生态。</li></ul><ul><li><p>阿里云专有网络更加稳定和安全。</p><ul><li><p>稳定性：业务搭建在专有网络上，而网络的基础设施将会不停进化，使您每天都拥有更新的网络架构以及更新的网络功能，使得您的业务永远保持在一个稳定的状态。专有网络允许您自由地分割、配置和管理自己的网络。</p></li><li><p>安全性：面对互联网上不断的攻击流量，专有网络天然就具备流量隔离以及攻击隔离的功能。业务搭建在专有网络上后，专有网络会为业务筑起第一道防线。</p></li></ul></li></ul><p>总之，专有网络提供了稳定、安全、快速交付、自主可控的网络环境。对于传统行业以及未接触到云计算的行业和企业而言，借助专有网络混合云的能力和混合云的架构，它们将享受云计算所带来的技术红利。</p><p><strong>弹性</strong></p><p>云计算最大的优势就在于弹性。目前，阿里云已拥有在数分钟内开出一家中型互联网公司所需要的IT资源的能力，这就能够保证大部分企业在云上所构建的业务都能够承受巨大的业务量压力。</p><ul><li><p>计算弹性</p><ul><li><p>纵向弹性，即单个服务器的配置变更。传统IDC模式下，很难做到对单个服务器进行变更配置。而对于阿里云，当您购买了云服务器或者存储的容量后，可以根据业务量的增长或者减少自由变更自己的配置。关于纵向弹性的具体应用，详情请参考 升降配。</p></li><li><p>横向弹性。对于游戏应用或直播平台出现的高峰期，若在传统的IDC模式下，您根本无法立即准备资源；而云计算却可以使用弹性的方式帮助客户度过这样的高峰。当业务高峰消失时，您可以将多余的资源释放掉，以减少业务成本的开支。利用横向的扩展和缩减，配合阿里云的弹性伸缩，完全可以做到定时定量的伸缩，或者按照业务的负载进行伸缩。关于横向弹性的具体应用，详情请参考 弹性伸缩。</p></li><li><p>存储弹性。阿里云拥有很强的存储弹性。当存储量增多时，对于传统的IDC方案，您只能不断去增加服务器，而这样扩展的服务器数量是有限的。在云计算模式下，将为您提供海量的存储，当您需要时可以直接购买，为存储提供最大保障。关于存储弹性的具体应用，详情请参考磁盘扩容。</p></li><li><p>网络弹性。云上的网络也具有非常大的灵活性。只要您购买了阿里云的专有网络，那么所有的网络配置与线下IDC机房配置可以是完全相同的，并且可以拥有更多的可能性。可以实现各个机房之间的互联互通，各个机房之间的安全域隔离，对于专有网络内所有的网络配置和规划都会非常灵活。关于网络弹性的具体应用，详情请参考专有网络。</p></li></ul></li></ul><p>总之，对于阿里云的弹性而言，是计算的弹性、存储的弹性、网络的弹性以及您对于业务架构重新规划的弹性。您可以使用任意方式去组合自己的业务，阿里云都能够满足您的需求。</p><h2 id="块存储"><a href="#块存储" class="headerlink" title="块存储"></a>块存储</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>阿里云为您的云服务器ECS提供了丰富的块存储产品类型，包括基于分布式存储架构的弹性块存储产品，以及基于物理机本地硬盘的本地存储产品。其中：</p><p>弹性块存储，是阿里云为云服务器ECS提供的数据块级别的随机存储，具有低时延、持久性、高可靠等性能，采用 三副本的分布式机制，为ECS实例提供99.9999999%的数据可靠性保证。可以随时创建或释放，也可以随时扩容。</p><p>本地存储，也称为本地盘，是指挂载在ECS云服务器所在物理机（宿主机）上的本地硬盘，是一种临时块存储。是专为对存储I/O性能有极高要求的业务场景而设计的存储产品。该类存储为实例提供块级别的数据访问能力，具有低时延、高随机IOPS、高吞吐量的I/O能力。</p><h3 id="块存储、对象存储、文件存储的区别"><a href="#块存储、对象存储、文件存储的区别" class="headerlink" title="块存储、对象存储、文件存储的区别"></a>块存储、对象存储、文件存储的区别</h3><p>阿里云目前主要提供三种数据存储产品，分别是块存储、文件存储（NAS）和 对象存储（OSS）。</p><p>三者区别如下：</p><ul><li>块存储：是阿里云为ECS云服务器提供的块设备，高性能、低时延，满足随机读写，可以像使用物理硬盘一样格式化建文件系统使用。可用于大部分通用业务场景下的数据存储。</li></ul><ul><li>对象存储（OSS，Object Storage Service）：可以理解是一个海量的存储空间，最适合存储互联网上产生的图片、短视频、音频等海量非结构化数据，您可以通过API在任何时间、任何地点访问对象存储里的数据。常用于互联网业务网站搭建、动静资源分离、CDN加速等业务场景。</li></ul><ul><li>文件存储（NAS，Network Attached Storage）：类似于对象存储，适合存储非结构化的海量数据。但是您需要通过标准的文件访问协议访问这些数据，比如 Linux 系统需要使用Network File System (NFS)协议，Windows系统需要使用Common Internet File System (CIFS)协议。您可以通过设置权限让不同的客户端同时访问同一份文件。文件存储适合企业部门间文件共享、广电非线编、高性能计算、Docker等业务场景。</li></ul><h2 id="块存储性能"><a href="#块存储性能" class="headerlink" title="块存储性能"></a>块存储性能</h2><p>衡量块存储产品的性能指标主要包括：<strong><code>IOPS、吞吐量和访问时延。</code></strong></p><p><strong>IOPS</strong></p><p>IOPS是Input/Output Operations per Second，即每秒能处理的I/O个数，用于表示块存储处理读写（输出/输入）的能力。如果要部署事务密集型应用，需要关注IOPS性能。</p><p>最普遍的IOPS性能指标是顺序操作和随机操作，如下表所示。</p><p><img src="http://picture.watchmen.xin/ECS/iops.png" alt="iops"></p><p><strong>吞吐量</strong></p><p>吞吐量是指单位时间内可以成功传输的数据数量。</p><p>如果要部署大量顺序读写的应用，需要关注吞吐量。</p><p><strong>访问延迟</strong></p><p>访问时延是指块存储处理一个I/O需要的时间。</p><p>如果您的应用对时延比较敏感，比如数据库（过高的时延会导致应用报错），建议您使用固态硬盘介质的SSD云盘、SSD共享块存储或本地SSD盘类产品。</p><p>如果您的应用更偏重存储吞吐能力，对时延不太敏感，比如Hadoop离线计算等吞吐密集型应用，建议您使用本地HDD盘类产品，如d1或d1ne大数据型实例。</p><p>不同云盘之间的性能测试对比请看文档：<a href="https://help.aliyun.com/document_detail/25382.html?spm=a2c4g.11186623.6.552.L3qKVk" target="_blank" rel="noopener">云盘性能对比部分</a></p><h2 id="弹性块存储"><a href="#弹性块存储" class="headerlink" title="弹性块存储"></a>弹性块存储</h2><p>弹性块存储，是阿里云为云服务器ECS提供的数据块级别的随机存储，具有低时延、持久性、高可靠等性能，采用 分布式三副本机制，为ECS实例提供99.9999999%的数据可靠性保证。弹性块存储支持在可用区内自动复制您的数据，防止意外硬件故障导致的数据不可用，保护您的业务免于组件故障的威胁。就像硬盘一样，您可以对挂载到ECS实例上的弹性块存储做分区、创建文件系统等操作，并持久存储数据。</p><p>您可以根据业务需要随时扩容弹性块存储。具体操作，请参见 扩容数据盘 和 扩容系统盘。您也可以为弹性块存储创建快照，备份数据。关于快照的更多信息，参见 快照。</p><p>根据是否可挂载到多台ECS实例，弹性块存储可以分为：</p><ul><li>云盘：一块云盘只能挂载到同一地域、同一可用区的一台ECS实例。</li></ul><ul><li>共享块存储：一块共享块存储可以同时挂载到同一地域、同一可用区的16台ECS实例。<blockquote><p>说明：共享块存储目前仍处于公测阶段，公测期间支持最多同时挂载到4台ECS实例上。</p></blockquote></li></ul><p><strong>总结：</strong></p><blockquote><p>也就是说弹性块存储在使用的时候，可以被当做是本地的磁盘，也可以是当做网络存储，类似NFS等挂载到多台ECS主机上使用<br>区分云盘和共享块存储的方式是能否被多台ECS同时挂载</p></blockquote><h3 id="云盘"><a href="#云盘" class="headerlink" title="云盘"></a>云盘</h3><p><strong>根据性能分类</strong></p><p>根据性能不同，云盘可以分为：</p><ul><li><p>ESSD云盘：又称增强型SSD云盘，是阿里云全新推出的超高性能的云盘产品。基于新一代分布式块存储架构，结合25GE网络和RDMA技术，为您提供单盘高达100万的随机读写能力和低至100μs的单路时延能力。ESSD云盘处于邀测阶段，更多信息，请参见 ESSD云盘FAQ。</p></li><li><p>SSD云盘：采用固态硬盘作为存储介质，能够提供稳定的高随机I/O、高数据可靠性的高性能存储。</p></li><li><p>高效云盘：采用固态硬盘与机械硬盘的混合介质作为存储介质。</p></li><li><p>普通云盘：采用机械磁盘作为存储介质</p></li></ul><p><strong>根据用途分类</strong></p><p>根据用途不同，云盘可以作：</p><ul><li><p>系统盘：生命周期与系统盘所挂载的ECS实例相同，随实例一起创建和释放。不可共享访问。系统盘可选的容量范围与实例所选的镜像有关：</p><ul><li>Linux（不包括CoreOS）+ FreeBSD：20 GiB ~ 500 GiB</li><li>CoreOS：30 GiB ~ 500 GiB</li><li>Windows：40 GiB ~ 500 GiB</li></ul></li></ul><ul><li>数据盘：可以与ECS实例同时创建，也可以 单独创建，不可共享访问。与ECS实例同时创建的数据盘，生命同期与实例相同，随实例一起创建和释放。单独创建的数据盘，可以 单独释放，也可以 设置为随ECS实例一起释放。数据盘的容量由云盘类型决定，详细信息，请参见 块存储性能。<br>作数据盘用时，云盘与共享块存储共享数据盘配额，即一台实例最多挂载16块数据盘。</li></ul><h3 id="共享块存储"><a href="#共享块存储" class="headerlink" title="共享块存储"></a>共享块存储</h3><p>共享块存储是一种支持<strong><code>多台ECS实例并发读写访问</code></strong>的数据块级存储设备，具备多并发、高性能、高可靠等特性，数据可靠性可以达到 99.9999999%。单块共享块存储最多可以同时挂载到16台ECS实例。目前尚处于公测阶段（申请公测资格），最多同时挂载到4台ECS实例。</p><p><strong><code>共享块存储只能作数据盘用</code></strong>，只能单独创建，可以共享访问。您可以 设置共享块存储与挂载的ECS实例一起释放。</p><p>根据性能不同，共享块存储可以分为：</p><ul><li>SSD共享块存储：采用固态硬盘作为存储介质，能够提供稳定的高随机I/O、高数据可靠性的高性能存储。</li></ul><ul><li>高效共享块存储：采用固态硬盘与机械硬盘的混合介质作为存储介质。</li></ul><p>挂载到实例上时，共享块存储与云盘共享数据盘配额，即一台实例最多挂载16块数据盘。</p><p>更多共享块存储的信息，请参见 共享块存储FAQ。</p><h2 id="网络和安全性"><a href="#网络和安全性" class="headerlink" title="网络和安全性"></a>网络和安全性</h2><h3 id="内网"><a href="#内网" class="headerlink" title="内网"></a>内网</h3><p>目前阿里云的云服务器ECS内网间，非I/O优化的实例为千兆共享的带宽，I/O优化的实例为万兆共享的带宽，没有特殊限制。由于是共享网络，因此无法保证带宽速度是不变的。</p><p>如果两台同地域的ECS实例之间需要传输数据，一般建议使用内网连接。同时，云数据库RDS、负载均衡（SLB） 以及 对象存储（OSS） 相关的内网速度也都是千兆共享的环境。这些产品间也都可以使用内网相互连接使用。</p><p>目前只要是相同地域下，SLB、云数据库RDS、OSS与ECS之间都可以直接内网互通连接使用。</p><h3 id="弹性网卡"><a href="#弹性网卡" class="headerlink" title="弹性网卡"></a>弹性网卡</h3><p>弹性网卡（ENI）是一种可以附加到专有网络VPC类型ECS实例上的虚拟网卡，通过弹性网卡，您可以实现高可用集群搭建、低成本故障转移和精细化的网络管理。所有地域均支持弹性网卡。</p><p><strong>使用场景</strong><br>弹性网卡适用于以下几种场景：</p><ul><li>搭建高可用集群</li></ul><p>满足系统高可用架构对于单实例多网卡的需求。</p><ul><li>低成本故障迁移</li></ul><p>通过将弹性网卡从ECS实例分离后再附加到另外一台ECS实例，将故障实例上的业务流量快速迁移到备用实例，实现服务快速恢复。</p><ul><li>精细化网络管理</li></ul><p>可以为实例配置多个弹性网卡，例如用于内部管理的弹性网卡及用于面向公网业务访问的弹性网卡等，完成管理数据和业务数据间的隔离。可以根据源IP、协议、端口等对每张弹性网卡配置精准的安全组规则，从而对每张弹性网卡的流量进行安全访问控制。</p><p><strong>弹性网卡类型</strong></p><p>弹性网卡分为两种类型：</p><p>主网卡</p><p>在创建专有网络实例时随实例默认创建的弹性网卡称作主网卡。主网卡的生命周期和实例保持一致，您无法分离主网卡与实例。</p><p>辅助网卡</p><p>您可以创建辅助网卡，并将其附加到实例上或从实例上分离。每个实例能附加的网卡上限与实例规格相关，详细信息，请参考 实例规格族。</p><p><strong>弹性网卡属性</strong></p><pre><code>属性    数量主私有IP地址    1个MAC地址    1个安全组    至少1个，最多5个描述信息    1个网卡名称    1个</code></pre><p><strong>限制约束</strong></p><p>使用弹性网卡有如下限制：</p><ul><li>一个账号在一个地域内默认最多可创建100个弹性网卡。如果需要更多，请 提交工单 申请。</li></ul><ul><li>ECS实例与弹性网卡必须在同一VPC的同一可用区中，可以分属于不同交换机。</li></ul><ul><li>每台实例允许附加的弹性网卡数量由实例规格决定。详细信息，请参见 实例规格族。</li></ul><ul><li>非I/O优化实例规格不支持弹性网卡。</li></ul><ul><li>您不能在一个实例上附加多个弹性网卡来提高实例带宽。<blockquote><p>说明：实例的带宽能力由实例规格决定。</p></blockquote></li></ul><h3 id="安全组"><a href="#安全组" class="headerlink" title="安全组"></a>安全组</h3><p>安全组是一个逻辑上的分组，这个分组是由同一个地域（Region）内具有相同安全保护需求并相互信任的实例组成。<strong><code>每个实例至少属于一个安全组，在创建的时候就需要指定</code></strong>。同一安全组内的实例之间网络互通，不同安全组的实例之间默认内网不通。可以授权两个安全组之间互访。</p><p>安全组是一种虚拟防火墙，具备状态检测包过滤功能。安全组用于设置单台或多台云服务器的网络访问控制，它是重要的网络安全隔离手段，用于在云端划分安全域。</p><p><strong>安全组限制</strong></p><ul><li>单个安全组内的实例个数不能超过 1000。如果您有超过 1000 个实例需要内网互访，可以将他们分配到多个安全组内，并通过互相授权的方式允许互访。</li></ul><ul><li>每个实例最多可以加入 5 个安全组。</li></ul><ul><li>每个用户的安全组最多 100 个。</li></ul><ul><li>对安全组的调整操作，对用户的服务连续性没有影响。</li></ul><ul><li>安全组是有状态的。如果数据包在 Outbound 方向是被允许的，那么对应的此连接在 Inbound 方向也是允许的。</li></ul><ul><li>安全组的网络类型分为经典网络和专有网络。</li></ul><pre><code>- 经典网络类型的实例可以加入同一地域（Region）下经典网络类型的安全组。- 专有网络类型的实例可以加入同一专有网络（VPC）下的安全组。</code></pre><p><strong>安全组规则</strong></p><p>安全组规则可以允许或者禁止与安全组相关联的云服务器 ECS 实例的公网和内网的入出方向的访问。</p><p>您可以随时授权和取消安全组规则。您的变更安全组规则会自动应用于与安全组相关联的ECS实例上。</p><p>在设置安全组规则的时候，安全组的规则务必简洁。如果您给一个实例分配多个安全组，则该实例可能会应用多达数百条规则。访问该实例时，可能会出现网络不通的问题。</p><p><strong>安全组规则限制</strong></p><p>每个安全组最多有 100 条安全组规则。</p><h3 id="DDOS基础防护"><a href="#DDOS基础防护" class="headerlink" title="DDOS基础防护"></a>DDOS基础防护</h3><p>阿里云云盾默认为ECS实例免费提供5 Gbit/s恶意流量攻击，即 DDoS基础防护能力。这一功能可以有效防止云服务器ECS实例受到恶意攻击，从而保证ECS系统的稳定，即当流入ECS实例的流量超出实例规格对应的限制时，云盾就会帮助ECS实例限流，避免ECS系统出现问题。</p><h1 id="企业版入门"><a href="#企业版入门" class="headerlink" title="企业版入门"></a>企业版入门</h1><p>企业级用户在购买和使用云服务器ECS实例时，通常需考虑如下几点：</p><ul><li><p>配置选型</p></li><li><p>估算成本</p></li><li><p>网络规划</p></li><li><p>配置安全组</p></li><li><p>制定快照策略</p></li><li><p>镜像迁移</p></li><li><p>用负载均衡实现ECS的高可用性</p></li></ul><h2 id="配置选型"><a href="#配置选型" class="headerlink" title="配置选型"></a>配置选型</h2><p>参考资料：<a href="https://help.aliyun.com/document_detail/58291.html?spm=a2c4g.11186623.6.604.XRqStZ" target="_blank" rel="noopener">阿里云官方资料</a></p><h2 id="实例规格族"><a href="#实例规格族" class="headerlink" title="实例规格族"></a>实例规格族</h2><p>实例是能够为您的业务提供计算服务的最小单位，它是以一定的规格来为您提供相应的计算能力的。</p><p>根据业务场景和使用场景，ECS实例可以分为多种规格族。同一个规格族里，根据CPU和内存的配置，可以分为多种不同的规格。 ECS实例规格定义了实例的CPU和内存（包括CPU型号、主频等）这两个基本属性。但是，ECS实例只有同时配合块存储、镜像和网络类型，才能唯一确定一台实例的具体服务形态。</p><h1 id="用户指南"><a href="#用户指南" class="headerlink" title="用户指南"></a>用户指南</h1><h2 id="安全组-1"><a href="#安全组-1" class="headerlink" title="安全组"></a>安全组</h2><h3 id="安全组限制"><a href="#安全组限制" class="headerlink" title="安全组限制"></a>安全组限制</h3><ul><li>单个安全组内的实例个数不能超过 1000。如果您有超过 1000 个实例需要内网互访，可以将他们分配到多个安全组内，并通过互相授权的方式允许互访。</li></ul><ul><li>每个实例最多可以加入 5 个安全组。</li></ul><ul><li>每个用户的安全组最多 100 个。</li></ul><ul><li>对安全组的调整操作，对用户的服务连续性没有影响。</li></ul><ul><li>安全组是有状态的。如果数据包在 Outbound 方向是被允许的，那么对应的此连接在 Inbound 方向也是允许的。</li></ul><ul><li>安全组的网络类型分为经典网络和专有网络。</li></ul><pre><code>- 经典网络类型的实例可以加入同一地域（Region）下经典网络类型的安全组。- 专有网络类型的实例可以加入同一专有网络（VPC）下的安全组。</code></pre><ul><li>每个安全组最多有 100 条安全组规则。</li></ul><h3 id="安全组注意事项"><a href="#安全组注意事项" class="headerlink" title="安全组注意事项"></a>安全组注意事项</h3><ul><li>出方向的端口25默认受限，无法通过安全组规则打开，但是您可以 <a href="https://help.aliyun.com/knowledge_detail/56130.html" target="_blank" rel="noopener">申请解封端口25</a>。</li></ul><h3 id="安全组实践的基本建议"><a href="#安全组实践的基本建议" class="headerlink" title="安全组实践的基本建议"></a>安全组实践的基本建议</h3><p>在开始安全组的实践之前，下面有一些基本的建议：</p><ul><li>最重要的规则：安全组应作为白名单使用。</li></ul><ul><li>开放应用出入规则时应遵循“最小授权”原则，例如，您可以选择开放具体的端口（如 80 端口）。</li></ul><ul><li>不应使用一个安全组管理所有应用，因为不同的分层一定有不同的需求。</li></ul><ul><li>对于分布式应用来说，不同的应用类型应该使用不同的安全组，例如，您应对 Web、Service、Database、Cache 层使用不同的安全组，暴露不同的出入规则和权限。</li></ul><ul><li>没有必要为每个实例单独设置一个安全组，控制管理成本。</li></ul><ul><li>优先考虑 VPC 网络。</li></ul><ul><li>不需要公网访问的资源不应提供公网 IP。</li></ul><ul><li>尽可能保持单个安全组的规则简洁。因为一个实例最多可以加入 5 个安全组，一个安全组最多可以包括 100 个安全组规则，所以一个实例可能同时应用数百条安全组规则。您可以聚合所有分配的安全规则以判断是否允许流入或留出，但是，如果单个安全组规则很复杂，就会增加管理的复杂度。所以，应尽可能地保持单个安全组的规则简洁。</li></ul><ul><li>调整线上的安全组的出入规则是比较危险的动作。如果您无法确定，不应随意更新安全组出入规则的设置。阿里云的控制台提供了克隆安全组和安全组规则的功能。如果您想要修改线上的安全组和规则，您应先克隆一个安全组，再在克隆的安全组上进行调试，从而避免直接影响线上应用。</li></ul><h3 id="设置安全组规则"><a href="#设置安全组规则" class="headerlink" title="设置安全组规则"></a>设置安全组规则</h3><h4 id="设置安全组的入网规则"><a href="#设置安全组的入网规则" class="headerlink" title="设置安全组的入网规则"></a>设置安全组的入网规则</h4><p><strong>不要使用 0.0.0.0/0 的入网规则</strong></p><p>允许全部入网访问是经常犯的错误。使用 0.0.0.0/0 意味着所有的端口都对外暴露了访问权限。这是非常不安全的。正确的做法是，先拒绝所有的端口对外开放。安全组应该是白名单访问。例如，如果您需要暴露 Web 服务，默认情况下可以只开放 80、8080 和 443 之类的常用TCP端口，其它的端口都应关闭。</p><pre><code>{ &quot;IpProtocol&quot; : &quot;tcp&quot;, &quot;FromPort&quot; : &quot;80&quot;, &quot;ToPort&quot; : &quot;80&quot;, &quot;SourceCidrIp&quot; : &quot;0.0.0.0/0&quot;, &quot;Policy&quot;: &quot;accept&quot;} ,{ &quot;IpProtocol&quot; : &quot;tcp&quot;, &quot;FromPort&quot; : &quot;8080&quot;, &quot;ToPort&quot; : &quot;8080&quot;, &quot;SourceCidrIp&quot; : &quot;0.0.0.0/0&quot;, &quot;Policy&quot;: &quot;accept&quot;} ,{ &quot;IpProtocol&quot; : &quot;tcp&quot;, &quot;FromPort&quot; : &quot;443&quot;, &quot;ToPort&quot; : &quot;443&quot;, &quot;SourceCidrIp&quot; : &quot;0.0.0.0/0&quot;, &quot;Policy&quot;: &quot;accept&quot;} ,</code></pre><p><strong>关闭不需要的入网规则</strong></p><p>如果您当前使用的入规则已经包含了 0.0.0.0/0，您需要重新审视自己的应用需要对外暴露的端口和服务。如果确定不想让某些端口直接对外提供服务，您可以加一条拒绝的规则。比如，如果您的服务器上安装了 MySQL 数据库服务，默认情况下您不应该将 3306 端口暴露到公网，此时，您可以添加一条拒绝规则，如下所示，并将其优先级设为100，即优先级最低。</p><pre><code>{ &quot;IpProtocol&quot; : &quot;tcp&quot;, &quot;FromPort&quot; : &quot;3306&quot;, &quot;ToPort&quot; : &quot;3306&quot;, &quot;SourceCidrIp&quot; : &quot;0.0.0.0/0&quot;, &quot;Policy&quot;: &quot;drop&quot;, Priority: 100} ,</code></pre><p>上面的调整会导致所有的端口都不能访问 3306 端口，极有可能会阻止您正常的业务需求。此时，您可以通过授权另外一个安全组的资源进行入规则访问。</p><p><strong>授权另外一个安全组入网访问</strong></p><p>不同的安全组按照最小原则开放相应的出入规则。对于不同的应用分层应该使用不同的安全组，不同的安全组应有相应的出入规则。</p><p>例如，如果是分布式应用，您会区分不同的安全组，但是，不同的安全组可能网络不通，此时您不应该直接授权 IP 或者 CIDR 网段，而是直接授权另外一个安全组 ID 的所有的资源都可以直接访问。比如，您的应用对 Web、Database 分别创建了不同的安全组：sg-web 和 sg-database。在sg-database 中，您可以添加如下规则，授权所有的 sg-web 安全组的资源访问您的 3306 端口。</p><pre><code>{ &quot;IpProtocol&quot; : &quot;tcp&quot;, &quot;FromPort&quot; : &quot;3306&quot;, &quot;ToPort&quot; : &quot;3306&quot;, &quot;SourceGroupId&quot; : &quot;sg-web&quot;, &quot;Policy&quot;: &quot;accept&quot;, Priority: 2} ,</code></pre><p><strong>授权另外一个 CIDR 可以入网访问</strong></p><p>经典网络中，因为网段不太可控，建议您使用安全组 ID 来授信入网规则。</p><p>VPC 网络中，您可以自己通过不同的 VSwitch 设置不同的 IP 域，规划 IP 地址。所以，在 VPC 网络中，您可以默认拒绝所有的访问，再授信自己的专有网络的网段访问，直接授信可以相信的 CIDR 网段。</p><pre><code>{ &quot;IpProtocol&quot; : &quot;icmp&quot;, &quot;FromPort&quot; : &quot;-1&quot;, &quot;ToPort&quot; : &quot;-1&quot;, &quot;SourceCidrIp&quot; : &quot;10.0.0.0/24&quot;, Priority: 2} ,{ &quot;IpProtocol&quot; : &quot;tcp&quot;, &quot;FromPort&quot; : &quot;0&quot;, &quot;ToPort&quot; : &quot;65535&quot;, &quot;SourceCidrIp&quot; : &quot;10.0.0.0/24&quot;, Priority: 2} ,{ &quot;IpProtocol&quot; : &quot;udp&quot;, &quot;FromPort&quot; : &quot;0&quot;, &quot;ToPort&quot; : &quot;65535&quot;, &quot;SourceCidrIp&quot; : &quot;10.0.0.0/24&quot;, Priority: 2} ,</code></pre><p><strong>总结：</strong></p><ol><li>安全组的实质是白名单</li><li>不适用0.0.0.0/0的入网规则</li><li>如果已经存在了0.0.0.0/0这种规则，那么需要设置关闭不安全的入网规则，例如关闭3306端口等，这里需要设置优先级为最小值100</li><li>不同应用使用不同的安全组，在这种情况下，需要在入向规则中添加安全组授权，比如数据库的安全组中授权web的安全组</li></ol><h1 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1>]]></content>
    
    <summary type="html">
    
      ECS从入门到实践
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="公有云产品" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%85%AC%E6%9C%89%E4%BA%91%E4%BA%A7%E5%93%81/"/>
    
      <category term="阿里云" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%85%AC%E6%9C%89%E4%BA%91%E4%BA%A7%E5%93%81/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
      <category term="ECS" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%85%AC%E6%9C%89%E4%BA%91%E4%BA%A7%E5%93%81/%E9%98%BF%E9%87%8C%E4%BA%91/ECS/"/>
    
    
      <category term="ECS" scheme="http://yoursite.com/tags/ECS/"/>
    
  </entry>
  
  <entry>
    <title>带宽计算方法及B与b说明</title>
    <link href="http://yoursite.com/2018/05/30/%E5%B8%A6%E5%AE%BD%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95%E5%8F%8AB%E4%B8%8Eb%E8%AF%B4%E6%98%8E/"/>
    <id>http://yoursite.com/2018/05/30/带宽计算方法及B与b说明/</id>
    <published>2018-05-30T12:55:38.000Z</published>
    <updated>2018-05-30T12:55:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考文献：</p><ul><li><a href="https://blog.csdn.net/tianlesoftware/article/details/6909042" target="_blank" rel="noopener">带宽计算方法及大B与小b说明</a></li></ul><h1 id="bit与Byte的关系"><a href="#bit与Byte的关系" class="headerlink" title="bit与Byte的关系"></a>bit与Byte的关系</h1><p><strong>源信息</strong></p><p>在计算机科学中，bit（比特）是表示信息的最小单位，叫做二进制位；一般用0和1表示。</p><p>Byte叫做字节，由8个比特位（8bit）组成一个字节(1Byte)，用于表示计算机中的一个字符。</p><p>bit与Byte之间可以进行换算，其换算关系为：1Byte=8bit（或简写为：1B=8b）</p><p>在实际应用中一般用简称， 即1bit简写为1b(注意是小写英文字母b)，1Byte简写为1B（注意是大写英文字母B）。</p><p><strong>ISP的表示</strong></p><p>在计算机网络或者是网络运营商(Internet service provider)中，一般宽带速率的表示单位用bps(或b/s，小b)表示；</p><p>bps表示<strong><code>比特每秒</code></strong>即表示<strong><code>每秒钟传输多少位</code></strong>信息，是<strong><code>bit per second</code></strong>的缩写。在实际所说的1M带宽的意思是1Mbps（是兆比特每秒Mbps不是兆字节每秒MBps）</p><font color="red"><strong>换算公式:</strong></font><pre><code>1Byte    =    8bit1B    =    8b---------- 1B/s=8b/s(或1Bps=8bps)1KB    =    1024B---------- 1KB/s=1024B/s1MB    =    1024KB ---------- 1MB/s=1024KB/s最终：1Mbps =    1024*1024 bps = 1024 Kbps = 1024/8 KBps = 128KBps = 128KB/s</code></pre><p><strong>规范提示：</strong></p><blockquote><p>在实际书写中，B应表示Byte(字节)，b应表示bit(比特)，但是我们在实际书写中很容易把bit和Byte都混写为b ，如把Mb/s和MB/s都混写为Mb/s，导致人们在实际计算中因单位的混淆而出错。</p></blockquote><h1 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h1><p>在实际上网应用中，下载软件时常常看到诸如下载速度显示为128KB（KB/s），103KB/s等等宽带速率大小字样，因为ISP提供的线路带宽使用的单位是比特（bit，即小b），而一般下载软件显示的是字节（byte，1byte＝8bits），所以要通过换算，才能得实际值。</p><p>所以，我们可以按照公式换算一下：</p><pre><code>128KB/s=128×8(Kb/s)=1024Kb/s=1Mb/s即：128KB/s=1Mb/s。</code></pre><p>也就是说1Mb的带宽，下载速度为128KB/s秒</p><p>在一些软件的带宽的显示页面，通常的显示页面也是以bps的方式来显示，这个时候，我们就需要进行一下换算，例如下面的页面截图（阿里云带宽使用情况）</p><p><img src="http://picture.watchmen.xin/network/bandwidth.png" alt="带宽"></p><p>图中所选的这个值是：13272120 bps(bits/s)，我们下面进行换算：</p><pre><code>13272120 bps = 13272120/1024 Kbps = 13272120/1024/1024 Mbps = 12.65723 Mbps </code></pre><p>换算之后，我们可以看到这里显示的带宽是12.6M</p><h2 id="补充：ADSL宽带知识"><a href="#补充：ADSL宽带知识" class="headerlink" title="补充：ADSL宽带知识"></a>补充：ADSL宽带知识</h2><p>ADSL（Asymmetric Digital Subscriber Loop）技术是一种不对称数字用户线实现宽带接入互连网的技术，ADSL作为一种传输层的技术，充分利用现有的铜线资源，在一对双绞线上提供上行640kbps（理论上行1Mbps）下行8Mbps的带宽，从而克服了传统用户在”最后一公里”的”瓶颈”，实现了真正意义上的宽带接入。</p><p><strong>上行速率：</strong>是指用户电脑向网络发送信息时的数据传输速率。</p><p><strong>下行速率：</strong> 是指网络向用户电脑发送信息时的传输速率。比如用 FTP上传文件到网上去，影响上传速度的就是“上行速率”；而从网上下载文件，影响下载速度的就是“下行速率”。</p><p>当然，在实际上传下载过程中，线路、设备 (含计算机及其他设备)等的质量也会对速度造成或多或少的影响。</p><p><strong>上行速率对上行速率的影响</strong></p><p>TCP/IP规定，每一个封包，都需要有acknowledge信息的回传，也就是说，传输的资料，需要有一个收到资料的信息回复，才能决定后面的传输速度，并决定是否重新传输遗失的资料。　</p><p><font color="red">行的带宽一部分就是用来传输这些acknowledge(确认)资料的，当上行负载过大的时候，就会影响acknowledge资料的传送速度，并进而影响到下载速度。这对非对称数字环路也就是ADSL这种上行带宽远小于下载带宽的连接来说影响尤为明显。</font>　 </p><p>有试验证明，当上传满载时，下载速度讲变为理想速度的40%，这就可以解释为什么很多朋友用BT下载的时候稍微限速反而能够获得更大的下载速度。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在网络运营商提供的宽带速率单位中，”bps”是指”bit per second”</p><p>而我们在日常生活中，使用的一般是”Byte persecond”(Bps)</p><p>我们说的带宽几M几M指的是 2Mbps、8Mbps这种格式，为了便于更加直观的查看，我们会转回成为KB的形式，也就是说，我们拿到这个数字之后，需要先*1024，将M变成K，然后再/8，最后的单位就是我们最常使用的单位了</p><p>举个栗子：</p><pre><code>1M的带宽，理论的下载速度为：1*1024/8= 128KB/s8M的带宽，理论的下载速度为：8*1024/8 = 1024KB/s = 1MB/s</code></pre><p>在8M带宽之后，我们的换算，可以直接除以8来得到结果</p><pre><code>100M的带宽，理论的下载速度为： 100/8 = 12.5MB/s</code></pre>]]></content>
    
    <summary type="html">
    
      带宽计算方法及B与b说明
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="网络知识" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86/"/>
    
      <category term="基础知识" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="带宽计算" scheme="http://yoursite.com/tags/%E5%B8%A6%E5%AE%BD%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
</feed>
