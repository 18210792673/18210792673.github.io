<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Watchmen1992&#39;s Blog</title>
  
  <subtitle>锦瑟年华当与书香为度，是为不负天地人生。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-24T07:41:44.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>XiaoHua WANG</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>认知升级之第一性原理-李善友</title>
    <link href="http://yoursite.com/2018/06/24/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/%E6%B7%B7%E6%B2%8C%E5%A4%A7%E5%AD%A6/%E8%AE%A4%E7%9F%A5%E5%8D%87%E7%BA%A7%E4%B9%8B%E7%AC%AC%E4%B8%80%E6%80%A7%E5%8E%9F%E7%90%86-%E6%9D%8E%E5%96%84%E5%8F%8B/"/>
    <id>http://yoursite.com/2018/06/24/个人知识体系/混沌大学/认知升级之第一性原理-李善友/</id>
    <published>2018-06-24T07:41:44.000Z</published>
    <updated>2018-06-24T07:41:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言概述"><a href="#前言概述" class="headerlink" title="前言概述"></a>前言概述</h1><h1 id="模型1：刻意练习"><a href="#模型1：刻意练习" class="headerlink" title="模型1：刻意练习"></a>模型1：刻意练习</h1><p>刻意练习的主要目的是创建有效的心理表征</p><h2 id="刻意练习的方法论"><a href="#刻意练习的方法论" class="headerlink" title="刻意练习的方法论"></a>刻意练习的方法论</h2><p>超过三条方法论就有点称不上方法论，因为会太复杂了。</p><p><strong>1. 创建模型</strong> 【刻意练习中最重要的方法论】</p><p><strong>2. 刻意练习</strong></p><p><strong>3. 及时反馈</strong></p><h2 id="第1步：创建模型"><a href="#第1步：创建模型" class="headerlink" title="第1步：创建模型"></a>第1步：创建模型</h2><h2 id="第2步：刻意练习"><a href="#第2步：刻意练习" class="headerlink" title="第2步：刻意练习"></a>第2步：刻意练习</h2><h2 id="第3步：及时反馈"><a href="#第3步：及时反馈" class="headerlink" title="第3步：及时反馈"></a>第3步：及时反馈</h2><h2 id="刻意练习的注意事项"><a href="#刻意练习的注意事项" class="headerlink" title="刻意练习的注意事项"></a>刻意练习的注意事项</h2><h2 id="实例案例"><a href="#实例案例" class="headerlink" title="实例案例"></a>实例案例</h2><h3 id="李叫兽"><a href="#李叫兽" class="headerlink" title="李叫兽"></a>李叫兽</h3><h1 id="模型2：第一性原理"><a href="#模型2：第一性原理" class="headerlink" title="模型2：第一性原理"></a>模型2：第一性原理</h1><h1 id="模型3：牛顿-机械论"><a href="#模型3：牛顿-机械论" class="headerlink" title="模型3：牛顿-机械论"></a>模型3：牛顿-机械论</h1><h1 id="模型4：达尔文-自然选择"><a href="#模型4：达尔文-自然选择" class="headerlink" title="模型4：达尔文-自然选择"></a>模型4：达尔文-自然选择</h1>]]></content>
    
    <summary type="html">
    
      认知升级之第一性原理-李善友
    
    </summary>
    
      <category term="个人认知体系" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E8%AE%A4%E7%9F%A5%E4%BD%93%E7%B3%BB/"/>
    
      <category term="混沌大学" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E8%AE%A4%E7%9F%A5%E4%BD%93%E7%B3%BB/%E6%B7%B7%E6%B2%8C%E5%A4%A7%E5%AD%A6/"/>
    
      <category term="认知升级之第一性原理-李善友" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E8%AE%A4%E7%9F%A5%E4%BD%93%E7%B3%BB/%E6%B7%B7%E6%B2%8C%E5%A4%A7%E5%AD%A6/%E8%AE%A4%E7%9F%A5%E5%8D%87%E7%BA%A7%E4%B9%8B%E7%AC%AC%E4%B8%80%E6%80%A7%E5%8E%9F%E7%90%86-%E6%9D%8E%E5%96%84%E5%8F%8B/"/>
    
    
      <category term="混沌大学" scheme="http://yoursite.com/tags/%E6%B7%B7%E6%B2%8C%E5%A4%A7%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>《运动与健康》-湖北大学</title>
    <link href="http://yoursite.com/2018/06/24/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6MOOC/%E3%80%8A%E8%BF%90%E5%8A%A8%E4%B8%8E%E5%81%A5%E5%BA%B7%E3%80%8B-%E6%B9%96%E5%8C%97%E5%A4%A7%E5%AD%A6/"/>
    <id>http://yoursite.com/2018/06/24/个人知识体系/中国大学MOOC/《运动与健康》-湖北大学/</id>
    <published>2018-06-24T07:16:19.000Z</published>
    <updated>2018-06-24T07:16:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章：健康与亚健康"><a href="#第一章：健康与亚健康" class="headerlink" title="第一章：健康与亚健康"></a>第一章：健康与亚健康</h1><h2 id="第一节：你健康吗？"><a href="#第一节：你健康吗？" class="headerlink" title="第一节：你健康吗？"></a>第一节：你健康吗？</h2><p>世界卫生组织对健康的定义：健康是一种全面的身体、心理以及社会幸福的理想状态。包括<strong><code>身体健康，心理健康，社会适应良好和道德健康</code></strong>的理想状态。</p><p> <strong>一：身体健康</strong></p><ul><li>身体健康的特征之一：身体形态与结构发育状况良好。</li></ul><blockquote><p>身体形态具体指的是身体的外部形状和特征，主要包括体型、身体姿势、营养状况及身体成分等方面，反映了人体的生长发育水平，一般通过测量身高体重胸围皮下组织等来考察</p><p>身体结构来看：人体的上部与下部，大腿与小腿，上臂与前臂等比例较协调，较为合理的比值是0.618:1，即我们常说的黄金分割。</p></blockquote><ul><li>身体健康的特征之二：生理机能水平高。</li></ul><blockquote><p>人体身体机能是指人体各器官系统发育是否良好，功能是否健全，运转是否自如等。常见的人体机能衡量指标有：心率、血压、肺活量等</p><p>以心率为例，人的心率与寿命成反比关系，即心跳越慢，寿命越长，心跳越快，寿命越短</p><p>自然界中，乌龟的寿命长达500年以上，它心脏每分钟的跳动次数为至少只有8次，而有一种小鼠，每分钟心跳高达1200次，其寿命只有一年。</p><p>人类研究证实（有科学根据）：如果成人安静时的心率维持在60次/分钟左右，其寿命可以达到93岁。相反，如果安静时的心率大于80次/分钟，其寿命明显缩短</p><p>心率是寿命的标尺</p><p> 经过长期运动训练的人，其安静时的心率，一般维持在60次/分钟左右。</p></blockquote><ul><li>身体健康的特征之三：身体素质好与运动能力强</li></ul><blockquote><p>身体素质是指人体在活动中表现出来的力量、速度、耐力、灵敏、柔韧等机能。身体素质的强弱是衡量一个人体质健康的重要指标之一</p></blockquote><ul><li><p>身体健康的特征之四：身体具有良好的适应能力</p><p>指的是人体在适应内外环境中所表示出来的机能能力。对高温、低温、加速度、旋转等的适应能力</p></li></ul><p><strong>二：心理健康</strong></p><p> 心理健康的特征：</p><ul><li>具有良好的自我控制和调节能力。</li><li>对于外界的刺激有良好的应激能力，心理经常处于平衡和满足状态。</li></ul><p>具体表现为：</p><ul><li>有充分的安全感</li><li>有自知之明</li><li>善于平衡人际关系</li><li>正视现实</li><li>热爱生活</li><li>乐于工作</li><li>能保持人格的完整与和谐</li><li>善于学习、努力进取</li></ul><p><strong>三：道德健康</strong></p><p> 道德健康的基本特征：</p><ul><li>有积极向上的信仰</li><li>高尚的品德与情操、完美的人格</li></ul><p>具体表现：</p><ul><li>作风正派</li><li>遵纪守法</li><li>努力工作</li><li>乐于奉献</li><li>有责任感</li><li>努力进取</li></ul><p><strong>四：社会适应能力</strong></p><p>指人为了在社会上更好生存而进行心理上、生理上以及行为上的各种适应性变化，与社会达到和谐状态的一种执行适应能力。</p><p>一般认为包括以下方面：</p><ul><li>个人生活自理能力</li><li>基本劳动能力</li><li>用道德规范约束自己的能力</li></ul><p>根据统计资料显示：真正按照世界卫生组织的健康标准，健康人不超过15%。而真正有各种疾病的大概也只有15%。也就是说70%人处于健康和疾病之间的第三种状态-亚健康状态。</p><h2 id="第二节：你离亚健康有多远？"><a href="#第二节：你离亚健康有多远？" class="headerlink" title="第二节：你离亚健康有多远？"></a>第二节：你离亚健康有多远？</h2>]]></content>
    
    <summary type="html">
    
      《运动与健康》-湖北大学
    
    </summary>
    
      <category term="个人知识体系" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    
      <category term="中国大学MOOC" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6MOOC/"/>
    
      <category term="《运动与健康》-湖北大学" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6MOOC/%E3%80%8A%E8%BF%90%E5%8A%A8%E4%B8%8E%E5%81%A5%E5%BA%B7%E3%80%8B-%E6%B9%96%E5%8C%97%E5%A4%A7%E5%AD%A6/"/>
    
    
      <category term="中国大学MOOC" scheme="http://yoursite.com/tags/%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6MOOC/"/>
    
  </entry>
  
  <entry>
    <title>《鞠强教授暨嫡传弟子团:管理心理学之技巧与理论》</title>
    <link href="http://yoursite.com/2018/06/24/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/%E5%96%9C%E9%A9%AC%E6%8B%89%E9%9B%85FM/%E3%80%8A%E9%9E%A0%E5%BC%BA%E6%95%99%E6%8E%88%E6%9A%A8%E5%AB%A1%E4%BC%A0%E5%BC%9F%E5%AD%90%E5%9B%A2-%E7%AE%A1%E7%90%86%E5%BF%83%E7%90%86%E5%AD%A6%E4%B9%8B%E6%8A%80%E5%B7%A7%E4%B8%8E%E7%90%86%E8%AE%BA%E3%80%8B/"/>
    <id>http://yoursite.com/2018/06/24/个人知识体系/喜马拉雅FM/《鞠强教授暨嫡传弟子团-管理心理学之技巧与理论》/</id>
    <published>2018-06-24T07:09:03.000Z</published>
    <updated>2018-06-24T07:09:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="市场细分化理解深化"><a href="#市场细分化理解深化" class="headerlink" title="市场细分化理解深化"></a>市场细分化理解深化</h1><h1 id="中国历史为什么大统一是主流"><a href="#中国历史为什么大统一是主流" class="headerlink" title="中国历史为什么大统一是主流"></a>中国历史为什么大统一是主流</h1><h1 id="拖延症最大的坏处不是效率低-是什么呢？"><a href="#拖延症最大的坏处不是效率低-是什么呢？" class="headerlink" title="拖延症最大的坏处不是效率低-是什么呢？"></a>拖延症最大的坏处不是效率低-是什么呢？</h1><h1 id="矛盾营销信息成本高"><a href="#矛盾营销信息成本高" class="headerlink" title="矛盾营销信息成本高"></a>矛盾营销信息成本高</h1>]]></content>
    
    <summary type="html">
    
      《鞠强教授暨嫡传弟子团:管理心理学之技巧与理论》
    
    </summary>
    
      <category term="个人知识体系" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    
      <category term="喜马拉雅FM" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/%E5%96%9C%E9%A9%AC%E6%8B%89%E9%9B%85FM/"/>
    
      <category term="鞠强教授暨嫡传弟子团:管理心理学之技巧与理论" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/%E5%96%9C%E9%A9%AC%E6%8B%89%E9%9B%85FM/%E9%9E%A0%E5%BC%BA%E6%95%99%E6%8E%88%E6%9A%A8%E5%AB%A1%E4%BC%A0%E5%BC%9F%E5%AD%90%E5%9B%A2-%E7%AE%A1%E7%90%86%E5%BF%83%E7%90%86%E5%AD%A6%E4%B9%8B%E6%8A%80%E5%B7%A7%E4%B8%8E%E7%90%86%E8%AE%BA/"/>
    
    
      <category term="喜马拉雅FM" scheme="http://yoursite.com/tags/%E5%96%9C%E9%A9%AC%E6%8B%89%E9%9B%85FM/"/>
    
  </entry>
  
  <entry>
    <title>每日碎片知识梳理-2018年</title>
    <link href="http://yoursite.com/2018/06/24/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/%E6%AF%8F%E6%97%A5%E7%A2%8E%E7%89%87%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/2018%E5%B9%B4/%E6%AF%8F%E6%97%A5%E7%A2%8E%E7%89%87%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86-2018%E5%B9%B4/"/>
    <id>http://yoursite.com/2018/06/24/个人知识体系/每日碎片知识梳理/2018年/每日碎片知识梳理-2018年/</id>
    <published>2018-06-24T05:52:04.000Z</published>
    <updated>2018-06-24T05:52:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2018年6月"><a href="#2018年6月" class="headerlink" title="2018年6月"></a>2018年6月</h1><h2 id="6月24日"><a href="#6月24日" class="headerlink" title="6月24日"></a>6月24日</h2><p><strong>标题：为泡妞之成功而读书</strong></p><ul><li>来源：《得到》-逻辑思维-第20期</li></ul><p><strong>内容：</strong></p><ul><li>传统的知识构成和今天我们要面对的知识构成是有区别的</li></ul><blockquote><p>近代化以来，教育是人类一项沉重的负担，因为随着工业化的发展，各个门类的知识持续增长，所以就必须建立一个体系，将这些知识灌输给年轻人</p></blockquote><h2 id="6月25日"><a href="#6月25日" class="headerlink" title="6月25日"></a>6月25日</h2>]]></content>
    
    <summary type="html">
    
      每日碎片知识梳理-2018年
    
    </summary>
    
      <category term="个人知识体系" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    
      <category term="每日碎片知识梳理" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/%E6%AF%8F%E6%97%A5%E7%A2%8E%E7%89%87%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/"/>
    
      <category term="2018年" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/%E6%AF%8F%E6%97%A5%E7%A2%8E%E7%89%87%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/2018%E5%B9%B4/"/>
    
    
      <category term="每日碎片知识梳理" scheme="http://yoursite.com/tags/%E6%AF%8F%E6%97%A5%E7%A2%8E%E7%89%87%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>《刻意练习》</title>
    <link href="http://yoursite.com/2018/06/24/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8A%E5%88%BB%E6%84%8F%E7%BB%83%E4%B9%A0%E3%80%8B/"/>
    <id>http://yoursite.com/2018/06/24/个人知识体系/读书笔记/《刻意练习》/</id>
    <published>2018-06-24T05:05:39.000Z</published>
    <updated>2018-06-24T05:05:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="书籍信息"><a href="#书籍信息" class="headerlink" title="书籍信息"></a>书籍信息</h1><h1 id="思维导图-读后感解析"><a href="#思维导图-读后感解析" class="headerlink" title="思维导图-读后感解析"></a>思维导图-读后感解析</h1><h1 id="一些补充"><a href="#一些补充" class="headerlink" title="一些补充"></a>一些补充</h1>]]></content>
    
    <summary type="html">
    
      《刻意练习》读书笔记
    
    </summary>
    
      <category term="个人知识体系" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    
      <category term="读书笔记" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>神器-Typora</title>
    <link href="http://yoursite.com/2018/06/24/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/Markdown/%E7%A5%9E%E5%99%A8-Typora/"/>
    <id>http://yoursite.com/2018/06/24/常用软件工具/Markdown/神器-Typora/</id>
    <published>2018-06-24T04:05:16.000Z</published>
    <updated>2018-06-24T04:05:16.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>参考文献：</strong></p><ul><li><u><a href="https://www.typora.io/" target="_blank" rel="noopener">Typora官方网站</a></u></li></ul><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h2><p><strong>官方说明：</strong></p><blockquote><p>Typora will give you a seamless experience as both a reader and a writer. It removes the preview window, mode switcher, syntax symbols of markdown source code, and all other unnecessary distractions. Replace them with a real live preview feature to help you concentrate the content itself. </p></blockquote><p>Markdown 编辑器，比较常见的是双栏布局：左边敲源码，右边显示渲染结果。 </p><p>但是Typora 是单栏布局，是真正意义上的所见即所得，摒弃了传统的markdown编辑器的分栏设置（例如markdown pad 2左边是源码，右边是渲染之后的显示效果），书写时直接显示成效图。光标一离开，就立刻显示为想要的样子，并且由用户选择何时进入源码模式（输入ctrl+/即可切换源码编辑模式）</p><h1 id="入门实践"><a href="#入门实践" class="headerlink" title="入门实践"></a>入门实践</h1><h2 id="快捷键操作"><a href="#快捷键操作" class="headerlink" title="快捷键操作"></a>快捷键操作</h2>]]></content>
    
    <summary type="html">
    
      Typora软件使用
    
    </summary>
    
      <category term="常用软件工具" scheme="http://yoursite.com/categories/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Markdown" scheme="http://yoursite.com/categories/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/Markdown/"/>
    
    
      <category term="Typora" scheme="http://yoursite.com/tags/Typora/"/>
    
  </entry>
  
  <entry>
    <title>LF will be replaced by CRLF报警</title>
    <link href="http://yoursite.com/2018/06/23/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/Git/CRLF%E8%A7%A3%E5%86%B3/"/>
    <id>http://yoursite.com/2018/06/23/常用软件工具/Git/CRLF解决/</id>
    <published>2018-06-23T14:08:24.000Z</published>
    <updated>2018-06-23T14:08:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Windows环境下使用git进行add的时候，会提示： “warning:LF will be replacee by CRLF”</p><p><strong>基本信息：</strong></p><p>CRLF – Carriage-Return Line-Feed 回车换行</p><ul><li><p>回车(CR, 对应 ASCII 13, \r) </p></li><li><p>换行(LF, ASCII 10, \n)。 </p></li></ul><p>这里放上ASCII字符代码表的前半部分，可以直观的看到</p><p><img src="http://picture.watchmen.xin/python-14/ASCII.jpg" alt="ascii"></p><p><strong>注意：</strong></p><p>这两个标识换行的ACSII字符不会在屏幕有任何输出，在Windows中广泛使用\r\n来标识一行的结束。而在Linux/UNIX系统中只使用\n来标识一行的结束。</p><p>这一点经常在windows和linux平台上进行操作的小伙伴基本都知道</p><p>也就是说在windows中的换行符为 CRLF， 而在linux下的换行符为：LF</p><p><strong>原因分析：</strong></p><p>git配置中设置 core.autocrlf=true 后：</p><ul><li>当我们执行git add将文件转入到暂存区时，系统将会把LF转换成CRLF</li></ul><ul><li>当我们执行commit提交时，会把暂存区的内容(也就是我们对工作区做的改动)再重新转化为LF然后放入版本库(repository)</li></ul><ul><li>从工作区转化暂存区时，如果发现里面存在 LF 换行符，LF 会被转化成 CRLF，并给出提到的那条警告：”LF will be replaced by CRLF”</li></ul><ul><li>这里有一个重要的知识点：git创建的项目，暂存区和运行平台挂钩，但是最终项目文件在版本库(repository)中的换行符是为LF【因为git最终是运行在Linux平台之上】</li></ul><p>其实这句警告的下面其实还有一句很重要的话:</p><pre><code>warning: LF will be replaced by CRLF in . The file will have its original line endings in your working directory. </code></pre><p>(翻译下就是:“在工作区里,这个文件会保持它原本的换行符，也就是LF和CRLF混合存在。”) </p><p><strong>深入延伸扩展</strong></p><blockquote><p>简单来说，在windows平台，我们工作区的文件都应该用 CRLF 来换行。如果改动文件时引入了 LF,或者设置 core.autocrlf 之前,工作区已经有 LF 换行符。那么提交改动时,git 会警告你哪些文件不是纯 CRLF 文件,但 git 不会擅自修改工作区的那些文件,而是对暂存区(我们对工作区的改动)进行修改。</p><p>也因此,当我们进行 git add 的操作时,只要 git 发现改动的内容里有 LF 换行符,就还会出现这个警告。</p><p>设置 core.autocrlf=true, 只要保持工作区都是纯 CRLF 文件,编辑器用 CRLF 换行,就不会出现警告。</p><p>git 默认让版本库里用 LF 换行,只要保持这条规则,多人协作就不会出什么大问题。</p><p>git 的 Windows 客户端基本都会默认设置 core.autocrlf=trueLinux 最好不要重新设置,因为这个配置算是为 Windows 平台定制。</p><p>如果 Windows 上设置 core.autocrlf=false,仓库里也没有配置 .gitattributes,很容易引入 CRLF 或者混合换行符(Mixed Line Endings,一个文件里既有 LF 又有CRLF)到版本库,这样就可能产生各种奇怪的问题。</p><p>如果有换行符不匹配本地平台的情况,建议你用 dos2unix 之类的工具转换下换行符,因为很多配置文件是严格要求文件编码和换行符的,谨慎一点比较好。 </p></blockquote><p><strong>问题解决：</strong></p><p>因为如果 Windows 上设置 core.autocrlf=false,仓库里也没有配置 .gitattributes,很容易引入 CRLF 或者混合换行符(Mixed Line Endings,一个文件里既有 LF 又有CRLF)到版本库,这样就可能产生各种奇怪的问题。</p><p>所以，解决最好保持工作区都是纯 CRLF 文件,编辑器用 CRLF 换行,就不会出现警告。</p><p>首先<code>core.autocrlf = true</code>在windows上才是正确的选择，不建议将其修改为false（网上大部分的解决方法都是：rm -rf .git &amp;&amp; git config –global core.autocrlf false &amp;&amp; git init &amp;&amp; git add . &amp;&amp; git remote add xx 这种解决方式，其实不是太友好），如果实在忍受不了，想要避免这些warning，那么执行下面的操作：</p><ol><li>添加.gitattributes</li><li>设置<code>core.safecrlf = true</code></li><li>使用dos2unix、notepad++等工具来将LF转换成CRLF</li></ol><p>所以，建议保持默认效果</p>]]></content>
    
    <summary type="html">
    
      LF will be replaced by CRLF报警问题
    
    </summary>
    
      <category term="常用软件工具" scheme="http://yoursite.com/categories/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Git" scheme="http://yoursite.com/categories/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/Git/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>修改主题超链接样式</title>
    <link href="http://yoursite.com/2018/06/23/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Hexo/%E4%BF%AE%E6%94%B9%E4%B8%BB%E9%A2%98%E8%B6%85%E9%93%BE%E6%8E%A5%E6%A0%B7%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/06/23/个人知识体系/个人博客/Hexo/修改主题超链接样式/</id>
    <published>2018-06-23T10:56:27.000Z</published>
    <updated>2018-06-23T10:56:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为我使用的是Next主题，这里说下Next主题的修改，其他主题的操作也都是一致的</p><p>Next默认对超链接只有下划线样式，在查看文章内容的时候很容易被忽略</p><p>主题样式是在\hexoBlog\themes\next\source\css,这里面保存了Muse,Mist和Pisces等主题的css文件</p><p>例如,字体和边框的颜色还有字体,图片的大小等保存在next\source\css_variables里.</p><p>而我们要修改的body超链接的样式在themes\next\source\css_common\components\post\post.styl里,编辑文件，在文件中添加以下内容:</p><pre><code>.post-body a {  color: #428BCA;  font-weight: bold;}</code></pre><p>添加以后，我们需要执行clean操作生效</p><pre><code>hexo clean hexo g -d</code></pre><p>强制刷新我们的文章内容，就能看到超链接已经变成蓝色粗体的形式</p><p>如下图所示：</p><p><img src="http://picture.watchmen.xin/tmp/next_css.png" alt="css"></p>]]></content>
    
    <summary type="html">
    
      修改主题超链接样式
    
    </summary>
    
      <category term="个人知识体系" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    
      <category term="个人博客" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>fio命令</title>
    <link href="http://yoursite.com/2018/06/19/fio/"/>
    <id>http://yoursite.com/2018/06/19/fio/</id>
    <published>2018-06-19T03:51:18.000Z</published>
    <updated>2018-06-19T03:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><pre><code># yum -y install git libaio libaio-devel zlib-devel gcc# git clone git://github.com/axboe/fio.git# cd fio/# ./configure &amp;&amp; make &amp;&amp; make install </code></pre><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><h2 id="IOPS测试"><a href="#IOPS测试" class="headerlink" title="IOPS测试"></a>IOPS测试</h2><p>fio -direct=1 -iodepth=64 -rw=randrw -ioengine=libaio -bs=4k -size=1G -numjobs=1  -group_reporting -filename=iotest -name=Write_PPS_Testing</p><h2 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h2>]]></content>
    
    <summary type="html">
    
      fio命令
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="Linux基础知识" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="Linux常用命令" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="fio" scheme="http://yoursite.com/tags/fio/"/>
    
  </entry>
  
  <entry>
    <title>nginx入门介绍及安装配置</title>
    <link href="http://yoursite.com/2018/06/14/nginx%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/06/14/nginx安装配置/</id>
    <published>2018-06-14T03:59:24.000Z</published>
    <updated>2018-06-14T03:59:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><ul><li><a href="https://nginx.org/en/" target="_blank" rel="noopener">官网链接</a></li><li><a href="https://nginx.org/en/download.html" target="_blank" rel="noopener">下载页面</a></li></ul><h1 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h1><h2 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h2><p>登录服务器之后，wget下载相应版本的源码包</p><pre><code># wget https://nginx.org/download/nginx-1.14.0.tar.gz</code></pre><p>./configure –prefix=/usr/local/nginx –user=nginx –group=nginx –with-http_ssl_module –with-http_stub_status_module –with-pcre</p>]]></content>
    
    <summary type="html">
    
      nginx入门介绍及安装配置
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="网络服务" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Nginx" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>traceroute命令</title>
    <link href="http://yoursite.com/2018/06/13/traceroute%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/06/13/traceroute命令/</id>
    <published>2018-06-13T03:14:10.000Z</published>
    <updated>2018-06-13T03:14:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>traceroute  -n -T -p 5201 10.11.6.3</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;traceroute  -n -T -p 5201 10.11.6.3&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="tag1" scheme="http://yoursite.com/tags/tag1/"/>
    
  </entry>
  
  <entry>
    <title>iperf命令</title>
    <link href="http://yoursite.com/2018/06/12/iperf%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/06/12/iperf命令/</id>
    <published>2018-06-12T09:19:32.000Z</published>
    <updated>2018-06-12T09:19:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考文献：</p><ul><li><a href="https://github.com/esnet/iperf" target="_blank" rel="noopener">github主页</a></li></ul><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h1 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h1><p>使用iperf时，涉及服务端和客户端的概念</p><p>因为iperf是使用C语言编写的，因此在安装之前服务器上要安装gcc编译器。</p><h2 id="全局参数"><a href="#全局参数" class="headerlink" title="全局参数"></a>全局参数</h2><h2 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre><code># wget http://downloads.es.net/pub/iperf/iperf-3.5.tar.gz# tar -zxvf iperf-3.5.tar.gz# cd iperf-3.5# ./configure; make; make install</code></pre><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><pre><code># iperf3 -s -D</code></pre><p>iperf2版本启动之后，默认的监听端口为：5001</p><p>iperf3版本启动之后，默认的监听端口为：5201</p><p>因为iperf2版本存在很多问题，因此我们现在主要使用iperf3版本进行测试</p><h3 id="补充：服务端启动参数"><a href="#补充：服务端启动参数" class="headerlink" title="补充：服务端启动参数"></a>补充：服务端启动参数</h3><h2 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><pre><code># wget http://downloads.es.net/pub/iperf/iperf-3.5.tar.gz# tar -zxvf iperf-3.5.tar.gz# cd iperf-3.5# ./configure; make; make install</code></pre><p>客户端不需要启动</p><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><p><strong>客户端指定发送一个5GB的数据包，每隔5秒钟输出一次传输状态，输出结果的显示单位为MB显示，并发3个线程发送</strong></p><pre><code># iperf  -c 10.11.6.3 -n 5000000000 -p 5201 -i 5 -f M -P 3 </code></pre>]]></content>
    
    <summary type="html">
    
      Linux常用命令之iperf命令
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="Linux基础知识" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="Linux常用命令" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="iperf" scheme="http://yoursite.com/tags/iperf/"/>
    
  </entry>
  
  <entry>
    <title>4层负载均衡和7层负载均衡的区别</title>
    <link href="http://yoursite.com/2018/06/10/4%E5%B1%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%92%8C7%E5%B1%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2018/06/10/4层负载均衡和7层负载均衡的区别/</id>
    <published>2018-06-10T13:46:04.000Z</published>
    <updated>2018-06-10T13:46:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="四七层负载均衡分别指的是什么？"><a href="#四七层负载均衡分别指的是什么？" class="headerlink" title="四七层负载均衡分别指的是什么？"></a>四七层负载均衡分别指的是什么？</h1><h2 id="四层负载均衡"><a href="#四层负载均衡" class="headerlink" title="四层负载均衡"></a>四层负载均衡</h2><h2 id="七层负载均衡"><a href="#七层负载均衡" class="headerlink" title="七层负载均衡"></a>七层负载均衡</h2><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p>Nginx工作在网络模型的7层，可以针对http应用做一些分流的策略，比如针对域名、目录结构，Nginx单凭这点可利用的场合就远多于LVS了。</p><p>最新版本的Nginx也支持4层TCP负载，曾经这是LVS比Nginx好的地方。</p><p>Nginx对网络稳定性的依赖非常小，理论上能ping通就就能进行负载功能，这个也是它的优势之一，相反LVS对网络稳定性依赖比较大。</p><p>Nginx安装和配置比较简单，测试起来比较方便，它基本能把错误用日志打印出来。LVS的配置、测试就要花比较长的时间了，LVS对网络依赖比较大。<br>那为什么要用lvs呢？</p><p>简单一句话，当并发超过了Nginx上限，就可以使用LVS了。</p><p>日1000-2000W PV或并发请求1万以下都可以考虑用Nginx。</p><p>大型门户网站，电商网站需要用到LVS。</p><h2 id="知识补充：OSI七层模型"><a href="#知识补充：OSI七层模型" class="headerlink" title="知识补充：OSI七层模型"></a>知识补充：OSI七层模型</h2><h1 id="四七层负载均衡配置实践"><a href="#四七层负载均衡配置实践" class="headerlink" title="四七层负载均衡配置实践"></a>四七层负载均衡配置实践</h1>]]></content>
    
    <summary type="html">
    
      4层负载均衡和7层负载均衡的区别
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="高并发" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
      <category term="负载均衡" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E9%AB%98%E5%B9%B6%E5%8F%91/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
      <category term="负载均衡基础知识" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E9%AB%98%E5%B9%B6%E5%8F%91/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="负载均衡" scheme="http://yoursite.com/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
  </entry>
  
  <entry>
    <title>负载均衡技术从入门到实践</title>
    <link href="http://yoursite.com/2018/06/10/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%8A%80%E6%9C%AF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2018/06/10/负载均衡技术从入门到实践/</id>
    <published>2018-06-10T13:23:11.000Z</published>
    <updated>2018-06-10T13:23:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="我们为什么需要负载均衡"><a href="#我们为什么需要负载均衡" class="headerlink" title="我们为什么需要负载均衡"></a>我们为什么需要负载均衡</h2><h2 id="负载均衡的好处"><a href="#负载均衡的好处" class="headerlink" title="负载均衡的好处"></a>负载均衡的好处</h2><p>负载均衡（Load Balance）集群提供了一种廉价、有效、透明的方法，来扩展网络设备和服务器的负载、带宽、增加吞吐量、加强网络数据处理能力、提高网络的灵活性和可用性。</p><p>单台计算机无法承受大规模的并发访问或数据流量，此时需要搭建负载均衡集群把流量分摊到多台节点设备上分别处理，即减少用户等待响应的时间又提升了用户体验；</p><p>7*24小时的服务保证，任意一个或多个有限后端节点设备宕机，不能影响整个业务的运行。</p>]]></content>
    
    <summary type="html">
    
      负载均衡技术从入门到实践
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="高并发" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
      <category term="负载均衡" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E9%AB%98%E5%B9%B6%E5%8F%91/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
      <category term="负载均衡基础知识" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E9%AB%98%E5%B9%B6%E5%8F%91/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="负载均衡" scheme="http://yoursite.com/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
  </entry>
  
  <entry>
    <title>zabbix监控网络设备</title>
    <link href="http://yoursite.com/2018/06/10/zabbix%E7%9B%91%E6%8E%A7%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87/"/>
    <id>http://yoursite.com/2018/06/10/zabbix监控网络设备/</id>
    <published>2018-06-10T08:53:40.000Z</published>
    <updated>2018-06-10T08:53:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考文献：</p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h1 id="入门实践"><a href="#入门实践" class="headerlink" title="入门实践"></a>入门实践</h1>]]></content>
    
    <summary type="html">
    
      zabbix监控网络设备
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="运维监控体系" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E8%BF%90%E7%BB%B4%E7%9B%91%E6%8E%A7%E4%BD%93%E7%B3%BB/"/>
    
      <category term="zabbix" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E8%BF%90%E7%BB%B4%E7%9B%91%E6%8E%A7%E4%BD%93%E7%B3%BB/zabbix/"/>
    
    
      <category term="zabbix" scheme="http://yoursite.com/tags/zabbix/"/>
    
  </entry>
  
  <entry>
    <title>onenote从入门到实践</title>
    <link href="http://yoursite.com/2018/06/10/onenote%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2018/06/10/onenote从入门到实践/</id>
    <published>2018-06-10T05:31:50.000Z</published>
    <updated>2018-06-10T05:31:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考文献：</p><ul><li><a href="https://support.office.com/zh-cn/onenote" target="_blank" rel="noopener">OneNote-Microsoft官方文档</a></li></ul><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>onenote中的关系是（三级目录）：</p><p>笔记本–&gt;分区–&gt;页</p><p>注意：我们应该使用的是：onenote2013/onenote2016这种版本，而不是onenote这种不带版本后缀的。</p><h1 id="入门实践"><a href="#入门实践" class="headerlink" title="入门实践"></a>入门实践</h1><h2 id="设置密码保护"><a href="#设置密码保护" class="headerlink" title="设置密码保护"></a>设置密码保护</h2><p>参考文献：</p><ul><li><a href="https://support.office.com/zh-cn/article/%E7%94%A8%E5%AF%86%E7%A0%81%E4%BF%9D%E6%8A%A4%E6%82%A8%E7%9A%84%E7%AC%94%E8%AE%B0-e5ffd8fd-e811-441a-aa02-e13f0f445933#PASSWORDS=2016%E3%80%812013_%E5%92%8C_2010" target="_blank" rel="noopener">用密码保护您的笔记</a></li></ul><p>OneNote 中的密码保护功能旨在帮助确保笔记的安全，防止他人窥探。无论是在学校将 OneNote 用于课堂笔记、在工作场所将其用于会议笔记、在家将其用于个人日记或博客，还是将其用于你自己或亲朋好友的个人信息，密码都在控制对这些笔记的访问权限方面发挥着重要作用。</p><p>通过使用密码保护 OneNote 笔记本分区，可帮助确保私人笔记免遭他人窥探。当分区受密码保护时，其所有页面均处于锁定状态，直到输入正确的密码。</p><h3 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h3><p><strong>步骤如下：</strong></p><ol><li><p>右键单击要保护的<font color="red"><strong><code>分区</code></strong></font>选项卡，然后选择“用密码保护此分区”。</p></li><li><p>如何在 OneNote 2016 中使用密码保护分区的屏幕截图。</p></li><li><p>在“密码保护”任务窗格中，选择“设置密码”。</p></li><li><p>在“密码保护”对话框中，在“输入密码”框中键入所需的密码。</p></li><li><p>在“确认密码”框中再次键入该密码进行确认，然后单击“确定”。</p></li></ol><p><img src="http://picture.watchmen.xin/onenote/password.png" alt="password"></p><blockquote><p><strong>注意:</strong> 请仔细选择密码。如果忘记了密码，任何人都无法为你解锁笔记（甚至 Microsoft 技术支持也不能）。</p></blockquote><h3 id="锁定笔记本中受保护的分区"><a href="#锁定笔记本中受保护的分区" class="headerlink" title="锁定笔记本中受保护的分区"></a>锁定笔记本中受保护的分区</h3><p>如果您为笔记本中的多个分区应用了密码，则可以同时锁定所有这些分区。</p><ol><li><p>右键单击任何受保护的（但当前未锁定的）分区选项卡，然后选择“用密码保护此分区”。</p></li><li><p>在“密码保护”任务窗格中，选择“全部锁定”。</p></li></ol><p><strong>也就是说，一次锁定一个笔记本中的所有有密码保护的分区</strong></p><h3 id="更改受保护分区的密码"><a href="#更改受保护分区的密码" class="headerlink" title="更改受保护分区的密码"></a>更改受保护分区的密码</h3><ol><li><p>右键单击要更改密码的分区选项卡，然后选择“用密码保护此分区”。</p></li><li><p>在“密码保护”任务窗格中，选择“更改密码”。（如果此选项不可用，则表示该分区无密码。）</p></li><li><p>在“更改密码”对话框中，在“旧密码”框中键入当前的密码。</p></li><li><p>在“输入新密码”框中键入新密码。</p></li><li><p>在“确认密码”框中键入该密码进行确认，然后单击“确定”。</p></li></ol><h3 id="删除受保护分区的密码"><a href="#删除受保护分区的密码" class="headerlink" title="删除受保护分区的密码"></a>删除受保护分区的密码</h3><ol><li><p>右键单击要删除密码的分区选项卡，然后单击“用密码保护此分区”。</p></li><li><p>在“密码保护”任务窗格中，单击“删除密码”。（如果此选项不可用，则表示该分区无密码。）</p></li><li><p>在“取消密码”对话框中，键入当前密码，然后单击“确定”。</p></li></ol><h3 id="设置密码保护选项"><a href="#设置密码保护选项" class="headerlink" title="设置密码保护选项"></a>设置密码保护选项</h3><p>如果您在一段时间内没有使用已解锁的受密码保护分区，此类分区将再次自动锁定。 您可以自定义这段时间，并且可以设置应用于受保护分区的密码保护方式的其他选项。</p><ol><li><p>选择“文件”&gt;“选项”。</p></li><li><p>在“OneNote 选项”对话框中，选择“高级”。</p></li><li><p>在右侧的“密码”下，执行下列任一操作：</p></li><li><p>若要在指定的一段时间后锁定笔记本分区，请选中“在以下时间内未对受密码保护的分区进行操作即将其锁定”，然后选择所需的时间。</p></li><li><p>若要在完成使用笔记本分区后立即将其锁定，请选中“离开受密码保护的分区时即将其锁定”。</p></li><li><p>若要使受密码保护的分区中的笔记暂时对其他程序可用，请选中“允许加载项程序访问解除锁定的受密码保护的分区”。</p></li><li><p>单击“确定”应用首选项。</p></li></ol><h3 id="有关密码的一些重要说明"><a href="#有关密码的一些重要说明" class="headerlink" title="有关密码的一些重要说明"></a>有关密码的一些重要说明</h3><ul><li>密码只能应用于笔记本分区，不能应用于整个笔记本。</li></ul><ul><li>密码区分大小写。创建或输入密码前，请确保关闭 Caps Lock 键。</li></ul><ul><li>OneNote 使用加密来保护受密码保护的分区。如果忘记了密码，任何人都无法为你解锁笔记（甚至 Microsoft 技术支持也不能）。因此，向笔记本分区分配密码和更改密码时，需要特别小心。</li></ul><ul><li>笔记本搜索中不包括受密码保护的分区。 若要在搜索中包括受保护的分区，您必须首先将对应分区解锁。</li></ul><ul><li>除非已解除受保护分区的锁定，否则在任何受保护分区内的页面上使用的笔记标记不会包含在笔记标记摘要中。</li></ul>]]></content>
    
    <summary type="html">
    
      OneNote从入门到实践
    
    </summary>
    
      <category term="常用软件工具" scheme="http://yoursite.com/categories/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
    
      <category term="OneNote" scheme="http://yoursite.com/categories/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/OneNote/"/>
    
    
      <category term="OneNote" scheme="http://yoursite.com/tags/OneNote/"/>
    
  </entry>
  
  <entry>
    <title>高速通道从入门到实践</title>
    <link href="http://yoursite.com/2018/06/08/%E9%AB%98%E9%80%9F%E9%80%9A%E9%81%93%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2018/06/08/高速通道从入门到实践/</id>
    <published>2018-06-08T04:12:15.000Z</published>
    <updated>2018-06-08T04:12:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>阿里云高速通道（Express Connect）服务，帮助您在VPC间、VPC与本地数据中心间搭建私网通信通道，提高网络拓扑的灵活性和跨网络通信的质量和安全性。使用高速通道可以使您避免绕行公网带来的网络质量不稳定问题，同时可以免去数据在传输过程中被窃取的风险。</p><p><strong>VPC间内网通信</strong></p><ul><li>高速通道支持位于相同地域或不同地域，同一账号或不同账号的VPC之间进行内网互通。</li></ul><ul><li>阿里云通过在<strong><code>两侧VPC的路由器上分别创建路由器接口</code></strong>，以及自有的骨干传输网络来搭建高速通道，轻松实现两个VPC之间安全可靠，方便快捷的通信。</li></ul><p><strong>本地数据中心和阿里云上VPC间内网通信</strong></p><ul><li>您可以通过物理专线在物理层面上连接您的本地数据中心到阿里云，然后建立边界路由器和路由器接口来连接数据中心与阿里云VPC。</li></ul><h2 id="基础架构"><a href="#基础架构" class="headerlink" title="基础架构"></a>基础架构</h2><p>基于软件自定义网络（Software Defined Network，简称SDN）架构下的三层Overlay技术和交换机虚拟化技术，阿里云将客户的物理专线接入的端口隔离起来，并抽象成边界路由器。通过目前主流的隧道技术，阿里云将客户的数据包在交换机内部进行封装，在用户的物理专线和VPC的路由器之间加上隧道封装，然后将数据传输到VPC内。</p><p><img src="http://picture.watchmen.xin/channel/base.png" alt="base"></p><h2 id="路由器接口"><a href="#路由器接口" class="headerlink" title="路由器接口"></a>路由器接口</h2><p>路由器接口是一种虚拟设备，具备搭建通信通道并控制其工作状态的功能。</p><p>高速通道通过在两侧的VPC路由器上分别创建路由器接口为两个VPC之间搭建内网通信通道。</p><p>在两个路由器接口建立连接后，两侧的路由器可以通过建立的通道相互发送消息。因此，两个VPC中的资源（比如ECS实例）就可以通过内网进行通信了。</p><p><img src="http://picture.watchmen.xin/channel/interface.png" alt=""></p><h3 id="发起端和接受端"><a href="#发起端和接受端" class="headerlink" title="发起端和接受端"></a>发起端和接受端</h3><p>当两个路由器接口进行互连时，一个扮演连接发起端角色，另一个扮演连接接受端角色。只有发起端路由器接口才可以发起连接，接受端路由器接口只能等待发起端发起连接。发起端和接受端仅用于控制连接建立的过程，在实际进行网络通信时，通信链路是双向的，发起端和接受端没有任何差别。</p><p>对于同账号VPC互通，高速通道提供了同时创建两端的选项。在这种情况下，您不需要手动发起连接，系统会自动发起并建立连接。对于跨账号VPC互通，您必须手动发起路由器接口间的连接。</p><p>发起端与接受端的对比如下表所示。</p><p><img src="http://picture.watchmen.xin/channel/duibi.png" alt="duibi"></p><p><strong>注意：</strong></p><p>和我们传统的路由器的发起和接受概念有点不一样，这里需要明确的指定</p><ul><li>发起端需要指定接受端的路由器接口</li></ul><ul><li>接收端需要指定发起端的路由器接口</li></ul><p>也就是说，这两个接口只能是给这一条通道使用</p><h3 id="连接过程和连接状态"><a href="#连接过程和连接状态" class="headerlink" title="连接过程和连接状态"></a>连接过程和连接状态</h3><p>路由器接口的连接过程为：发起端路由器接口发起连接 &gt; 接受端路由器接口接受连接 &gt; 连接成功。</p><p>在不同的连接过程和阶段，路由器接口的状态也不同如下表所示。路由器接口创建后的初始状态为未连接。</p><blockquote><p>说明：在创建路由器接口时，如果您选择了同时创建两端，系统会自动发起并建立连接，此种情况下路由器接口直接变为已激活状态。</p></blockquote><p><img src="http://picture.watchmen.xin/channel/status.png" alt=""></p><p>整个连接过程如下所示：</p><p><img src="http://picture.watchmen.xin/channel/process.png" alt=""></p><h3 id="路由器接口规格"><a href="#路由器接口规格" class="headerlink" title="路由器接口规格"></a>路由器接口规格</h3><p>高速通道提供小型（10MB-50MB）、中型（100MB-900MB）和大型（1GB-4.5GB）三种规格的路由器接口。</p><p>可选择的路由器接口规格在不同连接场景和不同地域中并不相同。您可以根据具体的配置在购买页面选择合适的路由器接口规格。同地域间VPC互连的路由器接口规格默认为大型2档（2GB）。</p><h3 id="使用限制"><a href="#使用限制" class="headerlink" title="使用限制"></a>使用限制</h3><ul><li><font color="red"><strong>两个VPC之间只能有一对连接成功的路由器接口。</strong></font></li><li><p>路由器接口创建后无法修改连接角色。</p></li><li><p>边界路由器（VBR）必须是发起端。</p></li></ul><h2 id="物理专线"><a href="#物理专线" class="headerlink" title="物理专线"></a>物理专线</h2><p>物理专线是对阿里云接入点和本地数据中心之间建立的网络线路的抽象。您需要通过租用一条运营商的专线将本地数据中心连接到阿里云接入点，建立专线连接。</p><p>专线接入后，您可以创建一个边界路由器（VBR）将您本地数据中心和阿里云连接起来，构建混合云环境，使云上资源可以绕过公网通过私网访问本地数据中心。</p><p>物理专线的私网连接不通过公网，因此与传统的公网连接相比，物理专线连接更加安全、可靠、速度更快、延迟更低。</p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>高速通道物理专线提供以下功能：</p><p><strong>多种连接方式</strong></p><p>您可以选择使用点对点以太网连接或MPLS VPN连接。物理专线支持以太格式的RJ45电口和LC模式光口, 可以提供1Mbps至10Gbps的传输速率。</p><p><strong>冗余连接</strong></p><p>物理专线通过等价路由实现两条物理线路冗余：</p><ul><li><p>如果两条专线接入同地域下不同接入点，则两条线路形成天然冗余。</p></li><li><p>如果两条专线接入同地域下同一个接入点，您可以在申请第二条物理专线时，将第一条物理专线作为冗余线路。</p></li></ul><h3 id="使用限制-1"><a href="#使用限制-1" class="headerlink" title="使用限制"></a>使用限制</h3><p>物理专线使用限制如下：</p><p>物理专线不支持SDH的G.703、V.35格式接口。</p><p>阿里云在每个可接入的地域提供一个或多个接入点，不同的接入点有运营商限制。在申请专线接入前，您需要提交工单获取接入点以及运营商限制信息。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在物理专线接入之后，你会得到一个边界路由器</p><p>边界路由器（VBR）必须是发起端。</p><p>购买物理专线之后，其实不是直接连接到阿里云的机房，而是连接到这个边界路由器，边界路由器的对端再连接VPC的路由器</p><h2 id="边界路由器"><a href="#边界路由器" class="headerlink" title="边界路由器"></a>边界路由器</h2><p>边界路由器（Virtual border router, VBR）是您申请的物理专线接入交换机的产品映射，可以看做是CPE（Customer-premises equipment）设备和VPC之间的一个路由器，作为数据从VPC到本地数据中心的转发桥梁。</p><p>边界路由器同VPC中的路由器一样，同样管理一个路由表。在该路由表中配置路由条目，可以对边界路由器中的流量转发进行管理。</p><p><img src="http://picture.watchmen.xin/channel/vbr.png" alt=""></p><h3 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h3><p>边界路由器提供如下功能：</p><ul><li>作为VPC和本地数据中心的中间路由器，交换数据包。</li></ul><ul><li>在三层子接口模式下，可以识别或附加VLAN(Virtual Local Area Network)标签。</li></ul><ul><li>决定物理专线端口模式：三层路由接口或基于VLAN的三层子接口。</li></ul><ul><li>支持添加BGP动态路由。</li></ul><h3 id="使用限制-2"><a href="#使用限制-2" class="headerlink" title="使用限制"></a>使用限制</h3><ul><li>目前不支持源地址策略路由。</li></ul><ul><li>每个边界路由器有且只有1个路由表。</li></ul><ul><li>每个路由表支持48条自定义路由条目。</li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><h3 id="VPC私网互连"><a href="#VPC私网互连" class="headerlink" title="VPC私网互连"></a>VPC私网互连</h3><p>您可以使用高速通道实现两个VPC间的的私网通信需求，既可以避免绕行公网带来的网络质量不稳定问题，也可以免去数据在传输过程中被窃取的风险。详情请参考跨地域VPC互连和跨账号VPC互连。</p><h3 id="本地数据中心专线接入VPC"><a href="#本地数据中心专线接入VPC" class="headerlink" title="本地数据中心专线接入VPC"></a>本地数据中心专线接入VPC</h3><p>如果您的本地数据中心需要与VPC进行私网通信，您可以使用<strong><code>高速通道的物理专线功能实现两侧的私网通信</code></strong>，您可以选择自行搭建专线接入阿里云或让阿里巴巴的合作伙伴为您搭建物理专线。通过物理专线可以实现本地数据中心和VPC间高质量、高可靠且安全性高的私网通信。您可以使用高速通道实现两个VPC间的的私网通信需求，既可以避免绕行公网带来的网络质量不稳定问题，也可以免去数据在传输过程中被窃取的风险。详情请参考同账号专线接入和跨账号专线接入。</p><h3 id="两个VPC共用NAT网关"><a href="#两个VPC共用NAT网关" class="headerlink" title="两个VPC共用NAT网关"></a>两个VPC共用NAT网关</h3><p>如果您需要两个VPC共用一个NAT网关进行公网通信，您可以使用高速通道实现同两个VPC使用同一个NAT网关来访问公网。</p><p><img src="http://picture.watchmen.xin/channel/vpc_nat.jpg" alt=""></p><h2 id="使用限制-3"><a href="#使用限制-3" class="headerlink" title="使用限制"></a>使用限制</h2><ul><li>同一个路由器上的路由器接口不能互连。</li></ul><ul><li><font color="red"><strong>边界路由器上的路由器接口只能作为发起端。</strong></font></li></ul><ul><li>一对VPC之间只能同时存在一对互连的路由器接口。</li></ul><ul><li>一条物理专线上最多可以存在的边界路由器个数：50个。</li></ul><ul><li>一个用户名下最多可以存在的已激活的路由器接口个数：5个。</li></ul><ul><li>一个路由器上最多可以存在的已激活的路由器接口个数：5个。</li></ul><ul><li>一个账号最多可以在一个接入点接入的物理专线条数：2条。</li></ul><ul><li>一个账号下最多可以存在的空闲边界路由器（没有接口的边界路由器）个数：2个。</li></ul><h1 id="入门实践"><a href="#入门实践" class="headerlink" title="入门实践"></a>入门实践</h1><h2 id="跨地域VPC互连"><a href="#跨地域VPC互连" class="headerlink" title="跨地域VPC互连"></a>跨地域VPC互连</h2><p>本操作以如下同一个账号下的两个VPC为例演示如何使用高速通道实现VPC私网互通。</p><blockquote><p>说明：同账号下同地域和跨地域VPC互连的操作步骤一样。</p></blockquote><p>前提条件</p><ul><li>确保要进行互连的VPC或交换机的网段不冲突。</li></ul><p>文章内容：<a href="https://help.aliyun.com/document_detail/44842.html?spm=a2c4g.11186623.6.550.zI2Wp5" target="_blank" rel="noopener">跨地域VPC互连</a></p><h2 id="跨账号VPC互连"><a href="#跨账号VPC互连" class="headerlink" title="跨账号VPC互连"></a>跨账号VPC互连</h2><p>前提条件</p><ul><li>两个VPC中交换机地址不能冲突。</li></ul><ul><li>已获取双方的阿里云账号ID和路由器ID。</li></ul><p>文章内容：<a href="https://help.aliyun.com/document_detail/44843.html?spm=a2c4g.11186623.6.551.PoqdWg" target="_blank" rel="noopener">跨账号VPC互连</a></p><h2 id="物理专线-1"><a href="#物理专线-1" class="headerlink" title="物理专线"></a>物理专线</h2><p>文章内容：<a href="https://help.aliyun.com/document_detail/44844.html?spm=a2c4g.11186623.6.552.0hqrXn" target="_blank" rel="noopener">物理专线接入</a></p>]]></content>
    
    <summary type="html">
    
      高速通道从入门到实践
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="公有云产品" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%85%AC%E6%9C%89%E4%BA%91%E4%BA%A7%E5%93%81/"/>
    
      <category term="阿里云" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%85%AC%E6%9C%89%E4%BA%91%E4%BA%A7%E5%93%81/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
      <category term="高速通道" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E5%85%AC%E6%9C%89%E4%BA%91%E4%BA%A7%E5%93%81/%E9%98%BF%E9%87%8C%E4%BA%91/%E9%AB%98%E9%80%9F%E9%80%9A%E9%81%93/"/>
    
    
      <category term="高速通道" scheme="http://yoursite.com/tags/%E9%AB%98%E9%80%9F%E9%80%9A%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>软件开发环境－开发环境、测试环境、灰发环境、生产环境的区别</title>
    <link href="http://yoursite.com/2018/06/07/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8D%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E3%80%81%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E3%80%81%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2018/06/07/软件开发环境－开发环境、测试环境、生产环境的区别/</id>
    <published>2018-06-07T14:25:59.000Z</published>
    <updated>2018-06-07T14:25:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>软件开发环境(Software Development Environment，SDE)是指在基本硬件和宿主软件的基础上，为支持系统软件和应用软件的工程化开发和维护而使用的一组软件，简称SDE。它由软件工具和环境集成机制构成，前者用以支持软件开发的相关过程、活动和任务，后者为工具集成和软件的开发、维护及管理提供统一的支持。</p><p>项目部署环境一般可分为四种：</p><ul><li>开发环境</li><li>测试环境</li><li>灰发环境/预生产环境</li><li>生产环境</li></ul><h1 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h1><p>开发环境时程序猿们专门用于开发的服务器，配置可以比较随意，为了开发调试方便，一般打开全部错误报告和测试工具，是最基础的环境。开发环境的分支，一般是feature分支。</p><h1 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h1><p>测试环境就是上线前的测试。一般是克隆一份生产环境的配置，一个程序在测试环境工作不正常，那么肯定不能把它发布到生产服务器上，是开发环境到生产环境的过度环境。测试环境的分支一般是develop分支，部署到公司私有的服务器或者局域网服务器上，主要用于测试是否存在bug，一般会不让用户和其他人看到，并且测试环境会尽量与生产环境相似。</p><h1 id="灰发环境-预生产环境"><a href="#灰发环境-预生产环境" class="headerlink" title="灰发环境/预生产环境"></a>灰发环境/预生产环境</h1><p>1、什么是预发布环境?<br>预发布环境，就是线上环境、正式生产环境，为避免因为测试环境和线上环境的差异性等带来的缺陷漏测而设立的一套环境，其配置等基本和线上一致，只是预发布环境web服务器不在线上集成服务器范围之内，为单独的一台机器；</p><p>2、预发布环境不能被线上用户访问<br>通常这里的技术实现是这样的：把预发布环境的访问域名设置成和线上环境的不一样，通过配置host来访问预发布环境；</p><p>3、预发布环境和线上环境公用数据库，即预发布环境使用的是线上的数据库<br>问题：如果新版本程序需要更改表结构等，比如加个表字段，那么，部署到预发布环境时也需要更改表字段，这个可能会影响线上环境程序代码的运行，咋解决？</p><p>答案：<br>3.1 先把预发布环境使用的数据库切换为测试环境使用的数据库<br>3.2 根据实际部署过程，如果有必要，接着，可有针对性的测试下数据库的变更是否会影响线上当前代码程序的运行(注：个人想法)<br>3.3 把新代码部署到预发布环境，测试程序是否正常运行<br>3.4预发布测试完毕，如果没问题，先上线数据库，即在正式环境执行对应的数据库变更操作<br>3.5 紧接着，把预发布环境连接的数据库切换为线上环境使用的数据库，再次进行预发布环境的测试<br>3.6 最后，如果预发布环境测试通过，则把预发布环境的代码部署到线上生产环境。</p><p>注：<br>1、如果不需要更改数据库表结构等，则无需切换预发布环境环境使用的数据库，即预发布使用线上的数据库。</p><p>2、这里，因为预发布环境本身就是线上环境，测试完预发布，也基本代表线上环境测试完成。这样还可以避免发布到正式环境还得再测一遍的情况</p><p><strong>总结</strong></p><p>预发布环境不能被线上用户访问 </p><p>通常这里的技术实现是这样的：把预发布环境的访问域名设置成和线上环境的不一样，通过配置host来访问预发布环境；</p><p>也就是说，预发布环境其实就是生产环境，只是其所在的服务器，没有被添加到生产服务器所在的负载均衡中，因此从公网是无法直接通过原来的方式进行访问的，在这种情况，我们通过配置hosts等方式来定向的访问这一台</p><h1 id="生产环境"><a href="#生产环境" class="headerlink" title="生产环境"></a>生产环境</h1><p>生产环境是指正式提供对外服务的，一般会关掉错误报告，打开错误日志，是最重要的环境。部署分支一般为master分支。</p><p>三个环境也可以说是系统开发的三个阶段：开发-&gt;测试-&gt;上线，其中生产环境也就是通产说的真实的环境，最后交给用户的环境。</p><h1 id="补充：灰度发布"><a href="#补充：灰度发布" class="headerlink" title="补充：灰度发布"></a>补充：灰度发布</h1><p>预发布环境过后，就是灰度发布了。由于一个项目，一般会部署到多台机器，所以灰度1台至3台，看看新功能是否ok，如果失败则只需要回滚几台，比较方便。注意，由于是灰度发布几种几台，所以一般会使用跳板机，然后进行域名绑定，这样才可以保证只访问有最新代码的服务器。</p><p><strong>什么是灰度发布？</strong></p><p>灰度发布，又名金丝雀发布，或者灰度测试，是指在黑与白之间能够平滑过渡的一种发布方式。在其上可以进行A/B testing，即让一部分用户继续用产品特性A，一部分用户开始用产品特性B，如果用户对B没有什么反对意见，那么逐步扩大范围，把所有用户都迁移到B上面来。</p><p>灰度发布是对某一产品的发布逐步扩大使用群体范围，也叫灰度放量。灰度发布可以保证整体系统的稳定，在初始灰度的时候就可以发现、调整问题，以保证其影响度。</p><p><strong>灰度期：</strong>灰度发布开始到结束期间的这一段时间，称为灰度期。</p><p><strong>灰度发布的意义</strong></p><p>灰度发布能及早获得用户的意见反馈，完善产品功能，提升产品质量，让用户参与产品测试，加强与用户互动，降低产品升级所影响的用户范围。</p><p><strong>灰度发布的实现</strong></p><p>待补充</p>]]></content>
    
    <summary type="html">
    
      软件开发环境－开发环境、测试环境、灰发环境生产环境的区别
    
    </summary>
    
      <category term="IT基础知识" scheme="http://yoursite.com/categories/IT%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="软件开发环境" scheme="http://yoursite.com/categories/IT%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
    
      <category term="软件开发环境" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>高并发之分流限流与降级</title>
    <link href="http://yoursite.com/2018/06/07/%E9%AB%98%E5%B9%B6%E5%8F%91%E4%B9%8B%E5%88%86%E6%B5%81%E9%99%90%E6%B5%81%E4%B8%8E%E9%99%8D%E7%BA%A7/"/>
    <id>http://yoursite.com/2018/06/07/高并发之分流限流与降级/</id>
    <published>2018-06-07T13:05:28.000Z</published>
    <updated>2018-06-07T13:05:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考文献：</p><ul><li><a href="http://www.cnblogs.com/duanxz/p/3465559.html" target="_blank" rel="noopener">高可用服务设计之二：Rate limiting 限流与降级</a></li><li><a href="http://www.cnblogs.com/duanxz/p/4123068.html" target="_blank" rel="noopener">限流算法之漏桶算法、令牌桶算法</a></li></ul><h1 id="分流"><a href="#分流" class="headerlink" title="分流"></a>分流</h1><p>分流一般是指使用7层负载均衡技术，在前端使用正则表达式，匹配相对应的接口URL串，然后将该接口的流量负载转发到后端的指定服务器上【前提是微服务，将接口进行拆分】</p><h1 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h1><p>在开发高并发系统时，有很多手段保护系统，比如缓存、分流、降级和限流。缓存的目的是提升系统访问速度和增大系统处理能力，可谓是抗高并发的银弹。而降级是当服务出问题或者影响到核心流程的性能，需要暂时屏蔽掉，待高峰过去或者问题解决后再打开的场景。而有些场景并不能用缓存和降级来解决，比如稀缺资源（秒杀、抢购）、写服务（如评论、下单）、频繁的复杂查询（评论的最后几页）等。因此，需要有一种手段来限制这些场景下的并发/请求量，这种手段就是限流。</p><p>限流的目的是通过对并发访问/请求进行限速或者一个时间窗口内的请求进行限速来保护系统，一旦达到限速速率则可以拒绝服务（定向到错误页或告知资源没有了）、排队或等待（比如秒杀、评论、下单）、降级（返回兜底数据或者默认数据，如商品详情页库存默认有货）。在压测时，我们能找出每个系统的处理峰值，然后通过设定峰值阈值，当系统过载时，通过拒绝过载的请求来保障系统可用。另外，也可以根据系统的吞吐量、响应时间、可用率来动态调整限流阈值。</p><p>一般开发高并发系统场景的限流有：<strong><code>限制总并发数</code></strong>（比如数据库连接池、线程池）、<strong><code>限制瞬时并发数</code></strong>（如Nginx的limit_conn模块，用来限制瞬间并发连接数）、<strong><code>限制时间窗口内的平均速率</code></strong>（如Guava的RateLimiter、Nginx的limit_req模块，用来限制每秒的平均速率），以及限制远程接口调用速率、限制MQ的消费速率等。另外还可以根据网络连接数、网络流量、CPU或内存负载等来限流。</p><p>Rate limiting 在 Web 架构中非常重要，是互联网架构可靠性保证重要的一个方面。</p><p>从最终用户访问安全的角度看，设想有人想暴力碰撞网站的用户密码；或者有人攻击某个很耗费资源的接口；或者有人想从某个接口大量抓取数据。大部分人 都知道应该增加 Rate limiting，做请求频率限制。从安全角度，这个可能也是大部分能想到，但不一定去做的薄弱环节。</p><p>从整个架构的稳定性角度看，一般 SOA 架构（service-oriented architecture面向服务的架构）的每个接口的有限资源的情况下，所能提供的单位时间服务能力是有限的。假如超过服务能力，一般会造成整个接口服务停顿，或者应用 Crash，或者带来连锁反应，将延迟传递给服务调用方造成整个系统的服务能力丧失。有必要在服务能力超限的情况下 Fail Fast。</p><p>另外，根据排队论，由于 API 接口服务具有延迟随着请求量提升迅速提升的特点，为了保证 SLA 的低延迟，需要控制单位时间的请求量。这也是 Little’s law 所说的。</p><h2 id="限流算法"><a href="#限流算法" class="headerlink" title="限流算法"></a>限流算法</h2><p>常见的限流算法有：令牌桶、漏桶。计数器也可以用来进行粗暴限流实现。</p><ul><li><a href="http://www.cnblogs.com/duanxz/p/4123068.html" target="_blank" rel="noopener">限流算法之漏桶算法、令牌桶算法</a></li></ul><p><strong>令牌桶算法</strong></p><p>令牌桶算法，是一个存放固定容量令牌的桶，按照固定速率往桶里添加令牌。令牌桶算法的描述如下：</p><ul><li>假设限制2r/s，则按照500毫秒的固定速率往桶内添加令牌。</li></ul><ul><li>桶中最多存放b个令牌，当桶满时，新添加的令牌会被丢弃或拒绝。</li></ul><ul><li>当一个n个字节大小的数据包到达，将从桶中删除n个令牌，接着数据包被发送到网络上。</li></ul><ul><li>如果桶中的令牌不足n个，则不会删除令牌，且该数据包被限流（要么丢弃，要么在缓冲区等待）。</li></ul><p><strong>漏桶算法</strong></p><p>漏桶作为计量工具时，可以用于流量整形和流量控制，漏桶算法的描述如下：</p><ul><li>一个固定容量的漏桶，按照常量固定速率流出水滴。</li></ul><ul><li>如果桶是空的，则不需流出水滴。</li></ul><ul><li>可以以任意速率流入水滴到漏桶。</li></ul><ul><li>如果流入水滴超过了桶的容量，则流入的水滴溢出了（被丢弃），而漏桶容量是不变的。</li></ul><p><strong>令牌桶和漏桶对比</strong></p><ul><li>令牌桶是按照固定速率往桶中添加令牌，请求是否被处理需要看桶中令牌是否足够，当令牌数减为零时，则拒绝新的请求。</li></ul><ul><li>漏桶则是按照常量固定速率流出请求，请求流入速率任意，当流入的请求数累积到漏桶容量时，则新流入的请求被拒绝。</li></ul><ul><li>令牌桶限制的是平均流入速率（允许突发请求，只要有令牌就可以处理，支持一次拿多个令牌），并允许一定程序的突发流量。</li></ul><ul><li>漏桶限制的是常量流出速率（即流出速率是一个固定常量值，比如都是1的速率流出，而不能一次是1，下次又是2），从而平滑突发流入速率。</li></ul><ul><li>令牌桶允许一定程序的突发，而漏桶主要目的是平滑流入速率。</li></ul><ul><li>两个算法实现可以一样，但是方向是相反的，对于相同的参数得到的限流效果是一样的。</li></ul><h2 id="应用级限流"><a href="#应用级限流" class="headerlink" title="应用级限流"></a>应用级限流</h2><p><strong>限制总并发/连接/请求数</strong></p><p>对于一个应用系统来说，一定会有极限并发/请求数，即总有一个<strong><code>TPS/QPS</code></strong>阈值，如果超了阈值，则系统就会不影响用户请求或响应得非常慢。因此，我们最好进行过载保护，以防止大量请求涌入击垮系统。</p><p>如MQ（max_connections）、Redis（tcp-backlog）都会有类似的限制连接数的配置。</p><p><strong>限制总资源数</strong></p><p>如果有的资源是稀缺资源（如数据库连接、线程），而且可能有多个系统都会去使用它，那么需要加以限制。可以使用池化技术来限制总资源数，如连接池、线程池。假设分配给每个应用的数据库连接是100，那么本应用最多可以使用100个资源，超出则可以等待或者抛异常。</p><p><strong>限制某个接口的总并发/请求数</strong></p><p>如果接口可能会有并发流量，但又担心访问量太大造成奔溃，那么久需要限制这个接口的总并发/请求数了。因为粒度比较细，可以为每个接口设置相应的阈值。可以使用Java中的AtomicLong或者Semaphore进行限流。Hystrix在信号量模式下也使用Semaphore限制每个接口的总请求数。</p><p>一种实现方式如下：</p><pre><code>try {    if (atomic.incrementAndGet() &gt; 限流数) {        //拒绝请求    }    //处理请求} finally {    atomic.decrementAndGet();}</code></pre><p><strong>限制某个接口的时间窗请求数</strong></p><p>即限制某个接口/服务每秒/每分钟/每天的请求数/调用量。一种实现方式如下：</p><pre><code>LoadingCache&lt;Long, AtomicLong&gt; counter =        CacheBuilder.newBuilder()        .expireAfterWrite(2, TimeUnit.SECONDS)        .build(new CacheLoader&lt;Long, AtomicLong&gt;() {            @Override            public AtomicLong load(Long aLong) throws Exception {                return new AtomicLong(0);            }        });long limit = 1000;while (true) {    long currentSeconds = System.currentTimeMillis() / 1000;    if (counter.get(currentSeconds).incrementAndGet() &gt; limit) {        logger.info(&quot;被限流了:{}&quot;, currentSeconds);        continue;    }    //业务处理}</code></pre><p><strong>平滑限流某个接口的请求数</strong></p><p>Guava RateLimiter提供的令牌桶算法可用于平滑突发限流（SmoothBursty）和平滑预热限流（SmoothWarmingUp）实现。</p><p><strong>分布式限流</strong></p><p>分布式限流最关键的是要将限流服务做成原子化，而解决方案可以使用Redis+Lua或者Nginx+Lua技术进行实现，通过这两种技术可以实现高并发和高性能。</p><p><strong>节流</strong></p><p>有时候我们想在特定时间窗口内对重复的相同事件最多只处理一次，或者想限制多个连续相同事件最小执行时间间隔，那么可使用节流（Throttle）实现，其防止多个相同事件连续重复执行。节流主要有如下几种用法：throttleFirst、throttleLast、throttleWithTimeout。</p><font color="red"><strong>总结方法：</strong></font><p>常见的 Rate limiting 的实现方式</p><p>Proxy 层的实现，针对部分 URL 或者 API 接口进行访问频率限制</p><p><strong>Nginx 模块</strong></p><pre><code>limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;server {    location /search/ {        limit_req zone=one burst=5;    }</code></pre><p>详细参见：<a href="http://www.cnblogs.com/duanxz/p/3977756.html" target="_blank" rel="noopener">《Nginx模块 ngx_http_limit_req_module 限制请求速率》</a></p><p><strong>Haproxy 提供的功能</strong></p><p>详细参见：<a href="http://blog.serverfault.com/2010/08/26/1016491873/" target="_blank" rel="noopener">Haproxy Rate limit 模块</a></p><p><strong>Java、Scala JVM 系应用层实现</strong></p><p>Google Guava 提供了一个 RateLimiter 实现。使用方式简单明了，在自己的应用中简单封装即可，放到 HTTP 服务或者其他逻辑接口调用的前端。</p><p>final RateLimiter rateLimiter = RateLimiter.create(2.0); // rate is “2 permits per second” void submitTasks(List<runnable> tasks, Executor executor) { for(Runnable task : tasks) { rateLimiter.acquire(); // may wait executor.execute(task);} }</runnable></p><p><strong>基于 Redis 功能的实现</strong></p><p>这个在 Redis 官方文档有非常详细的实现。一般适用于所有类型的应用，比如 PHP、Python 等等。Redis 的实现方式可以支持分布式服务的访问频率的集中控制。Redis 的频率限制实现方式还适用于在应用中无法状态保存状态的场景。</p><h1 id="降级"><a href="#降级" class="headerlink" title="降级"></a>降级</h1><p>当访问量剧增、服务出现问题（如响应时间长或者不响应）或非核心服务影响到核心服务的性能时，仍然需要保证服务还是可用的，即使是有损服务。系统可以根据一些关键参数进行自动降级，也可以配合开关实现人工降级。</p><p><strong>降级的最终目的是保证核心服务可用</strong>，即使是有损的。而且有些服务是无法降级的（如加入购物车、结算）。降级也需要根据系统的吞吐量、响应时间、可用率等条件进行手工降级或自动降级。</p><h2 id="降级预案"><a href="#降级预案" class="headerlink" title="降级预案"></a>降级预案</h2><p>在进行降级之前要对系统进行梳理，看看系统是不是可以丢卒保车，从而梳理出哪些必须誓死保护，哪些可以降级。比如，可以参考日志级别设置预案：</p><ul><li>一般：比如，有些服务偶尔因为网络抖动或者服务正在上线而超时，可以自动降级。</li></ul><ul><li>警告：有些服务在一段时间内成功率有波动（如在95%~100%之间），可以自动降级或人工降级并发送告警。</li></ul><ul><li>错误：比如，可用率低于90%，或者数据库连接池用完了，或者访问量突然猛增到系统能承受的最大阈值，此时可以根据情况自动降级或人工降级。</li></ul><ul><li>严重错误：比如，因为特殊原因数据出现错误，此时需要紧急人工降级。</li></ul><p><strong>降级分类</strong></p><ul><li>降级按照是否自动化可分为：自动开关降级和人工开关降级。</li></ul><ul><li>降级按照功能可分为：读服务降级和写服务降级。</li></ul><ul><li>降级按照处于的系统层次可分为：多级降级。</li></ul><p>降级的功能点主要从服务器端链路考虑，即根据用户访问的服务调用链路来梳理哪里需要降级。</p><ul><li>页面降级。</li></ul><ul><li>页面片段降级。</li></ul><ul><li>页面异步请求降级。</li></ul><ul><li><p>服务功能降级。</p></li><li><p>读降级。比如多级缓存模式，如果后端服务有问题，则可以降级为只读缓存，这种方式是用于对读一致性要求不高的场景。</p></li></ul><ul><li>写降级。比如秒杀抢购我们可以只进行Cache的更新，然后异步扣减库存到DB，保证最终一致性即可，此时可以将DB降级为Cache。</li></ul><ul><li>爬虫降级。</li></ul><ul><li>风控降级。</li></ul><p><strong>自动开关降级</strong></p><p>自动降级是根据系统负载、资源使用情况、SLA等指标进行降级。</p><ul><li>超时降级</li></ul><ul><li>统计失败次数降级</li></ul><ul><li>故障降级</li></ul><ul><li>限流降级</li></ul><p><strong>人工开关降级</strong></p><p>比如，上线新功能时进行灰度测试，当新服务有问题时通过开关切换回老服务。</p><h1 id="补充：超时与重试机制"><a href="#补充：超时与重试机制" class="headerlink" title="补充：超时与重试机制"></a>补充：超时与重试机制</h1><p>如果应用不设置超时，可能会导致请求响应慢，慢请求累积导致连锁效应，甚至造成应用雪崩。而有些中间件或框架在超时后会进行重试（如设置超时自动重试两次），读服务天然适合重试，但写服务大多不能重试（如写订单，如果写服务是幂等的，则重试是允许的），重试次数太多会导致多倍请求流量，即模拟了DDoS攻击，后果可能是灾难。因此，务必设置合理的重试机制，并且应该和熔断、快速失败机制配合。在进行代码Review时，一定记得Review超时与重试机制。</p><p>对于非幂等写服务应避免重试，或者考虑提前生成唯一流水号来保证写服务操作通过判断流水号来实现幂等操作。</p><p>在进行数据库/缓存服务器操作时，要经常检查慢查询，慢查询通常是引起服务出问题的罪魁祸首。也要考虑在超时严重时，直接将该服务降级，待该服务修复后再取消降级。</p><h1 id="补充：回滚机制"><a href="#补充：回滚机制" class="headerlink" title="补充：回滚机制"></a>补充：回滚机制</h1><p>回滚是指当程序或数据出错时，将程序或数据恢复到最近的一个正确版本的行为。通过回滚机制可保证系统在某些场景下的高可用。常见的回滚如下：</p><ul><li>事务回滚</li></ul><ul><li>代码库回滚</li></ul><ul><li>部署版本回滚</li></ul><ul><li>数据版本回滚</li></ul><ul><li>静态资源版本回滚。</li></ul><h1 id="补充：压测与预案"><a href="#补充：压测与预案" class="headerlink" title="补充：压测与预案"></a>补充：压测与预案</h1><p>在大促来临之前，研发人员需要对现有系统进行梳理，发现系统瓶颈和问题，然后进行系统调优来提升系统的健壮性和处理能力。一般通过系统压测来发现系统瓶颈和问题，然后进行系统优化和容灾（系统参数调整、单机房容灾、多机房容灾等）。</p><h2 id="系统压测"><a href="#系统压测" class="headerlink" title="系统压测"></a>系统压测</h2><p>压测一般是指性能压力测试，用来评估系统的稳定性和性能，通过压测数据进行系统容量评估，从而决定是否需要进行扩容或缩容。</p><p>压测之前要有压测方案（如压测接口、并发量、压测策略[突发、逐步加压、并发量]、压测指标[机器负载、QPS/TPS]、响应时间[平均、最小、最大]、成功率、相关参数[JVM参数、压缩参数]等），最后根据压测报告分析的结果进行系统优化和容灾。</p>]]></content>
    
    <summary type="html">
    
      高并发之分流限流与降级
    
    </summary>
    
      <category term="IT科学技术知识体系结构-Linux运维方向" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/"/>
    
      <category term="高并发" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
      <category term="分流限流与降级" scheme="http://yoursite.com/categories/IT%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-Linux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91/%E9%AB%98%E5%B9%B6%E5%8F%91/%E5%88%86%E6%B5%81%E9%99%90%E6%B5%81%E4%B8%8E%E9%99%8D%E7%BA%A7/"/>
    
    
      <category term="高并发" scheme="http://yoursite.com/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>python基本用法</title>
    <link href="http://yoursite.com/2018/06/07/python%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2018/06/07/python基本用法/</id>
    <published>2018-06-07T12:13:31.000Z</published>
    <updated>2018-06-07T12:13:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h1><p>输出目标：</p><pre><code>-------- info of  $ -------Name:Age:Job:Salary:&apos;&apos;&apos;</code></pre><p>让输出的内容按照指定的格式进行输出</p><p><strong>传统方式：使用字符串拼接实现</strong></p><p>代码如下：</p><pre><code>name = input(&quot;name: &quot;)age = input(&quot;age: &quot;)job = input(&quot;job:&quot;)salary = input(&quot;salary:&quot;)info = &apos;&apos;&apos;-------- info of &apos;&apos;&apos; +  name +  &quot;&quot;&quot; ------- Name:&quot;&quot;&quot; + name  + &quot;&quot;&quot;Age: &quot;&quot;&quot; + age   + &quot;&quot;&quot;Job: &quot;&quot;&quot; +  job  +  &quot;&quot;&quot;Salary: &quot;&quot;&quot; + salaryprint (info)</code></pre><p>使用注释拼接上变量的形式来创建指定的格式，不建议使用字符串拼接的方式去实现，因为它会开辟好几块的内存空间，效率比较低下</p><p><strong>更高效简单的方法-参数替换</strong></p><p>在shell脚本中，我们使用$符号引用外面定义的变量，在python中也提供了类似的功能。</p><p>在python中使用%s，占位符，相当于$的存在</p><p>代码如下：</p><pre><code>name = input(&quot;name: &quot;)age = int(input(&quot;age: &quot;))job = input(&quot;job:&quot;)salary = input(&quot;salary:&quot;)print(&quot;name&quot;)info = &quot;&quot;&quot;-------- info of %s -----name: %sage: %djob: %ssalary: %s&quot;&quot;&quot;%(name,name,age,job,salary)print (info)</code></pre><p><strong>解释：</strong></p><p>在这里</p><ul><li>%s代表的是string</li><li>%d代表的是 digital</li><li>%f代表的是 float</li><li>int代表的是整型  integer</li></ul><p>注意，在定义age的时候，使用的强制类型转换，因为如果不进行强制类型定义的话，则输入的会使默认的字符类型</p><p>如果想要知道输入的值在程序运行的时候的是什么类型，则可以使用type函数进行查看</p><pre><code>print (type(name))</code></pre><p>因为python是一个强类型定义语言，所以在第一次赋值之后，这个变量的数据类型就固定了，要么强制转换，不然的话就一直是这个数据类型</p><p><strong>更高效简单的方法-format方式</strong></p><p>代码如下：</p><pre><code>name = input(&quot;name: &quot;)age = input(&quot;age: &quot;)job = input(&quot;job: &quot;)salary = input(&quot;salary: &quot;)info = &quot;&quot;&quot;--- info of {_name} ---name: {_name}age: {_age}job: {_job}salary: {_salary}&quot;&quot;&quot; .format(_name = name,            _age = age,            _job = job,            _salary = salary)print (info)</code></pre><p>在日常开发中，建议使用这种方式去格式化输出内容</p><h1 id="用户输入"><a href="#用户输入" class="headerlink" title="用户输入"></a>用户输入</h1><pre><code>username = input(&quot;username: &quot;)password = input(&quot;password: &quot;)print (username + &quot; &quot; + password )</code></pre><p>当使用input函数的时候，我们在输入内容的时候，所输入的内容是直接在屏幕明文显示的</p><p>因此，这里需要隐藏输入的明文显示，此时，使用标准库中的一个模块：getpass</p><p>标准库：直接import就能使用标准库中的模块，不需要再额外安装，因此在安装python的时候，就已经默认安装集成了这个标准库</p><p>我们从标准库中import getpass模块之后，直接调用它的方法</p><p>修改之后的代码如下所示：</p><pre><code>import getpassusername = input(&quot;username: &quot;)password = getpass.getpass(&quot;password: &quot;)print (username,password)</code></pre><p><strong>注意：</strong> getpass在pycharm中有bug，在进行验证的时候可以使用cmd来进行</p><p>输出如下：</p><pre><code>C:\Users\Administrator\PycharmProjects\python14\day1&gt;python password.pyusername: wxhpassword:wxh wxh</code></pre><p><strong>优化之后的代码：</strong></p><pre><code>import getpass_username = &quot;wxh&quot;_password = &quot;wxh123&quot;username = input(&quot;username: &quot;)password = getpass.getpass(&quot;password: &quot;)if username == _username and password == _password :    print (&quot;Welcome user {name} login...&quot;.format(name=username))    print (username,password)else:    print (&quot;Invalid username or password! &quot;)</code></pre><p>输出 如下：</p><pre><code>C:\Users\Administrator\PycharmProjects\python14\day1&gt;python password.pyusername: wxhpassword:Invalid username or password!C:\Users\Administrator\PycharmProjects\python14\day1&gt;python password.pyusername: wxhpassword:Welcome user wxh login...wxh wxh123C:\Users\Administrator\PycharmProjects\python14\day1&gt;</code></pre><h1 id="模块初始"><a href="#模块初始" class="headerlink" title="模块初始"></a>模块初始</h1><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><pre><code>wxh_age = 23print (type(wxh_age))message = &quot;Please input the number of wxh&apos;s age: &quot;guess_age = int(input (message))if guess_age == wxh_age:    print (&quot;yes,you got it. &quot;)elif guess_age &gt; wxh_age:    print (&quot;think smaller...&quot;)else:    print (&quot;think bigger...&quot;)print (&quot;the right answer is {Age}&quot;.format(Age=wxh_age))</code></pre><p>注意：当给变量赋值字符的时候，一定要记得带上引号，不带引号的话表示的是变量。</p><p>这段猜年龄的代码，没有循环效果，猜一次就要执行一次，接下来，我们添加循环功能</p><p>一次执行，猜三次，三次之后再退出</p><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>循环：循环执行</p><p>while:条件匹配循环<br>for：固定次数循环</p><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><blockquote><p>在这里：count = count +1 等价于：count +=1</p></blockquote><p>这里限制猜的次数为3次，如果三次中间有猜中的，直接break退出，不然只有当次数达到3次之后，才会退出这个循环。</p><p>执行之后的输出如下所示：</p><p><strong>代码如下：</strong></p><pre><code>wxh_age = 23message = &quot;Please input the number of wxh&apos;s age,input 00 to quit:  &quot;tag = Truecount = 0while tag:    guess_age = int(input(message))    if guess_age == 00:        break    elif guess_age == wxh_age:        print(&quot;Yes,you get it!&quot;)        break    elif guess_age &gt; wxh_age:        print(&quot;please guess smaller...&quot;)    else:        print(&quot;plwase guess bigger...&quot;)    count = count + 1    if count == 3:        tag = False        print (&quot;\n&quot;)        print (&quot;You have input too many times,quit now!&quot;)print (&quot;\n&quot;)print (&quot;The right age is:{Age} &quot;.format(Age=wxh_age))</code></pre><p>或者</p><pre><code>wxh_age = 23message = &quot;Please input the number of wxh&apos;s age,input 00 to quit:  &quot;tag = Truecount = 0while tag:    guess_age = int(input(message))    if guess_age == 00:        break    elif guess_age == wxh_age:        print(&quot;Yes,you get it!&quot;)        break    elif guess_age &gt; wxh_age:        print(&quot;please guess smaller...&quot;)    else:        print(&quot;plwase guess bigger...&quot;)    count = count + 1    if count == 3:        tag = False        print (&quot;\n&quot;)else:        print (&quot;You have input too many time,quit now!&quot;)print (&quot;\n&quot;)print (&quot;The right age is:{Age} &quot;.format(Age=wxh_age))</code></pre><p>注意，while也可以和else配合使用，当while所执行的条件不成立时，就会执行else块中的语句</p><p><strong>执行后的输出如下：</strong></p><pre><code>D:\software\python\python.exe C:/Users/Administrator/PycharmProjects/python14/day1/guess.pyPlease input the number of wxh&apos;s age,input 00 to quit:  24please guess smaller...Please input the number of wxh&apos;s age,input 00 to quit:  11plwase guess bigger...Please input the number of wxh&apos;s age,input 00 to quit:  28please guess smaller...You have input too many times,quit now!The right age is:23 Process finished with exit code 0</code></pre><p>and</p><pre><code>D:\software\python\python.exe C:/Users/Administrator/PycharmProjects/python14/day1/guess.pyPlease input the number of wxh&apos;s age,input 00 to quit:  11plwase guess bigger...Please input the number of wxh&apos;s age,input 00 to quit:  23Yes,you get it!The right age is:23 Process finished with exit code 0</code></pre><p>and</p><pre><code>D:\software\python\python.exe C:/Users/Administrator/PycharmProjects/python14/day1/guess.pyPlease input the number of wxh&apos;s age,input 00 to quit:  22plwase guess bigger...Please input the number of wxh&apos;s age,input 00 to quit:  00The right age is:23 Process finished with exit code 0</code></pre><p>将上述代码进行优化，添加重复的功能【达到3次之后，询问用户是否需要继续】</p><pre><code>num = 0while num &lt; 3:    guess_age = int(input(message))    if guess_age == 00:        break    elif guess_age == wxh_age:        print (&quot;Yes,you got it !!!&quot;)        break    elif guess_age &gt; wxh_age:        print (&quot;guess smaller...&quot;)    else:        print (&quot;guess bigger...&quot;)    num += 1    if num == 3:      message2 = &quot;you guess too three times, do you want continue? Y/N： &quot;      answer = input(message2)      if answer == &quot;Y&quot;:         num = 0      else:          breakprint (&quot;The answer is 23.&quot;)</code></pre><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>我们将上面的while循环使用for循环的方式进行重新编写</p><p>代码如下：</p><pre><code>wxh_age = 23message = &quot;Please input the number of wxh&apos;s age(input 00 to quit): &quot;for num in range(3):    guess_age = int(input(message))    if guess_age == 00:        break    elif guess_age == wxh_age:        print (&quot;Yes,you got it!&quot;)        break    elif guess_age &lt; wxh_age:        print (&quot;guess bigger...&quot;)    else:        print (&quot;guess smaller...&quot;)else:        print (&quot;you have tried too many times...&quot;)print (&quot;The right answer is 23 &quot;)</code></pre><p>输出数字代码：</p><pre><code>for i in range(0,10,2):    print (&quot;loop&quot;,i)</code></pre><p>注意，python中的步长是写在后面的，默认的步长是1</p><p>循环嵌套，查看效果【每大循环一次，就小循环一次】</p><p>代码如下：</p><pre><code>for i in range(3):    print (&quot;-------&quot; + str(i)+ &quot;------&quot;)    for j in range(3):        print (j)</code></pre><p>执行之后的输出如下所示：</p><pre><code>-------0------012-------1------012-------2------012</code></pre><h1 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h1><p><strong>编写登录接口</strong></p><ul><li>输入用户名密码【需要允许多对用户名密码】</li><li>认证成功之后，显示欢迎信息</li><li>输出三次密码之后进行锁定 【可以根据用户名进行检测，那么这个信息就需要保存在某一个地方】</li></ul><p><strong>多级菜单</strong></p><ul><li>三级菜单【省市县】【例如，浙江省–&gt;杭州市–&gt;xx县/区】</li><li>可依次选择进入各个子菜单</li><li>所需新知识点：列表，字典</li></ul><p>一打开程序，列出中国所有的省，选择一个省，列出下面所有的城市，选中一个城市，再列出下面所有的县</p><p>在任何一个级别，可以返回上一级</p><p>在任何一个级别的时候，可以整个退出程序，输入例如quit等退出程序</p><h1 id="作业完成"><a href="#作业完成" class="headerlink" title="作业完成"></a>作业完成</h1><p><strong>登录接口：</strong></p><p>代码如下：</p><p><strong>多级菜单：</strong></p><p>代码如下：</p>]]></content>
    
    <summary type="html">
    
      python基本用法
    
    </summary>
    
      <category term="编程语言" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"/>
    
      <category term="老男孩视频学习笔记" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/%E8%80%81%E7%94%B7%E5%AD%A9%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="day01" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/%E8%80%81%E7%94%B7%E5%AD%A9%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/day01/"/>
    
      <category term="Python基本用法" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/%E8%80%81%E7%94%B7%E5%AD%A9%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/day01/Python%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
    
    
      <category term="老男孩视频" scheme="http://yoursite.com/tags/%E8%80%81%E7%94%B7%E5%AD%A9%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
</feed>
