<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[RSS介绍及使用]]></title>
    <url>%2F2018%2F02%2F04%2FRSS%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[前言参考资料 http://www.ruanyifeng.com/blog/2006/01/rss.html]]></content>
      <categories>
        <category>IT基础知识</category>
      </categories>
      <tags>
        <tag>RSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux进程管理/性能分析]]></title>
    <url>%2F2018%2F01%2F29%2FLinux%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[前言在过去的一个多月时间，一直在思考运维的工作重点和定位，因为在工作中会不断有琐事在掠夺个体的时间，导致很多人陷入了看起来很忙，但是在工作三五年之后，发现自己掌握的知识和方法论十分有限，在经过这么一段混乱到有序的升维阶段后，算是看清了一点前方的路。 个人觉得，运维工作，是整个软件开发生命周期的一环非常重要的环节，而软件生命周期说到底就是围绕着人、需求、软件产品也即应用程序等内容来进行，而目前阶段（原谅我是运维菜鸟），主要矛盾应该是应用程序，也就是围绕着程序和进程展开的一系列活动，那说到进程，这里就能很清晰的明确关注点了，那就是进程赖以生存的资源：CPU、内存、磁盘、网络、操作系统，那么我们运维的重点其实就是围绕这这些内容来展开，包括监控、安全、云、存储、大数据、自动化等等的一切目的就是更好更快更合理的调配这些资源，所以，今天这篇文章，将要围绕着进程管理的这几个方面来展开，记录下一些相关的重要命令，方便后续快速排障和分析问题。 有关这段时间的感悟，也就是运维的进阶，后续会专门写一篇文章来讲讲linux运维工程师，包括岗位职责、成长路线、具体实施方法、运维思想以及个人从业至今的一些感悟等等，不知能否算的上是干货，但至少是个人的一点愚见，写好之后，会在此处放上链接。 程序和进程有关linux程序和进程知识，因现阶段无法提供深层次的讲解，不敢妄自菲薄，所以暂时搁置。 ##命令说明具有很强针对性的命令将会被归类到具体的资源目录下，一次能查看2个以上的命令将归类到综合命令目录下。 操作系统CPU内存磁盘网卡流量、网络带宽网络通道情况说明目前的架构基本上都是C/S或者B/S架构，那么client端访问server端和server端返回数据给client都是经由网络这条通道来实现的。因此，畅通的网络是提供服务的前提和基础，对网络状况的分析、排查、故障定位非常重要。 综合命令glancesglances是一款用Python开发的系统状态监控工具，它的监控指标也特别的丰富。基本包含了常用的所有指标。这也是个人常用的一个命令，强烈推荐。 安装glances CentOS系统中由epel源提供安装。安装过程: yum -y install epel-release yum -y install glances 安装后的启动界面如下：glances 可以使用交互式命令打开和关闭某类监控，改变监控指标单位，改变进程排序列。 a：自动对进程排序c：根据 CPU 使用率对进程排序m：根据内存使用率对进程排序i：根据 I/O 速率对进程排序d：关闭/开启 磁盘 I/O 状态信息f：关闭/开启 文件系统状态信息1：全局 CPU 状态 / 单个显示 CPU 状态u：显示网络接口的累积流量 使用htopHtop是Linux 系统中的一个交互式的系统监控和进程查看工具，它被设计用来取代传统的 Unix 系统监控工具 top。Htop 的界面更加直观，功能更加强大，实乃居家旅行杀人越货的必备神器。 安装在CentOS/RHEL系统中，htop由epel源提供安装。安装过程： yum -y install epel-release yum -y install htop 安装后的启动界面如下： 这里显示了系统的 CPU使用率，平均负载，内存使用情况，Swap 使用情况，网络接口流量速率，磁盘 I/O 速率，挂载分区的空间使用率以及进程状态等信息。 使用glances 可以使用交互式命令打开和关闭某类监控，改变监控指标单位，改变进程排序列。 以下为常用参数： a：自动对进程排序 c：根据 CPU 使用率对进程排序 m：根据内存使用率对进程排序 i：根据 I/O 速率对进程排序 d：关闭/开启 磁盘 I/O 状态信息 f：关闭/开启 文件系统状态信息 1：全局 CPU 状态 / 单个显示 CPU 状态 u：显示网络接口的累积流量 dstatdstat 是一款功能非常强大的系统性能监控工具，它整合了 vmstat，iostat，netstat 和 ifstat 四款工具的功能。 安装在CentOS/RHEL系统中，dstat由epel源提供安装。安装过程： yum -y install epel-release yum -y install dstat 使用-c: 显示cpu性能指标相关的统计数据 -d: 显示disk相关的速率数据 -g: 显示page相关的速率数据 -i: 显示interrupt相关的速率数据 -l: 显示load average相关的统计数据 -m: 显示memory相关的统计数据 -n: 显示网络收发数据的速率 -p: 显示进程相关的统计数据 -r: io请求的速率 -s: 显示swap的相关数据 -y: 显示系统相关的数据，包括中断和进程切换 –top-cpu：显示最占用CPU的进程 –top-bio：显示最消耗block io的进程 –top-io：最占用io的进程 –top-mem：显示最占用内存的进程 –ipc: 显示进程间通信相关的速率数据 –raw: 显示raw套接的相关的数据 –tcp: 显示tcp套接字的相关数据 –udp: 显示udp套接字的相关数据 –unix: 显示unix sock接口相关的统计数据 –socket: 显示所有类型套接字的相关数据 -a: 相当于-cdngy dstat 还可以支持插件工作，它的插件位于 /usr/share/dstat 目录中，可以使用这些插件对 mysql 等程序进行监控。]]></content>
      <categories>
        <category>linux进程管理</category>
      </categories>
      <tags>
        <tag>进程管理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown语法]]></title>
    <url>%2F2018%2F01%2F25%2FMarkdown%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Markdown介绍Markdown 是一种轻量级标记语言，它以纯文本形式(易读、易写、易更改)编写文档，常用的标记符号也不超过十个，并最终以HTML格式发布,让写作者专注于写作而不用关注样式。 划重点： 轻量级 标记语言 纯文本，所以兼容性极强，可以用所有文本编辑器打开。 让你专注于文字而不是排版。 格式式转换方便，Markdown 的文本你可以轻松转换为 html、电子书等。 Markdown 的标记语法有极好的可读性，常用的标记符号不过十来个 参考资料看完我这篇文章，再看完我下面推荐的这些内容，然后对比归纳总结，认真实践后，可以说在平常工作学习中完全够用。 官方资料 Markdown 语法说明 (简体中文版) Markdown 语法介绍 易读易写!-MarkDown语法说明 个人文章 献给写作者的 Markdown 新手指南 Markdown——入门指南 Markdown 基本语法 编辑器 个人在用的编辑器是MarkdownPad 2。各个工具之间相差不会很大，熟练掌握快捷键是提高效率的好方法 核心理念Markdown 的目标是实现「易读易写」，成为一种适用于网络的书写语言。。不管从任何角度来说，可读性，都是最重要的。Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像强调。 划重点： 语法是非常简单的符号 即写即读 兼容HTMLMarkdown 的构想不是要使得 HTML文档更容易书写。HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。 HTML是一种发布的格式，而Markdown 是一种书写的格式。也因此，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。 —常用操作标题（MarkdownPad中快捷键为Ctrl+1/2/3/4）：Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题），例如： This is an H1 ============= This is an H2 ------------- 任何数量的 = 和 - 都可以有效果。但是这种形式只支持2层标题。 类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，例如： # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 强调在Markdown中，可以使用 和 _ 来表示斜体和加粗。*单个为斜体，2个为加粗 加粗（MarkdownPad中快捷键为Ctrl+b）：加粗部分使用方式如下： **Coding，让开发更简单** __Coding，让开发更简单__ 实际展示效果如下： Coding，让开发更简单 Coding，让开发更简单 斜体（MarkdownPad中快捷键为Ctrl+l）：斜体部分的使用如下： *Coding，让开发更简单* _Coding，让开发更简单_ 实际展示效果展示如下： Coding，让开发更简单 Coding，让开发更简单 列表无序列表（MarkdownPad中快捷键为Ctrl+u）：* list1 前面使用*号 - list2 前面使用-号 + list3 前面使用+号 效果如下： list1 list2 list3 有序列表(MarkdownPad中快捷键为Ctrl+shift+o）：1. list1 使用数字+英文的点号，空格后接数据 2. list2 效果如下： list1 list2 区块引用（MarkdownPad中快捷键为Ctrl+q）&gt; 数据1 使用&gt;号 &gt; 数据2 &gt; &gt; 二级引用 注意区块引用可以包含多级引用 &gt; 实际效果展示： 数据1 数据2 这是二级引用 三级引用 代码区块（MarkdownPad中快捷键为Ctrl+k）：代码区块包括3种，文字内和单独一行以及指定代码格式的区块行 文字内加区块，不会加空白处底纹使用``（数字1左边，ESC下面的按键） 实际效果展示：在文件中含有代码区块是什么样子 整行的代码区块行，会加空白处底纹（快捷操作：全部选中然后敲Tab）缩进4个空格或者一个制表符（tab键）或者将代码块包裹在代码块包裹在 “` 之间（避免无休止的缩进）。 或者 123require 'redcarpet'markdown = Redcarpet.new("Hello World!")puts markdown.to_html 实际效果展示 123require 'redcarpet'markdown = Redcarpet.new("Hello World!")puts markdown.to_html 实际效果展示： 现在的效果就是整整一个的区块行，如果这段代码比较长的话，那么markdown就会在下面生成一个查看条，供用户左右拉取调整，就是如现在所示。 指定代码格式的区块行**123456789 $ 数据内容1 $ 数据内容2 **```** 此处以bash格式的内容进行举例说明实际效果展示：```bash$ line1-test1$ line2-test2 分割线/分隔线（暂无快捷键）一行中用三个以上的星号、减号、底线来建立一个分隔线，可以在字符之间加入空格，也可以不加空格 * * * *** ***** --- - - - 实际效果展示如下： 网页链接网页链接有2种方式，一种是直接显示链接，一种是通过文字进行跳转 直接显示&lt;https://www.baidu.com&gt; 用&lt;&gt;尖括号将内容包起来，markdown就会自动把它转成链接。网页链接、邮箱链接等都采用这种方式 实际效果展示如下：这段话中将要插入百度https://www.baidu.com的链接 文字跳转More info: [Server](https://hexo.io/docs/server.html) 前面是解释性说明，[]内是可以跳转的文字，()内是真正访问的地址。 实际效果展示如下： 请点击百度调整到百度页面 图片链接图片链接分为2部分，一种是在文字中，通过文字来链接到图片位置，用户需要点击这个文字链接去查看图片，优点是使文字更简约，缺点是无法直观的看到图。因此，第二种方式是直接在文章中显示图片。 我们把这两种方式分别称之为：行内式和参考式 行内式行内式的图片语法看起来像是： ![Alt text](/path/to/img.jpg) 参考案例：![Alt text](/path/to/img.jpg &quot;Optional title&quot;) 详细叙述如下： 一个惊叹号 ! 接着一个方括号，里面放上图片的替代文字 接着一个普通括号，里面放上图片的网址， 最后还可以用引号包住并加上 选择性的 ‘title’ 文字。 参考式参考式的图片语法则长得像这样： ![Alt text][id] 「id」是图片参考的名称，图片参考的定义方式则和连结参考一样： 参考案例：[id]: url/to/image &quot;Optional title attribute&quot; 表格普通表格： First Header | Second Header | Third Header ------------ | ------------- | ------------ Content Cell | Content Cell | Content Cell Content Cell | Content Cell | Content Cell 设置表格两边内容对齐，中间内容居中，例如： First Header | Second Header | Third Header :----------- | :-----------: | -----------: Left | Center | Right Left | Center | Right 实际效果展示： First Header Second Header Third Header Left Center Right Left Center Right 文本居中居中使用html方式添加，格式如下： 1&lt;center&gt;这一行需要居中&lt;/center&gt; 添加空行&lt;br /&gt; 使用该方法进行插入 反斜杠转义\*literal asterisks\* 使用这种方式来输出*号 实际效果展示： *literal asterisks*]]></content>
      <categories>
        <category>常用软件工具</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TotalCommander常用快捷键]]></title>
    <url>%2F2018%2F01%2F25%2FTotalCommander%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%2F</url>
    <content type="text"><![CDATA[TC介绍定位选择实际]]></content>
      <categories>
        <category>常用软件工具</category>
      </categories>
      <tags>
        <tag>TC操作</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F01%2F23%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is my first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. 前言之前使用阿里云结合wordpress的方式搭博客，但是自己维护起来不是太方便，云服务器一旦攻击，数据是个问题。之后在51cto和csdn上写了一阵，但是要受到平台的限制。最近发现github有博客功能(几年前就推出了，竟然现在才发现)，完美解决这些问题。github提供空间，用户自行选择博客框架，专注于内容，大部分人应该还是喜欢这种简约风主题。目前这个博客使用github-pages+Hexo来实现。 参考资料搭建 https://zhuanlan.zhihu.com/p/26625249 http://eleveneat.com/2015/04/24/Hexo-a-blog/ 进阶 主要参考官方资料 Hexo文档 https://hexo.io/zh-cn/docs/ Next主题使用手册 http://theme-next.iissnan.com/ 根据官方资料，按图索骥，基本上都能很好的把所有功能实现出来。使用问题可以随时沟通交流 markdown语法 关于markdown的使用，可以看我的这篇博文 Markdown语法 Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
