<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[个人认知知识体系构建理论及实践]]></title>
    <url>%2F2018%2F02%2F08%2F%E4%B8%AA%E4%BA%BA%E8%AE%A4%E7%9F%A5%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E6%9E%84%E5%BB%BA%E7%90%86%E8%AE%BA%E5%8F%8A%E5%AE%9E%E8%B7%B5%2F</url>
    <content type="text"><![CDATA[感谢我的妹妹，她让我变得更好。我驱使自己变得更好，让自己时刻保持清醒，时刻保持斗志，只为了让她尽量少承受一点这社会的残酷，让她有选择自己想要的生活方式的自由，让她可以有思想有能力去做一些对社会有益的事，让她在对生活、感情、事业上感到困惑和遇到困难的时候身边有个人可以帮助她。 缘起何处过去的一段时间，发生了几件对我产生重大影响的事，我从而开始真正深度思考所谓的人生，颇有一点王阳明创建理学时的处境 2017年6月份，所负责项目合同终止，心情无法言表，一个是不舍，一个是刚好暴露出一个之前一直忽视的问题，也就是下面内容，这个问题出现可以说时机非常恰当。 在6-7月这段时间内，内心非常焦虑，主要原因是对自身能力的不满，面临找工作，发现自己什么都不会，然后发现身边这群朋友同学同事不思进取已经到了令人发指的程度。说到底，还是自己水平太差，当自身所处的这个圈子里面，你是最牛逼的人，那么最恐怖的事情已经发生了。 我需要突破，我开始焦虑，我开始每天疯狂的转动大脑，可是这就和电脑一样，CPU过热，散热不及时是会死机的。最疯狂的时候，一天出现了将近10次的失忆感觉，失忆之后，我需要重新回忆起我是谁，我现在在哪，之后我又开始思考，可能大部分人一辈子都没有这种感觉。 就这样持续了将近半个月之后，抵抗力急剧下降，也因此被病毒占领身体，得上了:水痘 在最严重的一个晚上（父亲第二天到京照顾，此时还没到），记得很清楚是大概半夜12点时，全身水泡，发着高烧，下不了床，身体处于虚脱状态，身边没有一个人，只有一间房一张床一个人（水痘会传染，室友已经搬出去了，医生也是不允许住院）。这个时候有一种游离在生与死边缘的感觉，我开始思考第二天我要起不来再也见不到早上的太阳怎么办，我开始思考我的家人怎么办，我的妹妹还需要我，我开始思考我的这25年都做了什么，发现25岁的我什么都不会，更为重要的是我发现，我不是从25岁，从这个晚上才开始有这种感觉，在3年前，在5年前，在20岁，在18岁，在15岁，甚至在10岁，我就有这种感觉。 我不愿再这样度过我的一生。 关于为什么一直以来会有这种感觉，是什么导致所谓一事无成的事情发生，在后来看了听了心理学一些资料后才慢慢明白。6 目前整个社会正在处于知识型向认知型转变，我们需要有一个清楚的认识。 避免被时代淘汰，或者说是适应这个社会，继而有能力改变一些东西，需要我们不断提高思想的纬度去思考如何应对变化，而如何提高纬度的具体理论指导和实践方法正是我下面的内容。 这篇文章，目的是记录我辅导教育我妹妹的过程，如果证实确实可行，那么有机会我要出版成书，并投身于教育工作，这也是我的终极目标：制定一定确实可行的方案，帮助所有缺乏资源和方法的家长培养出人才，以及中途才接触到的觉悟的人根据此。 少年强则国强，则民族强，则人类强，则有改变世界，探索宇宙的能力。 路线所有的学科分类，都是后人总结归纳人为划分出来的！ 各学科知识相辅相成，互相促进，不管成年之后，主攻那个学科方向，都需要对各个学科的重要基础知识有一定的了解和掌握。 所涉及学科主要包括如下学习所有学科的基础 身体机能（知悉生物规律，才能有后续的高效时间管理） 性教育 时间管理 学习方法/思维方式 历史 语文 数学 语言学（英语） 物理学 生物学 化学 地理 当从校园步入社会开始工作，你就会用上大量的地理知识，比如南方北方的分界线、差异的习俗文化，比如外出旅游时当地景观的形成原因等等，。 自然科学 体育 哲学 文学（小说、散文、诗歌等） 经济学（财务管理等） 社会学（管理学、新闻传播） 心理学 宗教 天文学 医学 艺术学（音乐、美术、设计） 政治学（法学） 教育学（家庭教育、学校教育） 军事学 信息技术（包括计算机技术等） 农业/园林学 确定目标基础学科 身体机能 目标： 知悉生物规律 总结： 充分了解了我们的身体机能之后，我们才能有后续的高效时间管理 在0-10岁阶段，记忆力和理解力都较差在10-20岁阶段，记忆力和理解力逐步增强在20-30阶段，记忆力在增长，但是速度下降，但是理解力依旧在持续增长中在30-50阶段，记忆力在逐步下降，但是理解力在逐步提升，在50岁时达到巅峰在50之后，各项技能开始下降 因此，在小学阶段，也因为开设的科目较少（两语一数三门课），在这个阶段，在父母的督促下，花费一定的时间去记忆，基本上就可以取得不错的成绩。也就是说，在这个阶段，家长们不要过分的注重成绩，不需要刻意追求班级第一第二，这个阶段要注意培养孩子的理解力。 在10-20岁阶段，也就是中学阶段，这个是拉开差距的阶段，我们可以看到很多小学成绩非常好的人在初中高中的成绩并不是很理想，这是因为，他们还没有适应中学的学习模式，在这个时间阶段，运用理解力才是核心，而不是和小学一样，光使用记忆力就可以达到不错的效果，因为慢慢的所学的科目在不断的增加，还沿用之前的方式，首先时间上就不允许。因此不过光看到孩子成绩上不去责怪孩子，这个时候要想办法去引导孩子，培养起孩子的理解力。 理解力可以说是大树的根基，在之后的学习工作中时重中之重 打个比方来说小学的程度是1+2+3+…+10初中的程度是1+2+3+…+100（光靠记忆也可以，但是高效的理解力非常重要）高中阶段是1+2+3+4+….+100000(靠记忆力已经不行，必须运用理解力) 性教育 目标： 了解自我 时间管理 的 资料知乎live： 学习方法/思维方式 &gt;的 &gt;的 重要学科 历史 语文 数学 语言学（英语） 物理学 生物学 化学 地理 自然科学 体育 哲学 文学（小说、散文、诗歌等） 经济学（财务管理等） 社会学（管理学、新闻传播） 心理学 宗教 天文学 医学 艺术学 政治学（法学） 教育学（家庭教育、学校教育） 军事学 信息技术（包括计算机技术等） 农业/园林学 制定计划基础学科 身体机能 性教育 时间管理 学习方法/思维方式 重要学科 历史 语文 数学 语言学（英语） 物理学 生物学 化学 地理 自然科学 体育 哲学 文学（小说、散文、诗歌等） 经济学（财务管理等） 社会学（管理学、新闻传播） 心理学 宗教 天文学 医学 艺术学 政治学（法学） 教育学（家庭教育、学校教育） 军事学 信息技术（包括计算机技术等） 农业/园林学 执行计划持续/坚持]]></content>
      <categories>
        <category>个人认知知识体系构建</category>
      </categories>
      <tags>
        <tag>认知知识体系</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[什么是字符集和字符编码？utf8、GBK等说的又是什么？]]></title>
    <url>%2F2018%2F02%2F08%2F%E4%BB%80%E4%B9%88%E6%98%AF%E5%AD%97%E7%AC%A6%E9%9B%86%E5%92%8C%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%EF%BC%9Futf8%E3%80%81GBK%E7%AD%89%E8%AF%B4%E7%9A%84%E5%8F%88%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[参考资料https://www.cnblogs.com/skynet/archive/2011/05/03/2035105.html http://cenalulu.github.io/linux/character-encoding/ 前言正文部分字符集字符编码Linux中的实现]]></content>
      <categories>
        <category>IT基础知识</category>
        <category>字符集及字符编码</category>
      </categories>
      <tags>
        <tag>tag1</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[zabbix的历史数据与趋势数据]]></title>
    <url>%2F2018%2F02%2F06%2Fzabbix%E7%9A%84%E5%8E%86%E5%8F%B2%E6%95%B0%E6%8D%AE%E4%B8%8E%E8%B6%8B%E5%8A%BF%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[参考链接官方文档 zabbix history trends历史与趋势数据详解 zabbix配置操作详解（三） Zabbix系统中的历史数据和趋势数据 正文历史与趋势历史数据和趋势数据是Zabbix系统中对采集到的监控项数据进行存储的两种方式。 历史根据设定的时间间隔保持每个收集的值， 而趋势是每个小时产生一个值（一条信息），内容为历史数据在一个小时内的平均值、最大值、最小值以及这一个小时内该监控项目所采集到的数据的个数。 在zabbix中的配置在监控项配置页面进行定义，在这里，我的配置是历史数据保留15天，趋势数据保留90天。如下图所示： 区别联系详解历史和趋势数据它们既有区别又有联系。 历史数据： Zabbix系统针对每个监控项目在每次采集时所收集到的数据，这个数据保存Zabbix系统数据库的历史表中，这就是所谓的历史数据。 因为每次所采集到的数据都保存在历史表中，所以如果监控项目的更新间隔越小，则在固定时间内所保存到历史表中的数据就越多。如果每个监控项目的更新间隔是30秒的话，则两个小时，该监控项目在Zabbix数据库的历史表中就会产生240条记录，一天就会产生2880条记录。 如果我们的Zabbix系统只监控一台被监控主机，且这台被监控主机只有一个被监控项目，那么每天产生2880条记录确实不值得一提的。但是，当我们监控系统所监控的项目比较多时，则这个数据量是非常大的。 比如说，如果我们监控系统监控1000个监控项目，且每个监控项目的更新间隔都是30秒，则每天历史表中就会产生2880*1000=2880000条记录，也即近300万条记录。而1000个监控项目可以监控多少主机呢？我们以48口的交换机为例，单监控每台交换机的每个端口的流量，则一台48口的交换机就有96个监控项目。所以，如果我们仅监控这样的48口的交换机，1000个监控项目只差不多只够监控10台这样交换机。由此可见，如果我们所监控主机的数量稍微多一点，或者更确切的来说，我们所监控的项目稍微多点，则Zabbix系统每天在其数据库中所产生的记录是非常大的。 因此，我们建议，如非必须的，我们在配置监控项目时，应尽量减小历史数据的保留天数，以免给数据库系统带来很大的压力。 趋势数据： 而趋势数据则不同，对于相同的更新间隔，系统所产生的趋势数据的数量远远没有历史数据那么庞大。对同一个监控项目，之所以趋势数据的数据量要远远小于历史数据的数据量，是由趋势数据的取值方式决定的。 趋势数据取值方式是，它取对应监控项目的历史数据在一个小时内的平均值、最大值、最小值以及这一个小时内该监控项目所采集到的数据的个数。 因此，不管一个监控项目的更新间隔是多少，它所对应的趋势数据在数据库中的记录都只有一条。更新间隔越小，仅可能导致数据个数增大，而不会影响该监控项目在趋势表里的记录条数的。 由此，或许你觉得趋势数据很不准确，你还是愿意保留更长时间的历史数据，以便查看较长时间的数据图。其实不是这样的，因为在Zabbix系统数据库的趋势表里不但保留一个小时内历史数据的最大值、最小值和平均值，而还保存这一个小时内所采集到的数据个数。因此，在要求并不是很高的场合，使用趋势数据绘出的监控项目的数据图的走势与用历史数据绘出的数据图的走势差别不会很大的。 不管是历史数据还是趋势数据，都会周期性被Zabbix服务器端一种称之为“主妇（housekeeper）”进程进行清理，它会周期性的删除过期的历史数据和趋势数据。 也正是因为这个进程的存在，才会使Zabbix系统数据的数据量不会一直的彭胀下去。而实际上，如果我们在保持Zabbix系统的被监控主机和被监控项目不变，且不更改监控项目的更新间隔的情况下，Zabbix系统的数据库的数据量会在增长到一定的数据量后不再增长，而是基本维持在这个数据量上不变。 “主妇”进程清理历史数据和趋势数据的频率可以在Zabbix服务器端组件(或服务器代理组件)的配置文件zabbix_server.conf中进行配置，它的配置项是HousekeepingFrequency。 特别注意： 1、 如果监控项目的“保留历史数据(天)”配置项被设置成0时，则数据库历史表中仅保留该监控项目所采集的最后一条数据，其它历史数据将不会被会保留。而且，引用该监控项目的触发器也只能使用该项目所采集的最后数据。因此，此时如果在触发器里引用该项目时使用max、avg、min等函数，其将没有意义。 2、 如果监控项目的“保留趋势数据(天)”配置项被设置成0时，则该项目在系统数据库的趋势表里将不保留任何数据。 配置建议具体该配置成什么样的周期，需要根据监控项以及数据库的配置以及对数据查看的要求程度来决定。这里只给出相关建议。 历史数据配置首先我们需要知道当前mysql的存储情况。在zabbix的前端页面上，我们可以看到如下图所示信息： 这个数值就是NVPS，也就是每秒处理平均数量（Number of processed values per second) 计算公式如下： 历史数据大小=NVPSx3600x24x365(天数)x50B 每个监控项大小约为50B，每秒条数为NVPS，一小时3600秒，一天24小时，一年365年。 具体单个监控项大小取决于数据库引擎，通常为50B 例如： 假设有6W个监控项，刷新周期都为60秒（我这里为30秒），那么每秒将会产生1000条数据，也就是每秒会向数据库写入1000条数据。如果我的历史数据保留天数为90天，那么需要的空间大小如下： 1000x3600x24x90x50=388 800 000 000(B) (约为362G，如果保存一年则为：362x4=1448G) 趋势数据配置因为趋势数据是每小时每个监控项一条记录，因此可以计算出大致所占的空间，其计算公式如下： 趋势数据大小=监控项个数x24x365(天数)x128B 每一个监控项的大小约为128B，每小时产生一条记录，一天24小时，一年365天 具体单个监控项大小取决于数据库引擎，通常为128B 例如： 假设有6W个监控项，保存一年的趋势数据，那么需要的空间如下： 60000x24x265x128=67 276 800 000(B) （约为67GB） 总结通过上面的计算对比，相信可以很直观的看到差别，在同样一年的情况下，历史与趋势所占存储空间的比例为：1448/67。 所以，具体选择什么周期需要根据公司的业务及实际情况（硬件配置等）来决定，并没有一个统一的标准，遵循这个公式，都可以很明确的计算预估出数据量情况。]]></content>
      <categories>
        <category>运维监控体系</category>
        <category>zabbix</category>
      </categories>
      <tags>
        <tag>zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[运维蜘蛛理论]]></title>
    <url>%2F2018%2F02%2F06%2F%E8%BF%90%E7%BB%B4%E8%9C%98%E8%9B%9B%E7%90%86%E8%AE%BA%2F</url>
    <content type="text"><![CDATA[前言关于运维思想方面可以关注我的分类：运维思想 关于职场思想方面可以关注我的分类：职场思想 总结也就是说，干到最后，我们都是一个：运维蜘蛛侠 在其他行业，也同样可以遵循这个理论（基础知识都必须掌握，但是关注专业知识领域不同），成为：具体行业的蜘蛛侠 这也就是为什么我的昵称叫做：运维蜘蛛侠]]></content>
      <categories>
        <category>运维思想</category>
      </categories>
      <tags>
        <tag>运维蜘蛛理论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[autohotkeye常用操作]]></title>
    <url>%2F2018%2F02%2F06%2Fautohotkeye%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[前言AutoHotkey是一个windows下的开源、免费、自动化软件工具。它由最初旨在提供键盘快捷键的脚本语言驱动(称为：热键)，随着时间的推移演变成一个完整的脚本语言。但你不需要把它想得太深，你只需要知道它可以简化你的重复性工作，一键自动化启动或运行程序等等；以此提高我们的工作效率，改善生活品质；通过按键映射，鼠标模拟，定义宏等。 本文内容主要分为三部分，主要包括： 安装 配置 实际运用 个人感受 参考资料官方https://autohotkey.com/docs/AutoHotkey.htm 民间https://jeffjade.com/2016/03/11/2016-03-11-autohotkey/https://ahkcn.github.io/docs/AutoHotkey.htm 安装下载地址autohotkey下载地址 配置使用个人常用设置运行软件设置资源管理设置其他设置]]></content>
      <categories>
        <category>常用软件工具</category>
      </categories>
      <tags>
        <tag>autohotkey</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[七牛云-qshell工具常用命令]]></title>
    <url>%2F2018%2F02%2F05%2F%E4%B8%83%E7%89%9B%E4%BA%91-qshell%E5%B7%A5%E5%85%B7%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[前言/简介qshell是利用七牛文档上公开的API实现的一个方便开发者测试和使用七牛API服务的命令行工具。 该工具设计和开发的主要目的就是帮助开发者快速解决问题。 目前该工具融合了七牛存储，CDN，以及其他的一些七牛服务中经常使用到的方法对应的便捷命令，比如b64decode，就是用来解码七牛的URL安全的Base64编码用的，所以这是一个面向开发者的工具。 官方资料文档https://developer.qiniu.com/kodo/tools/1302/qshell 视频教程http://notdelete.echohu.top/spjc/qshell-win.mp4 安装/环境准备目前在windows上使用qshell需要执行以下几个步骤添加命令到系统 下载qshell，存储到指定文件夹，例如我这里是：E:\software\qshell 重命名，将qshell_windows_x64.exe重命名为qshell.exe 添加系统环境变量，将E:\software\qshell追加到环境变量中 命令选项参数 描述 -d 设置是否输出DEBUG日志，如果指定这个选项，则输出DEBUG级别的日志 -m 切换到多用户模式，这样所有的临时文件写入都在命令运行的目录下 -h 打印命令列表帮助信息，遇到参数忘记的情况下，可以使用该命令 -v 打印工具版本，反馈问题的时候，请提前告知工具对应版本号 命令列表 实际操作我们使用qupload来进行文件的管理 官方文档 命令参数展示 命令语法： 1qshell qupload [&lt;ThreadCount&gt;] &lt;LocalUploadConfig&gt; 命令参数： 配置参数展示qupload 功能需要配置文件的支持，配置文件支持的全部参数如下： { &quot;src_dir&quot; : &quot;&lt;LocalPath&gt;&quot;, &quot;bucket&quot; : &quot;&lt;Bucket&gt;&quot;, &quot;file_list&quot; : &quot;&lt;FileList&gt;&quot;, &quot;key_prefix&quot; : &quot;&lt;Key Prefix&gt;&quot;, &quot;up_host&quot; : &quot;&lt;Upload Host&gt;&quot;, &quot;ignore_dir&quot; : false, &quot;overwrite&quot; : false, &quot;check_exists&quot; : false, &quot;check_hash&quot; : false, &quot;check_size&quot; : false, &quot;rescan_local&quot; : true, &quot;skip_file_prefixes&quot; : &quot;test,demo,&quot;, &quot;skip_path_prefixes&quot; : &quot;hello/,temp/&quot;, &quot;skip_fixed_strings&quot; : &quot;.svn,.git&quot;, &quot;skip_suffixes&quot; : &quot;.DS_Store,.exe&quot;, &quot;log_file&quot; : &quot;upload.log&quot;, &quot;log_level&quot; : &quot;info&quot;, &quot;log_rotate&quot; : 1, &quot;log_stdout&quot; : false, &quot;file_type&quot; : 0 } 参数具体含义如下： 密钥设置单用户 1qshell account ak sk 多用户 1qshell -m account ak sk 这里的ak、sk在个人面板中的密钥管理中查看，点击显示，然后进行复制粘贴 如下图所示： 上传图片这里我们选择qupload方式来进行图片的上传，在windows本地创建一个文件夹用户放置图片数据，每次同步该文件夹即可，不用再单独每张上传 步骤1：创建本地图片文件夹如下图所示，在指定位置下创建一个文件夹用于存放图片，在这里，我把它和我的博客文件夹放在同级 步骤2：创建配置文件如下图所示，在指定目录下创建配置文件，注意，这里需要使用编辑打开，不要用notpad++这些编辑器 步骤3：执行命令进行上传准备工作都做好后，执行如下命令直接上传： qshell qupload 1 c:\Users\56810\blog\config.txt 如下图所示 其他配置下载文件刷新缓存官方资料 使用七牛云提供的 qshell 命令行工具，参考使用文档，先设置密钥，然后执行 cdnrefresh 命令来刷新缓存。 具体操作为： 步骤1：修改配置文件 步骤2：执行命令]]></content>
      <categories>
        <category>常用软件工具</category>
        <category>七牛云</category>
      </categories>
      <tags>
        <tag>qshell</tag>
        <tag>七牛云</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IT人职业认知及进阶路线（偏Linux运维方向）]]></title>
    <url>%2F2018%2F02%2F05%2FIT%E4%BA%BA%E8%81%8C%E4%B8%9A%E8%AE%A4%E7%9F%A5%E5%8F%8A%E8%BF%9B%E9%98%B6%E8%B7%AF%E7%BA%BF%EF%BC%88%E5%81%8FLinux%E8%BF%90%E7%BB%B4%E6%96%B9%E5%90%91%EF%BC%89%2F</url>
    <content type="text"><![CDATA[前言]]></content>
      <categories>
        <category>运维思想</category>
      </categories>
      <tags>
        <tag>IT认知</tag>
        <tag>Linux运维工程师进阶</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RSS介绍及使用]]></title>
    <url>%2F2018%2F02%2F04%2FRSS%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[前言参考资料 http://www.ruanyifeng.com/blog/2006/01/rss.html]]></content>
      <categories>
        <category>IT基础知识</category>
        <category>RSS</category>
      </categories>
      <tags>
        <tag>RSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux进程管理/性能分析]]></title>
    <url>%2F2018%2F01%2F29%2FLinux%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[前言在过去的一个多月时间，一直在思考运维的工作重点和定位，因为在工作中会不断有琐事在掠夺个体的时间，导致很多人陷入了看起来很忙，但是在工作三五年之后，发现自己掌握的知识和方法论十分有限，在经过这么一段混乱到有序的升维阶段后，算是看清了一点前方的路。 个人觉得，运维工作，是整个软件开发生命周期的一环非常重要的环节，而软件生命周期说到底就是围绕着人、需求、软件产品也即应用程序等内容来进行，而目前阶段（原谅我是运维菜鸟），主要矛盾应该是应用程序，也就是围绕着程序和进程展开的一系列活动，那说到进程，这里就能很清晰的明确关注点了，那就是进程赖以生存的资源：CPU、内存、磁盘、网络、操作系统，那么我们运维的重点其实就是围绕这这些内容来展开，包括监控、安全、云、存储、大数据、自动化等等的一切目的就是更好更快更合理的调配这些资源，所以，今天这篇文章，将要围绕着进程管理的这几个方面来展开，记录下一些相关的重要命令，方便后续快速排障和分析问题。 有关这段时间的感悟，也就是运维的进阶，后续会专门写一篇文章来讲讲linux运维工程师，包括岗位职责、成长路线、具体实施方法、运维思想以及个人从业至今的一些感悟等等，不知能否算的上是干货，但至少是个人的一点愚见，写好之后，会在此处放上链接。 程序和进程有关linux程序和进程知识，因现阶段无法提供深层次的讲解，不敢妄自菲薄，所以暂时搁置。 ##命令说明具有很强针对性的命令将会被归类到具体的资源目录下，一次能查看2个以上的命令将归类到综合命令目录下。 操作系统CPU内存磁盘网卡流量、网络带宽网络通道情况说明目前的架构基本上都是C/S或者B/S架构，那么client端访问server端和server端返回数据给client都是经由网络这条通道来实现的。因此，畅通的网络是提供服务的前提和基础，对网络状况的分析、排查、故障定位非常重要。 综合命令glancesglances是一款用Python开发的系统状态监控工具，它的监控指标也特别的丰富。基本包含了常用的所有指标。这也是个人常用的一个命令，强烈推荐。 安装glances CentOS系统中由epel源提供安装。安装过程: yum -y install epel-release yum -y install glances 安装后的启动界面如下：glances 可以使用交互式命令打开和关闭某类监控，改变监控指标单位，改变进程排序列。 a：自动对进程排序c：根据 CPU 使用率对进程排序m：根据内存使用率对进程排序i：根据 I/O 速率对进程排序d：关闭/开启 磁盘 I/O 状态信息f：关闭/开启 文件系统状态信息1：全局 CPU 状态 / 单个显示 CPU 状态u：显示网络接口的累积流量 使用htopHtop是Linux 系统中的一个交互式的系统监控和进程查看工具，它被设计用来取代传统的 Unix 系统监控工具 top。Htop 的界面更加直观，功能更加强大，实乃居家旅行杀人越货的必备神器。 安装在CentOS/RHEL系统中，htop由epel源提供安装。安装过程： yum -y install epel-release yum -y install htop 安装后的启动界面如下： 这里显示了系统的 CPU使用率，平均负载，内存使用情况，Swap 使用情况，网络接口流量速率，磁盘 I/O 速率，挂载分区的空间使用率以及进程状态等信息。 使用glances 可以使用交互式命令打开和关闭某类监控，改变监控指标单位，改变进程排序列。 以下为常用参数： a：自动对进程排序 c：根据 CPU 使用率对进程排序 m：根据内存使用率对进程排序 i：根据 I/O 速率对进程排序 d：关闭/开启 磁盘 I/O 状态信息 f：关闭/开启 文件系统状态信息 1：全局 CPU 状态 / 单个显示 CPU 状态 u：显示网络接口的累积流量 dstatdstat 是一款功能非常强大的系统性能监控工具，它整合了 vmstat，iostat，netstat 和 ifstat 四款工具的功能。 安装在CentOS/RHEL系统中，dstat由epel源提供安装。安装过程： yum -y install epel-release yum -y install dstat 使用-c: 显示cpu性能指标相关的统计数据 -d: 显示disk相关的速率数据 -g: 显示page相关的速率数据 -i: 显示interrupt相关的速率数据 -l: 显示load average相关的统计数据 -m: 显示memory相关的统计数据 -n: 显示网络收发数据的速率 -p: 显示进程相关的统计数据 -r: io请求的速率 -s: 显示swap的相关数据 -y: 显示系统相关的数据，包括中断和进程切换 –top-cpu：显示最占用CPU的进程 –top-bio：显示最消耗block io的进程 –top-io：最占用io的进程 –top-mem：显示最占用内存的进程 –ipc: 显示进程间通信相关的速率数据 –raw: 显示raw套接的相关的数据 –tcp: 显示tcp套接字的相关数据 –udp: 显示udp套接字的相关数据 –unix: 显示unix sock接口相关的统计数据 –socket: 显示所有类型套接字的相关数据 -a: 相当于-cdngy dstat 还可以支持插件工作，它的插件位于 /usr/share/dstat 目录中，可以使用这些插件对 mysql 等程序进行监控。]]></content>
      <categories>
        <category>linux进程管理</category>
      </categories>
      <tags>
        <tag>进程管理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown语法]]></title>
    <url>%2F2018%2F01%2F25%2FMarkdown%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Markdown介绍Markdown 是一种轻量级标记语言，它以纯文本形式(易读、易写、易更改)编写文档，常用的标记符号也不超过十个，并最终以HTML格式发布,让写作者专注于写作而不用关注样式。 划重点： 轻量级 标记语言 纯文本，所以兼容性极强，可以用所有文本编辑器打开。 让你专注于文字而不是排版。 格式式转换方便，Markdown 的文本你可以轻松转换为 html、电子书等。 Markdown 的标记语法有极好的可读性，常用的标记符号不过十来个 参考资料看完我这篇文章，再看完我下面推荐的这些内容，然后对比归纳总结，认真实践后，可以说在平常工作学习中完全够用。 官方资料 Markdown 语法说明 (简体中文版) Markdown 语法介绍 易读易写!-MarkDown语法说明 个人文章 献给写作者的 Markdown 新手指南 Markdown——入门指南 Markdown 基本语法 编辑器 个人在用的编辑器是MarkdownPad 2。各个工具之间相差不会很大，熟练掌握快捷键是提高效率的好方法 核心理念Markdown 的目标是实现「易读易写」，成为一种适用于网络的书写语言。。不管从任何角度来说，可读性，都是最重要的。Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像强调。 划重点： 语法是非常简单的符号 即写即读 兼容HTMLMarkdown 的构想不是要使得 HTML文档更容易书写。HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。 HTML是一种发布的格式，而Markdown 是一种书写的格式。也因此，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。 常用操作标题（MarkdownPad中快捷键为Ctrl+1/2/3/4）：Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题），例如： This is an H1 ============= This is an H2 ------------- 任何数量的 = 和 - 都可以有效果。但是这种形式只支持2层标题。 类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，例如： # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 强调在Markdown中，可以使用 和 _ 来表示斜体和加粗。*单个为斜体，2个为加粗 加粗（MarkdownPad中快捷键为Ctrl+b）：加粗部分使用方式如下： **Coding，让开发更简单** __Coding，让开发更简单__ 实际展示效果如下： Coding，让开发更简单 Coding，让开发更简单 斜体（MarkdownPad中快捷键为Ctrl+l）：斜体部分的使用如下： *Coding，让开发更简单* _Coding，让开发更简单_ 实际展示效果展示如下： Coding，让开发更简单 Coding，让开发更简单 列表无序列表（MarkdownPad中快捷键为Ctrl+u）：* list1 前面使用*号 - list2 前面使用-号 + list3 前面使用+号 效果如下： list1 list2 list3 有序列表(MarkdownPad中快捷键为Ctrl+shift+o）：1. list1 使用数字+英文的点号，空格后接数据 2. list2 效果如下： list1 list2 区块引用（MarkdownPad中快捷键为Ctrl+q）&gt; 数据1 使用&gt;号 &gt; 数据2 &gt; &gt; 二级引用 注意区块引用可以包含多级引用 &gt; 实际效果展示： 数据1 数据2 这是二级引用 三级引用 代码区块（MarkdownPad中快捷键为Ctrl+k）：代码区块包括3种，文字内和单独一行以及指定代码格式的区块行 文字内加区块，不会加空白处底纹使用``（数字1左边，ESC下面的按键） 实际效果展示：在文件中含有代码区块是什么样子 整行的代码区块行，会加空白处底纹（快捷操作：全部选中然后敲Tab）缩进4个空格或者一个制表符（tab键）或者将代码块包裹在代码块包裹在 “/` 之间（避免无休止的缩进）。 实际效果展示 123require 'redcarpet'markdown = Redcarpet.new("Hello World!")puts markdown.to_html 实际效果展示： 现在的效果就是整整一个的区块行，如果这段代码比较长的话，那么markdown就会在下面生成一个查看条，供用户左右拉取调整，就是如现在所示。 指定代码格式的区块行 实际效果展示： 12$ line1-test1$ line2-test2 分割线/分隔线（MarkdownPad中快捷键为Ctrl+r）：一行中用三个以上的星号、减号、底线来建立一个分隔线，可以在字符之间加入空格，也可以不加空格 * * * *** ***** --- - - - 实际效果展示如下： 网页链接网页链接有2种方式，一种是直接显示链接，一种是通过文字进行跳转 直接显示&lt;https://www.baidu.com&gt; 用&lt;&gt;尖括号将内容包起来，markdown就会自动把它转成链接。网页链接、邮箱链接等都采用这种方式 实际效果展示如下：这段话中将要插入百度https://www.baidu.com的链接 文字跳转More info: [Server](https://hexo.io/docs/server.html) 前面是解释性说明，[]内是可以跳转的文字，()内是真正访问的地址。 实际效果展示如下： 请点击百度调整到百度页面 图片链接图片链接分为2部分，一种是在文字中，通过文字来链接到图片位置，用户需要点击这个文字链接去查看图片，优点是使文字更简约，缺点是无法直观的看到图。因此，第二种方式是直接在文章中显示图片。 我们把这两种方式分别称之为：行内式和参考式 行内式行内式的图片语法看起来像是： ![Alt text](/path/to/img.jpg) 参考案例：![Alt text](/path/to/img.jpg &quot;Optional title&quot;) 详细叙述如下： 一个惊叹号 ! 接着一个方括号，里面放上图片的替代文字 接着一个普通括号，里面放上图片的网址， 最后还可以用引号包住并加上 选择性的 ‘title’ 文字。 参考式参考式的图片语法则长得像这样： ![Alt text][id] 「id」是图片参考的名称，图片参考的定义方式则和连结参考一样： 参考案例：[id]: url/to/image &quot;Optional title attribute&quot; 表格普通表格： First Header | Second Header | Third Header ------------ | ------------- | ------------ Content Cell | Content Cell | Content Cell Content Cell | Content Cell | Content Cell 设置表格两边内容对齐，中间内容居中，例如： First Header | Second Header | Third Header :----------- | :-----------: | -----------: Left | Center | Right Left | Center | Right 实际效果展示： First Header Second Header Third Header Left Center Right Left Center Right 文本居中居中使用html方式添加，格式如下： 1&lt;center&gt;这一行需要居中&lt;/center&gt; 文本居中的引用先看下实际效果： 主要用于主页等显示，和上面的文本场景有点不一样。 具体实现： &lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt; &lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt; &lt;blockquote class=&quot;blockquote-center&quot;&gt;blah blah blah&lt;/blockquote&gt; &lt;!-- 标签 方式，要求NexT版本在0.4.5或以上 --&gt; {% centerquote %} content {% endcenterquote %} &lt;!-- 标签别名 --&gt; {% cq %} content {% endcq %} 添加空行&lt;br /&gt; 使用该方法进行插入 反斜杠转义\*literal asterisks\* 使用这种方式来输出*号 实际效果展示： *literal asterisks*]]></content>
      <categories>
        <category>常用软件工具</category>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TotalCommander常用快捷键]]></title>
    <url>%2F2018%2F01%2F25%2FTotalCommander%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%2F</url>
    <content type="text"><![CDATA[基础知识参考资料可以先看下相关资料，这些资料对概念介绍等做的非常详细也写的非常好，因此这里不再赘述，本文主要是针对实际的运用。 官方资料 https://www.ghisler.com/官网上没有相对应的文档，需要额外去搜寻 优秀个人文章 TC学堂——最易读的Total Commander教程-强烈推荐通过该网站进行学习 Total Commander快捷键 TC是什么这里引用张学思汉化版的介绍： 功能强大的全能文件管理器（简称TC）。支持随意自定义的菜单、工具栏、快捷键，给您最大的自由，打造个性 TC。一般的文件操作，如搜索、复制、移动、改名、删除等功能应有尽有，更有文件内容比较、同步文件夹、批量重命名文件、分割合并文件、创建/检查文件校验 (MD5/SFV) 等实用功能。内置 ZIP/TAR/GZ/TGZ 格式的压缩/解压功能，ZIP 格式还支持创建加密及自解包功能。此外，不仅可以直接打开(解开) ARJ/CAB/RAR/LZH/ACE/UC2 等压缩包，配合插件或相应的压缩程序，更可创建这些格式的压缩包，就像创建和打开文件夹一样简单。而搜索功能，无论是文件还是内容，同样支持在这些压缩包中进行。 除了支持详细资料、列表、缩略图等资源管理器也有的显示方式外，利用内容插件，支持各式各样的自定义列视图，显示不同文件的内部信息，满足您查看不同文件的需求。多标签界面，让本来的两个窗口，可以扩展到几十个，操作空间更显自由。而贴心的历史和常用文件夹按钮，可以导出/导入的标签和文件列表，让您穿越各个空间更加快捷高效。 通过工具栏和菜单，可以随意调用外部程序和内部命令。多种功能或强大或实用的插件，让 TC 如虎添翼、能原来所不能。批量重命名和文件搜索，利用插件和正则表达式，功能更多更强了。还有可以选择的美化界面，支持 FXP 和 HTTP 代理的 FTP 功能，等等等等……有了它，资源管理器、WinZip 及大多数文件管理和工具栏软件，都可以下岗了！ 如上面的描述所述，TC是一个非常好的资源管理器。光说没概念，实际亲自实践比什么都强。 let’s go！ 操作概述-定位与选择概述Total Commander是文件管理器，并且是操作最高效的文件管理器。 既然是文件管理器，顾名思义，就是对文件进行管理和各种操作的。 这里的文件，要广义理解，可能是：一个或多个文件、一个或多个文件夹、甚至是一条或多条TC插件展示的内容项。高效是Total Commander之宗旨。如何实现高效？TC给出的答案是：将文件管理拆分为三步：定位→选择→操作。然后，每一步都提供N种高效方式，用户于是有了极多的组合选择，可以视情况找出最高效的做法。其实，这种独立分解，每一单元做到极致，并且使之环环相扣的做法，也是UNIX/Linux的思路。或许，有人认为文件管理本来就简单，这样是小题大做。这种想法也没错。只是这样想的，正是Windows的思路，完全可以用资源管理器，就没必要选择Total Commander了。 其实，过程拆解并不是TC的创造，任何文件管理器都是这样。比如，你要在资源管理器中对文件改名，是否按如下步骤呢？找到所在目录→选中文件→按F2或右键改名。TC只是将每个步骤给出了更多、更快捷的操作方式。 在文件管理的三个步骤中，大家容易认识到TC在“操作”方面的强大，想到TC有各种快捷键，比如改名、打开、速览、压缩、比较……等。但实际上，作为文件操作的前提，TC的文件定位和选择也是极其灵活的。 定位显示命令常用目录这部分设置可以说是TC操作的精华，效率直接甩开windows资源管理器几条街。 具体实现：步骤1：快速添加 ctrl+d，添加，然后a直接添加，如下图所示 常用目录高级配置通过自定义配置，可以自定义调整常用目录的名称、顺序等，后续的增删改查也在此页面进行。 步骤1：进入配置页面ctrl+d，添加，进去之后按c进入常用目录配置对话框。在里面配置的时候，需要再最前面人为添加&amp;。例如&amp;1 xxx 步骤2：进行具体配置 直达组合键直达组合键：alt+s 进行配置。一般都是类似ctrl+alt+F1这种形式 其他定位命令ctrl +e 进入资源管理器 alt + f1 选择第一个窗口的磁盘 +f2就是选择第二个窗口的磁盘 alt+下箭头 历史记录 ctrl+\ 返回到当前目录的根目录 选择命令选择文件选择单个文件通过右键来实现批量选择文件 批量选择多个文件批量选择有以下几种方法： 部分选择-连续 Alt+上箭头 or Alt+下箭头 部分选择-不连续 空格选择指定文件 全选 alt+数字键盘+。取反：小键盘的* 实际操作命令查看F3：查看文件内容，默认为txt文本方式打开 重命名移动一步实现重命名+移动F6 刷新]]></content>
      <categories>
        <category>常用软件工具</category>
        <category>TotalCommander</category>
      </categories>
      <tags>
        <tag>TC操作</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F01%2F23%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is my first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask author on GitHub. 前言之前使用阿里云结合wordpress的方式搭博客，但是自己维护起来不是太方便，云服务器一旦攻击，数据是个问题。之后在51cto和csdn上写，但是要受到平台的限制。最近发现github有博客功能(几年前就推出了，竟然现在才发现)，完美解决这些问题。github提供空间，用户自行选择博客框架，专注于内容，大部分人应该还是喜欢这种简约风主题。目前这个博客使用github-pages+Hexo来实现。 参考资料搭建 https://zhuanlan.zhihu.com/p/26625249 http://eleveneat.com/2015/04/24/Hexo-a-blog/ 进阶 主要参考官方资料 Hexo文档 https://hexo.io/zh-cn/docs/ Next主题使用手册 http://theme-next.iissnan.com/ 根据官方资料，按图索骥，基本上都能很好的把所有功能实现出来。使用问题可以随时沟通交流 markdown语法 关于markdown的使用，可以看我的这篇博文 Markdown语法 Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
